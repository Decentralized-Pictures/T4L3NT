tests_alpha/test_contract.py::TestTypecheck::test_typecheck[mini_scenarios/generic_multisig.tz]

Well typed
Gas remaining: 1039939.911 units remaining
{ parameter
    (or (unit %default)
        (pair %main
           (pair :payload
              (nat %counter)
              (or :action
                 (lambda %operation unit (list operation))
                 (pair %change_keys (nat %threshold) (list %keys key))))
           (list %sigs (option signature)))) ;
  storage (pair (nat %stored_counter) (pair (nat %threshold) (list %keys key))) ;
  code { UNPAIR
         /* [ or unit
               (pair (pair nat (or (lambda unit (list operation)) (pair nat (list key))))
                     (list (option signature))) : pair nat nat (list key) ] */ ;
         IF_LEFT
           { DROP
             /* [ pair nat nat (list key) ] */ ;
             NIL operation
             /* [ list operation : pair nat nat (list key) ] */ ;
             PAIR
             /* [ pair (list operation) nat nat (list key) ] */ }
           { PUSH mutez
                  0
             /* [ mutez
                : pair (pair nat (or (lambda unit (list operation)) (pair nat (list key))))
                     (list (option signature)) : pair nat nat (list key) ] */ ;
             AMOUNT
             /* [ mutez : mutez
                : pair (pair nat (or (lambda unit (list operation)) (pair nat (list key))))
                     (list (option signature)) : pair nat nat (list key) ] */ ;
             ASSERT_CMPEQ ;
             SWAP
             /* [ pair nat nat (list key)
                : pair (pair nat (or (lambda unit (list operation)) (pair nat (list key))))
                     (list (option signature)) ] */ ;
             DUP
             /* [ pair nat nat (list key) : pair nat nat (list key)
                : pair (pair nat (or (lambda unit (list operation)) (pair nat (list key))))
                     (list (option signature)) ] */ ;
             DIP { SWAP
                   /* [ pair (pair nat (or (lambda unit (list operation)) (pair nat (list key))))
                           (list (option signature)) : pair nat nat (list key) ] */ }
             /* [ pair nat nat (list key)
                : pair (pair nat (or (lambda unit (list operation)) (pair nat (list key))))
                     (list (option signature)) : pair nat nat (list key) ] */ ;
             DIP { UNPAIR
                   /* [ pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : list (option signature) : pair nat nat (list key) ] */ ;
                   DUP
                   /* [ pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : list (option signature) : pair nat nat (list key) ] */ ;
                   SELF
                   /* [ contract unit
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : list (option signature) : pair nat nat (list key) ] */ ;
                   ADDRESS
                   /* [ address
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : list (option signature) : pair nat nat (list key) ] */ ;
                   CHAIN_ID
                   /* [ chain_id : address
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : list (option signature) : pair nat nat (list key) ] */ ;
                   PAIR
                   /* [ pair chain_id address
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : list (option signature) : pair nat nat (list key) ] */ ;
                   PAIR
                   /* [ pair (pair chain_id address) nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : list (option signature) : pair nat nat (list key) ] */ ;
                   PACK
                   /* [ bytes : pair nat (or (lambda unit (list operation)) (pair nat (list key)))
                      : list (option signature) : pair nat nat (list key) ] */ ;
                   DIP { UNPAIR @counter
                         /* [ nat : or (lambda unit (list operation)) (pair nat (list key))
                            : list (option signature) : pair nat nat (list key) ] */ ;
                         DIP { SWAP
                               /* [ list (option signature)
                                  : or (lambda unit (list operation)) (pair nat (list key))
                                  : pair nat nat (list key) ] */ }
                         /* [ nat : list (option signature)
                            : or (lambda unit (list operation)) (pair nat (list key))
                            : pair nat nat (list key) ] */ }
                   /* [ bytes : nat : list (option signature)
                      : or (lambda unit (list operation)) (pair nat (list key))
                      : pair nat nat (list key) ] */ ;
                   SWAP
                   /* [ nat : bytes : list (option signature)
                      : or (lambda unit (list operation)) (pair nat (list key))
                      : pair nat nat (list key) ] */ }
             /* [ pair nat nat (list key) : nat : bytes : list (option signature)
                : or (lambda unit (list operation)) (pair nat (list key))
                : pair nat nat (list key) ] */ ;
             UNPAIR @stored_counter
             /* [ nat : pair nat (list key) : nat : bytes : list (option signature)
                : or (lambda unit (list operation)) (pair nat (list key))
                : pair nat nat (list key) ] */ ;
             DIP { SWAP
                   /* [ nat : pair nat (list key) : bytes : list (option signature)
                      : or (lambda unit (list operation)) (pair nat (list key))
                      : pair nat nat (list key) ] */ }
             /* [ nat : nat : pair nat (list key) : bytes : list (option signature)
                : or (lambda unit (list operation)) (pair nat (list key))
                : pair nat nat (list key) ] */ ;
             ASSERT_CMPEQ ;
             DIP { SWAP
                   /* [ list (option signature) : bytes
                      : or (lambda unit (list operation)) (pair nat (list key))
                      : pair nat nat (list key) ] */ }
             /* [ pair nat (list key) : list (option signature) : bytes
                : or (lambda unit (list operation)) (pair nat (list key))
                : pair nat nat (list key) ] */ ;
             UNPAIR @threshold @keys
             /* [ nat : list key : list (option signature) : bytes
                : or (lambda unit (list operation)) (pair nat (list key))
                : pair nat nat (list key) ] */ ;
             DIP { PUSH @valid
                     nat
                     0
                   /* [ nat : list key : list (option signature) : bytes
                      : or (lambda unit (list operation)) (pair nat (list key))
                      : pair nat nat (list key) ] */ ;
                   SWAP
                   /* [ list key : nat : list (option signature) : bytes
                      : or (lambda unit (list operation)) (pair nat (list key))
                      : pair nat nat (list key) ] */ ;
                   ITER { DIP { SWAP
                                /* [ list (option signature) : nat : bytes
                                   : or (lambda unit (list operation)) (pair nat (list key))
                                   : pair nat nat (list key) ] */ }
                          /* [ key : list (option signature) : nat : bytes
                             : or (lambda unit (list operation)) (pair nat (list key))
                             : pair nat nat (list key) ] */ ;
                          SWAP
                          /* [ list (option signature) : key : nat : bytes
                             : or (lambda unit (list operation)) (pair nat (list key))
                             : pair nat nat (list key) ] */ ;
                          IF_CONS
                            { IF_SOME
                                { SWAP
                                  /* [ list (option signature) : signature : key : nat : bytes
                                     : or (lambda unit (list operation)) (pair nat (list key))
                                     : pair nat nat (list key) ] */ ;
                                  DIP { SWAP
                                        /* [ key : signature : nat : bytes
                                           : or (lambda unit (list operation)) (pair nat (list key))
                                           : pair nat nat (list key) ] */ ;
                                        DIIP { DUUP
                                               /* [ bytes : nat : bytes
                                                  : or (lambda unit (list operation)) (pair nat (list key))
                                                  : pair nat nat (list key) ] */ }
                                        /* [ key : signature : bytes : nat : bytes
                                           : or (lambda unit (list operation)) (pair nat (list key))
                                           : pair nat nat (list key) ] */ ;
                                        { DUUUP
                                          /* [ bytes : key : signature : bytes : nat : bytes
                                             : or (lambda unit (list operation)) (pair nat (list key))
                                             : pair nat nat (list key) ] */ ;
                                          DIP { CHECK_SIGNATURE
                                                /* [ bool : nat : bytes
                                                   : or (lambda unit (list operation)) (pair nat (list key))
                                                   : pair nat nat (list key) ] */ }
                                          /* [ bytes : bool : nat : bytes
                                             : or (lambda unit (list operation)) (pair nat (list key))
                                             : pair nat nat (list key) ] */ ;
                                          SWAP
                                          /* [ bool : bytes : nat : bytes
                                             : or (lambda unit (list operation)) (pair nat (list key))
                                             : pair nat nat (list key) ] */ ;
                                          IF { DROP
                                               /* [ nat : bytes : or (lambda unit (list operation)) (pair nat (list key))
                                                  : pair nat nat (list key) ] */ }
                                             { FAILWITH /* [] */ } } ;
                                        PUSH nat
                                             1
                                        /* [ nat : nat : bytes : or (lambda unit (list operation)) (pair nat (list key))
                                           : pair nat nat (list key) ] */ ;
                                        ADD @valid
                                        /* [ nat : bytes : or (lambda unit (list operation)) (pair nat (list key))
                                           : pair nat nat (list key) ] */ }
                                  /* [ list (option signature) : nat : bytes
                                     : or (lambda unit (list operation)) (pair nat (list key))
                                     : pair nat nat (list key) ] */ }
                                { SWAP
                                  /* [ key : list (option signature) : nat : bytes
                                     : or (lambda unit (list operation)) (pair nat (list key))
                                     : pair nat nat (list key) ] */ ;
                                  DROP
                                  /* [ list (option signature) : nat : bytes
                                     : or (lambda unit (list operation)) (pair nat (list key))
                                     : pair nat nat (list key) ] */ } }
                            { FAIL } ;
                          SWAP
                          /* [ nat : list (option signature) : bytes
                             : or (lambda unit (list operation)) (pair nat (list key))
                             : pair nat nat (list key) ] */ }
                   /* [ nat : list (option signature) : bytes
                      : or (lambda unit (list operation)) (pair nat (list key))
                      : pair nat nat (list key) ] */ }
             /* [ nat : nat : list (option signature) : bytes
                : or (lambda unit (list operation)) (pair nat (list key))
                : pair nat nat (list key) ] */ ;
             ASSERT_CMPLE ;
             IF_CONS
               { FAIL }
               { /* [ bytes : or (lambda unit (list operation)) (pair nat (list key))
                    : pair nat nat (list key) ] */ } ;
             DROP
             /* [ or (lambda unit (list operation)) (pair nat (list key))
                : pair nat nat (list key) ] */ ;
             DIP { UNPAIR
                   /* [ nat : pair nat (list key) ] */ ;
                   PUSH nat 1
                   /* [ nat : nat : pair nat (list key) ] */ ;
                   ADD @new_counter
                   /* [ nat : pair nat (list key) ] */ ;
                   PAIR
                   /* [ pair nat nat (list key) ] */ }
             /* [ or (lambda unit (list operation)) (pair nat (list key))
                : pair nat nat (list key) ] */ ;
             IF_LEFT
               { UNIT
                 /* [ unit : lambda unit (list operation) : pair nat nat (list key) ] */ ;
                 EXEC
                 /* [ list operation : pair nat nat (list key) ] */ }
               { DIP { CAR /* [ nat ] */ }
                 /* [ pair nat (list key) : nat ] */ ;
                 SWAP
                 /* [ nat : pair nat (list key) ] */ ;
                 PAIR
                 /* [ pair nat nat (list key) ] */ ;
                 NIL operation
                 /* [ list operation : pair nat nat (list key) ] */ } ;
             PAIR
             /* [ pair (list operation) nat nat (list key) ] */ } } }
