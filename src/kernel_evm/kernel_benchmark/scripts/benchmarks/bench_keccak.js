// SPDX-FileCopyrightText: 2023 Marigold <contact@marigold.dev>
//
// SPDX-License-Identifier: MIT

// create contract and call it
// keccak.sol

const utils = require('./utils');
let faucet = require('./players/faucet.json');
let player1 = require('./players/player1.json');


let create_data = "0x60806040527f60298f78cc0b47170ba79c10aa3851d7648bd96f2f8e46a19dbc777c36fb0c0060001b60005534801561003757600080fd5b5061038d806100476000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634eee59b31461003b57806385bb7d691461006b575b600080fd5b6100556004803603810190610050919061021c565b610089565b6040516100629190610280565b60405180910390f35b6100736100bc565b60405161008091906102b4565b60405180910390f35b600080548260405160200161009e9190610340565b60405160208183030381529060405280519060200120149050919050565b60005481565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610129826100e0565b810181811067ffffffffffffffff82111715610148576101476100f1565b5b80604052505050565b600061015b6100c2565b90506101678282610120565b919050565b600067ffffffffffffffff821115610187576101866100f1565b5b610190826100e0565b9050602081019050919050565b82818337600083830152505050565b60006101bf6101ba8461016c565b610151565b9050828152602081018484840111156101db576101da6100db565b5b6101e684828561019d565b509392505050565b600082601f830112610203576102026100d6565b5b81356102138482602086016101ac565b91505092915050565b600060208284031215610232576102316100cc565b5b600082013567ffffffffffffffff8111156102505761024f6100d1565b5b61025c848285016101ee565b91505092915050565b60008115159050919050565b61027a81610265565b82525050565b60006020820190506102956000830184610271565b92915050565b6000819050919050565b6102ae8161029b565b82525050565b60006020820190506102c960008301846102a5565b92915050565b600081519050919050565b600081905092915050565b60005b838110156103035780820151818401526020810190506102e8565b60008484015250505050565b600061031a826102cf565b61032481856102da565b93506103348185602086016102e5565b80840191505092915050565b600061034c828461030f565b91508190509291505056fea26469706673582212206570d8a20f8b4c9d16a0ca94095f98643433908c41362bdb2e270ffef8ff1db164736f6c63430008120033"
let call_answer = "0x85bb7d69"
let call_guess_soli = "0x4eee59b300000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000008536f6c6964697479000000000000000000000000000000000000000000000000"
let call_guess_test = "0x4eee59b3000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000047465737400000000000000000000000000000000000000000000000000000000"
let call_guess_long = "0x4eee59b30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003b436563692065737420756e207465787420756e20706575206c6f6e672c20736973692c20756e20706575206c6f6e6720766f7573206469732d6a650000000000"
let call_lorem_ipsum = "0x4eee59b3000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001bd4c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e73656374657475722061646970697363696e6720656c69742c2073656420646f20656975736d6f642074656d706f7220696e6369646964756e74207574206c61626f726520657420646f6c6f7265206d61676e6120616c697175612e20557420656e696d206164206d696e696d2076656e69616d2c2071756973206e6f737472756420657865726369746174696f6e20756c6c616d636f206c61626f726973206e69736920757420616c697175697020657820656120636f6d6d6f646f20636f6e7365717561742e2044756973206175746520697275726520646f6c6f7220696e20726570726568656e646572697420696e20766f6c7570746174652076656c697420657373652063696c6c756d20646f6c6f726520657520667567696174206e756c6c612070617269617475722e204578636570746575722073696e74206f6363616563617420637570696461746174206e6f6e2070726f6964656e742c2073756e7420696e2063756c706120717569206f666669636961206465736572756e74206d6f6c6c697420616e696d20696420657374206c61626f72756d2e000000"
let txs = [];
// initialisation
// player 1 gets funds, then originate the contract, then stores 36
txs.push(utils.transfer(faucet, player1, 100000000))
let create = utils.create(player1, 0, create_data)
txs.push(create.tx)
txs.push(utils.send(player1, create.addr, 0, call_answer))
txs.push(utils.send(player1, create.addr, 0, call_guess_soli))
txs.push(utils.send(player1, create.addr, 0, call_guess_test))
txs.push(utils.send(player1, create.addr, 0, call_guess_long))
txs.push(utils.send(player1, create.addr, 0, call_lorem_ipsum))

utils.print_bench([txs])
