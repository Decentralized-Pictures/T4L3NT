---

.build:
  extends: .build_template
  needs: []
  variables:
    ARCH: ""
    # We fix the value of GIT_{SHORTREF,DATETIME,VERSION} (these are
    # read by src/lib_version and output by the binaries `--version`
    # option). Fixing these values on development builds improves
    # cache usage.
    GIT_SHORTREF: "00000000"
    GIT_DATETIME: "1970-01-01 00:00:00 +0000%"
    GIT_VERSION: "dev"
  script:
    # We remove protocols not needed for tests in order to speed up the CI.
    - ./scripts/remove-old-protocols.sh
    - . ./scripts/version.sh
    # 1. Some basic, fast sanity checks
    - if [ "${build_deps_image_version}" != "${opam_repository_tag}" ] ; then
        echo "Inconsistent dependencies hash between 'scripts/version.sh' and '.gitlab/ci/templates.yml'." ;
        echo "${build_deps_image_version} != ${opam_repository_tag}" ;
        exit 1 ;
      fi
    - diff poetry.lock /home/tezos/poetry.lock
    - diff pyproject.toml /home/tezos/pyproject.toml
    # 2. Actually build
    - make build-unreleased
    # 3. Also build the tps evaluation tool which is not part of the default build.
    #    NOTE: We add $COVERAGE_OPTIONS to all dune build commands to enable reuse of
    #    build artifacts.
    - dune build $COVERAGE_OPTIONS src/bin_tps_evaluation
    # 4. clean-up caches before uploading the cache
    - opam clean
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - _build
  artifacts:
    name: "build-$ARCH-$CI_COMMIT_REF_SLUG"
    paths:
      - tezos-*
      - src/proto_*/parameters/*.json
      - _build/default/src/lib_protocol_compiler/bin/main_native.exe
    expire_in: 1 day
    when: on_success

build_x86_64:
  extends:
    - .build
    - .rules_template__development_and_extended
  variables:
    ARCH: "x86_64"

build_arm64:
  extends:
    - .build
    - .rules_template__development_arm64
  variables:
    ARCH: "arm64"
    # Disable coverage for arm64
    COVERAGE_OPTIONS: ""
  tags:
    - arm64

build_get_contracts:
  extends:
    - .build_template
    - .rules_template__development
  script:
    - dune build @devtools/get_contracts/check

# similar to the build template above, this template
# compiles all binaries using the static profile.
.build_static_binaries_template:
  extends:
    - .default_settings_template
    - .image_template__runtime_build_dependencies_template
  stage: build
  needs: []
  variables:
    ARCH: ""
  script:
    # FIXME: https://gitlab.com/tezos/tezos/-/issues/2865
    - sudo chown -R $(id -u):$(id -g) $CI_PROJECT_DIR
    # Create destination directory
    - mkdir -pv tezos-binaries
    # Build and install static binaries
    - ./scripts/build_and_install_static_binaries.sh "tezos-binaries/$ARCH"
    # Strip debug symbols and compress binaries (parallelized)
    - find "tezos-binaries/$ARCH" -maxdepth 1 -type f ! -name "*.*" | xargs -n1 -P$(nproc) -i sh -c 'strip --strip-debug {}; upx -6q {};'

  artifacts:
    paths:
      - "tezos-binaries/$ARCH/*"

# x86_64 static binaries are necessary for development branches, as we want to make
# sure the build does not break. We also need it for release tags, to as its artifacts
# are published in the stage `publish_release`. For this reason, we build it in all pipelines,
# except on latest release branches.
build:static-x86_64-linux-binaries:
  extends:
    - .build_static_binaries_template
    - .rules_template__not_on_latest_release
  variables:
    ARCH: "x86_64"

# arm64 static binaries are only built for master and releases.
build:static-arm64-linux-binaries:
  extends:
    - .build_static_binaries_template
    - .rules_template__master_and_releases
  variables:
    ARCH: "arm64"
  tags:
    - arm64
