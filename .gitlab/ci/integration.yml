# Definition for the environment to run all integration tests.
# This is also used by Tezt tests.
# In general we do not have to run make, which takes a while,
# because the binaries have been produced by the build job and are
# in the cache. But if they are not, we need to build them.
# Ideally we should also check that the baker / accuser / endorser
# exist (some tests use them) but their actual name depend on the protocol.
.integration_template:
  extends: .test_template
  before_script:
    - if [ ! -f tezos-node ] || [ ! -f tezos-client ] || [ ! -f tezos-codec ] || [ ! -f tezos-sandbox ]; then make; fi

integration:proto:sandbox:
  extends: .integration_template
  script:
    - dune build @runtest_sandbox

integration:compiler-rejections:
  extends: .integration_template
  script:
    - dune build @runtest_rejections

############################################################
## Stage: run scripts to check they are working properly  ##
############################################################

script:prepare_migration_test:
  extends: .test_template
  before_script:
    - last_proto_name=$(find src -name "proto_[0-9][0-9][0-9]_*" | awk -F'/' '{print $NF}' | sort -r | head -1)
    - last_proto_version=$(echo $last_proto_name | cut -d'_' -f2)
    - new_proto_version=$(printf "%03d" $((10#$last_proto_version + 1)))
    - make
  script:
    - ./scripts/prepare_migration_test.sh manual "next_$new_proto_version" 1

script:snapshot_alpha_and_link:
  extends: .test_template
  before_script:
    - last_proto_name=$(find src -name "proto_[0-9][0-9][0-9]_*" | awk -F'/' '{print $NF}' | sort -r | head -1)
    - last_proto_version=$(echo $last_proto_name | cut -d'_' -f2)
    - new_proto_version=$(printf "%03d" $((10#$last_proto_version + 1)))
    - make
  script:
    - ./scripts/snapshot_alpha_and_link.sh "$new_proto_version" next
    - make

############################################################
## Stage: run OCaml integration tests                     ##
############################################################

integration:sandboxes:voting:
  extends: .integration_template
  script:
    - TMP=$PWD make -f sandbox.Makefile voting_demo_noops
  artifacts:
    paths:
      - flextesa-voting-demo-noops
    expire_in: 1 day
    when: on_failure

integration:sandboxes:acc-baking:
  extends: .integration_template
  script:
    - TMP=$PWD make -f sandbox.Makefile accusations_simple_double_baking
  artifacts:
    paths:
      - flextesa-acc-sdb
    expire_in: 1 day
    when: on_failure

integration:sandboxes:acc-endorsement:
  extends: .integration_template
  script:
    - TMP=$PWD make -f sandbox.Makefile accusations_simple_double_endorsing
  artifacts:
    paths:
      - flextesa-acc-sde
    expire_in: 1 day
    when: on_failure

integration:sandboxes:u-a-u:
  extends: .integration_template
  script:
    - TMP=$PWD make -f sandbox.Makefile user_activated_upgrade_next
    - TMP=$PWD make -f sandbox.Makefile user_activated_upgrade_alpha
  artifacts:
    paths:
      - flextesa-hard-fork
      - flextesa-hard-fork-alpha
    expire_in: 1 day
    when: on_failure

integration:sandboxes:daemons-upgrade:
  extends: .integration_template
  script:
    - TMP=$PWD make -f sandbox.Makefile daemons_upgrade_next
    - TMP=$PWD make -f sandbox.Makefile daemons_upgrade_alpha
  artifacts:
    paths:
      - flextesa-daemons-upgrade
      - flextesa-daemons-upgrade-alpha
    expire_in: 1 day
    when: on_failure

############################################################
## Stage: run python integration tests                    ##
############################################################

# definition for the environment to run all integration tests
# integration tests are run only on x86_64 architectures (for now)
.integration_python_template:
  extends: .test_template
  needs:
    - build_x86_64
  before_script:
    # Load the environment poetry previously created in the docker image.
    # Give access to the Python dependencies/executables
    - . $HOME/.venv/bin/activate
    - mkdir tests_python/tmp
    - touch tests_python/tmp/empty__to_avoid_glob_failing
    - cd tests_python
  after_script:
    - tail -n 100 tests_python/tmp/*
  artifacts:
    paths:
      - tests_python/tmp/
    reports:
      junit: tests_python/reports/*.xml
    expire_in: 7 day
    when: always
  # python scripts don't need the _build directory
  # but only the binaries in the artifacts
  cache: {}

# this section is updated using the script scripts/update_integration_test.sh
##BEGIN_INTEGRATION_PYTHON##
integration:010_batch:
  extends: .integration_python_template
  script:
    - poetry run pytest "tests_010" --exitfirst -m "not slow" -s --log-dir=tmp "--junitxml=reports/010_batch.xml" 2>&1 | tee "tmp/010_batch.out" | tail
  stage: test

integration:011_batch:
  extends: .integration_python_template
  script:
    - poetry run pytest "tests_011" --exitfirst -m "not slow" -s --log-dir=tmp "--junitxml=reports/011_batch.xml" 2>&1 | tee "tmp/011_batch.out" | tail
  stage: test

integration:111_batch:
  extends: .integration_python_template
  script:
    - poetry run pytest "tests_111" --exitfirst -m "not slow" -s --log-dir=tmp "--junitxml=reports/111_batch.xml" 2>&1 | tee "tmp/111_batch.out" | tail
  stage: test

integration:alpha_batch:
  extends: .integration_python_template
  script:
    - poetry run pytest "tests_alpha" --exitfirst -m "not slow" -s --log-dir=tmp "--junitxml=reports/alpha_batch.xml" 2>&1 | tee "tmp/alpha_batch.out" | tail
  stage: test

integration:examples:
  extends: .integration_python_template
  script:
    - PYTHONPATH=$PYTHONPATH:./ poetry run python examples/forge_transfer.py
    - PYTHONPATH=$PYTHONPATH:./ poetry run python examples/example.py
    - PYTHONPATH=./ poetry run pytest --exitfirst examples/test_example.py
  stage: test
##END_INTEGRATION_PYTHON##
