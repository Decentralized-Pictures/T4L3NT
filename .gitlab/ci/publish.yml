.build_docker_release_template:
  extends:
    - .default_settings_template
    - .image_template__latest
    - .rules_template__master_and_releases
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    IMAGE_ARCH_PREFIX: ""
  before_script:
    - mkdir ~/.docker || true
    - echo "{ \"auths\":{ \"https://index.docker.io/v1/\":{ \"auth\":\"${CI_DOCKER_AUTH}\" } } }" > ~/.docker/config.json
  script:
    - TAG_NAME=$(echo "${CI_COMMIT_REF_NAME}" | tr -c -- '-._\n[:alnum:]' '_')
    - ./scripts/create_docker_image.sh
        "${public_docker_image_name}"
        "${IMAGE_ARCH_PREFIX}${TAG_NAME}"
        "${build_deps_image_name}"
        "${build_deps_image_version}"
        "${CI_COMMIT_SHORT_SHA}"
    - docker push "${public_docker_image_name%?}:${IMAGE_ARCH_PREFIX}${TAG_NAME}"
    - docker push "${public_docker_image_name}bare:${IMAGE_ARCH_PREFIX}${TAG_NAME}"
    - docker push "${public_docker_image_name}debug:${IMAGE_ARCH_PREFIX}${TAG_NAME}"
  interruptible: false

publish:docker_manual:
  extends: .build_docker_release_template
  variables:
    public_docker_image_name: ${CI_REGISTRY_IMAGE}/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    IMAGE_ARCH_PREFIX: "amd64-"
  stage: manual
  needs: []
  rules:
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH =~ /docker/'
      when: on_success
    - if: $CI_COMMIT_BRANCH
      when: manual
      allow_failure: true
    - when: never
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk --no-cache --virtual add git

build_release:docker_amd64:
  extends: .build_docker_release_template
  variables:
    DOCKER_DRIVER: overlay2
    IMAGE_ARCH_PREFIX: "amd64-"
  stage: build_release
  tags:
    - safe_docker

build_release:docker_arm64:
  extends: .build_docker_release_template
  variables:
    DOCKER_DRIVER: overlay2
    IMAGE_ARCH_PREFIX: "arm64-"
  stage: build_release
  tags:
    - arm64

.build_static_binaries_template:
  extends:
    - .default_settings_template
    - .image_template__runtime_build_dependencies_template
    - .rules_template__master_and_releases
  stage: build_release
  before_script:
    - sudo apk --no-cache --virtual add unzip wget eudev-dev autoconf automake libtool linux-headers binutils zlib-static
    # TODO: include static version of this libraries to the default docker image
    - packaging/build/build-libusb-and-hidapi.sh
    # TODO: patch approach is very fragile, we should think about something
    # more reliable
    - git apply packaging/build/static_libs.patch
    # dune build @install make ocamlopt stack overflow when compiling
    # protocol functor with static linking (because of
    # liquidity_baking_cpmm.ml).
    # Let's skip protocol functors, they are not needed for the release
    - dune build $(for i in src/{,proto_*/}bin_* ; do echo @$i/install ; done) --profile release
    - mkdir tezos-binaries && install -t tezos-binaries _build/install/default/bin/*
    # Strip debug symbols in binaries
    - find tezos-binaries -maxdepth 1 -type f ! -name "*.*" -exec strip --strip-debug {} \;
  artifacts:
    paths:
      - tezos-binaries/*

build_release:static-x86_64-linux-binaries:
  extends: .build_static_binaries_template
  script:
    - sudo apk --no-cache --virtual add upx
    # Compress resulting binaries
    - find tezos-binaries -maxdepth 1 -type f ! -name "*.*" -exec upx {} \;

build_release:static-arm64-linux-binaries:
  extends: .build_static_binaries_template
  script:
    - echo "No compression for now"
  tags:
    - arm64

.release_static_binaries_template:
  image: registry.gitlab.com/gitlab-org/release-cli
  variables:
    ARCH_PREFIX: ""
  rules:
    - if: '$CI_COMMIT_TAG =~ /\A\d+\.\d+\.\d+\z/ && $CI_PROJECT_NAMESPACE == "tezos"'
      when: on_success
    - when: never
  variables:
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/tezos/${CI_COMMIT_TAG}"
  stage: publish_release
  script:
    - apk --no-cache --virtual add bash jq curl
    - scripts/release/upload-static-binaries-to-package-registry.sh "$ARCH_PREFIX"

release-static-x86_64-binaries:
  extends: .release_static_binaries_template
  variables:
    ARCH_PREFIX: "x86_64-"
  dependencies:
    - build_release:static-x86_64-linux-binaries

release-static-arm64-binaries:
  extends: .release_static_binaries_template
  variables:
    ARCH_PREFIX: "arm64-"
  dependencies:
    - build_release:static-arm64-linux-binaries

release-on-gitlab:
  image: registry.gitlab.com/gitlab-org/release-cli
  rules:
    - if: '$CI_COMMIT_TAG =~ /\A\d+\.\d+\.\d+\z/ && $CI_PROJECT_NAMESPACE == "tezos"'
      when: on_success
    - when: never
  variables:
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/tezos/${CI_COMMIT_TAG}"
  stage: publish_release
  script:
    - apk --no-cache --virtual add bash jq
    - scripts/release/create-release-with-static-binaries.sh

merge-manifest:
  image: docker:latest
  services:
    - name: "docker:dind"
      command: ["--experimental"]
  variables:
    DOCKER_DRIVER: overlay2
  stage: publish_release
  only:
    - master@tezos/tezos
    - tags@tezos/tezos
    - /-release$/@tezos/tezos
  before_script:
    - apk add git binutils
    - mkdir ~/.docker || true
    - echo "{ \"experimental\":\"enabled\", \"auths\":{ \"https://index.docker.io/v1/\":{ \"auth\":\"${CI_DOCKER_AUTH}\" } } }" > ~/.docker/config.json
  script:
    - LAST_COMMIT_DATE_TIME=$(git log --pretty=format:"%cd" -1 --date="format:%Y%m%d%H%M%S" 2>&1)
    - TAG_NAME=$(echo "${CI_COMMIT_REF_NAME}" | tr -c -- '-._\n[:alnum:]' '_')
    - docker manifest create "${public_docker_image_name}bare:${TAG_NAME}"
      --amend "${public_docker_image_name}bare:amd64-${TAG_NAME}"
      --amend "${public_docker_image_name}bare:arm64-${TAG_NAME}"
    - docker manifest push "${public_docker_image_name}bare:${TAG_NAME}"
    - docker manifest create "${public_docker_image_name}bare:${TAG_NAME}_${CI_COMMIT_SHORT_SHA}_${LAST_COMMIT_DATE_TIME}"
      --amend "${public_docker_image_name}bare:amd64-${TAG_NAME}"
      --amend "${public_docker_image_name}bare:arm64-${TAG_NAME}"
    - docker manifest push "${public_docker_image_name}bare:${TAG_NAME}_${CI_COMMIT_SHORT_SHA}_${LAST_COMMIT_DATE_TIME}"
    - docker manifest create "${public_docker_image_name}debug:${TAG_NAME}"
      --amend "${public_docker_image_name}debug:amd64-${TAG_NAME}"
      --amend "${public_docker_image_name}debug:arm64-${TAG_NAME}"
    - docker manifest push "${public_docker_image_name}debug:${TAG_NAME}"
    - docker manifest create "${public_docker_image_name}debug:${TAG_NAME}_${CI_COMMIT_SHORT_SHA}_${LAST_COMMIT_DATE_TIME}"
      --amend "${public_docker_image_name}debug:amd64-${TAG_NAME}"
      --amend "${public_docker_image_name}debug:arm64-${TAG_NAME}"
    - docker manifest push "${public_docker_image_name}debug:${TAG_NAME}_${CI_COMMIT_SHORT_SHA}_${LAST_COMMIT_DATE_TIME}"
    - docker manifest create "${public_docker_image_name%?}:${TAG_NAME}"
      --amend "${public_docker_image_name%?}:amd64-${TAG_NAME}"
      --amend "${public_docker_image_name%?}:arm64-${TAG_NAME}"
    - docker manifest push "${public_docker_image_name%?}:${TAG_NAME}"
    - docker manifest create "${public_docker_image_name%?}:${TAG_NAME}_${CI_COMMIT_SHORT_SHA}_${LAST_COMMIT_DATE_TIME}"
      --amend "${public_docker_image_name%?}:amd64-${TAG_NAME}"
      --amend "${public_docker_image_name%?}:arm64-${TAG_NAME}"
    - docker manifest push "${public_docker_image_name%?}:${TAG_NAME}_${CI_COMMIT_SHORT_SHA}_${LAST_COMMIT_DATE_TIME}"
  interruptible: false

publish:documentation:
  extends:
    - .default_settings_template
    - .image_template__runtime_build_test_dependencies_template
    - .rules_template__master
  stage: doc
  before_script:
    - sudo apk add --no-cache openssh-client rsync
    - echo "${CI_PK_GITLAB_DOC}" > ~/.ssh/id_ed25519
    - echo "${CI_KH}" > ~/.ssh/known_hosts
    - chmod 400 ~/.ssh/id_ed25519
  script:
    - make -C docs all
    - git clone --depth 5 git@gitlab.com:${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAMESPACE}.gitlab.io gitlab.io
    - rsync --recursive --links --perms --delete
        --exclude=.doctrees --exclude={{main,alpha,zero}net,master}/index.html
        docs/_build/ gitlab.io/public/
    - cd gitlab.io
    - if [ -z "$(git status -s)" ] ; then
        echo "Nothing to commit!" ;
      else
        git add public ;
        git commit -m "Import doc of ${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:${CI_COMMIT_SHA}" ;
        git push origin master ;
      fi
  interruptible: false

# This job publishes the html report generated by the coverage job.
# It is accessible on the gitlab page associated to the project
# via URL $CI_PAGES_URL/$CI_PIPELINE_ID
#
# for instance https://nomadic-labs.gitlab.io/tezos/${CI_PIPELINE_ID}
# https://tezos.gitlab.io/tezos/${CI_PIPELINE_ID}
#
# It is run manually from the Gitlab CI interface.
#
# Note that this job is somewhat redundant. It is already possible to browse
# the html report artefact generated by the test_coverage job.
#

pages:
  extends:
    - .default_settings_template
    - .rules_template__development_coverage
  needs: ["test_coverage"]
  stage: publish_coverage
  # The cache rule ensures public (i.e. the static website) isn't erased
  # whenever we start a new pipeline
  # https://docs.gitlab.com/ee/ci/caching/
  # The pages job retrieves the old public dir from the cache, adds a new
  # report, and publishes the new public dir.
  cache:
    paths:
      - public
  dependencies:
    - test_coverage
  script:
    - mkdir -p public
    - mv _coverage_report public/$CI_PIPELINE_ID
    - echo "Coverage report published at $CI_PAGES_URL/$CI_PIPELINE_ID"
  artifacts:
    paths:
      - public
    # This is the minimum time the public artifact will remain available.
    # Everytime a pages job is launched, this time period is reset
    expire_in: 7 days
  interruptible: false

