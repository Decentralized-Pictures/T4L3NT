# Setup authentication for either Docker Hub (release) or GitLab registry (dev).
# Also setup Docker names such that they are valid for the target (Docker Hub or GitLab).
# Docker constraints on tags: https://docs.docker.com/engine/reference/commandline/tag/
#
#   A tag name must be valid ASCII and may contain lowercase and
#   uppercase letters, digits, underscores, periods and dashes. A tag
#   name may not start with a period or a dash and may contain a maximum
#   of 128 characters.
#
# To detect dev mode we test the value of $MASTER_OR_RELEASE
# The variable MASTER_OR_RELEASE is set in the template
# .rules_template__master_and_releases
# GitLab image name must follow this format:
# https://docs.gitlab.com/ee/user/packages/container_registry/#image-naming-convention
.docker_registry_auth:
  before_script:
    - mkdir ~/.docker || true
    - if [ "$MASTER_OR_RELEASE" = "true" ]; then
        export DOCKER_IMAGE_NAME="docker.io/${CI_PROJECT_PATH}-" ;
        echo "{ \"auths\":{ \"https://index.docker.io/v1/\":{ \"auth\":\"${CI_DOCKER_AUTH}\" } } }" > ~/.docker/config.json ;
      else
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY ;
        export DOCKER_IMAGE_NAME="${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/" ;
      fi
    - TAG_NAME=$(echo "${IMAGE_ARCH_PREFIX}${CI_COMMIT_REF_NAME}" | tr -c -- '-._\n[:alnum:]' '_')
    - echo "Building images ${DOCKER_IMAGE_NAME%?} ( /bare & /debug ) ${TAG_NAME}"

.build_docker_release_template:
  extends:
    - .default_settings_template
    - .image_template__latest
    - .docker_registry_auth # this setup a before_script for the auth
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    IMAGE_ARCH_PREFIX: ""
  script:
    - apk --no-cache --virtual add git
    # Build normal, bare and debug image
    - ./scripts/create_docker_image.sh
        "${DOCKER_IMAGE_NAME}"
        "${TAG_NAME}"
        "${build_deps_image_name}"
        "${build_deps_image_version}"
        "${CI_COMMIT_SHORT_SHA}"
    # auth gitlab or dockerhub registry
    # notice the different namespace for gitlab and that we remove the `-`
    # Test the bare image
    - ./scripts/ci/docker_smoke_test.sh "${DOCKER_IMAGE_NAME}bare:${TAG_NAME}" "${CI_COMMIT_SHORT_SHA}" version
    - docker push "${DOCKER_IMAGE_NAME%?}:${TAG_NAME}" ;
    - docker push "${DOCKER_IMAGE_NAME}bare:${TAG_NAME}" ;
    - docker push "${DOCKER_IMAGE_NAME}debug:${TAG_NAME}" ;
  interruptible: false

publish:docker_manual_amd64:
  extends:
    - .build_docker_release_template
    - .rules_template__development_docker
  variables:
    IMAGE_ARCH_PREFIX: "amd64_"
  stage: manual
  needs: []

publish:docker_manual_arm64:
  extends:
    - .build_docker_release_template
    - .rules_template__development_docker
  variables:
    IMAGE_ARCH_PREFIX: "arm64_"
  stage: manual
  needs: []
  tags:
    - arm64

build_release:docker_amd64:
  extends:
    - .build_docker_release_template
    - .rules_template__master_and_releases
  variables:
    IMAGE_ARCH_PREFIX: "amd64_"
  stage: build_release
  tags:
    - safe_docker

build_release:docker_arm64:
  extends:
    - .build_docker_release_template
    - .rules_template__master_and_releases
  variables:
    IMAGE_ARCH_PREFIX: "arm64_"
  stage: build_release
  tags:
    - arm64

.release_static_binaries_template:
  extends:
    - .rules_template__release_tag
  image: registry.gitlab.com/gitlab-org/release-cli
  variables:
    ARCH_PREFIX: ""
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/tezos/${CI_COMMIT_TAG}"
  stage: publish_release
  script:
    - apk --no-cache --virtual add bash jq curl
    - scripts/release/upload-static-binaries-to-package-registry.sh "$ARCH_PREFIX"

release-static-x86_64-binaries:
  extends: .release_static_binaries_template
  variables:
    ARCH_PREFIX: "x86_64-"
  dependencies:
    - build:static-x86_64-linux-binaries

release-static-arm64-binaries:
  extends: .release_static_binaries_template
  variables:
    ARCH_PREFIX: "arm64-"
  dependencies:
    - build:static-arm64-linux-binaries

release-on-gitlab:
  extends:
    - .rules_template__release_tag
  image: registry.gitlab.com/gitlab-org/release-cli
  variables:
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/tezos/${CI_COMMIT_TAG}"
  stage: publish_release
  script:
    - apk --no-cache --virtual add bash jq
    - scripts/release/create-release-with-static-binaries.sh

# Note: here we rely on $IMAGE_ARCH_PREFIX to be empty.
# Otherwise, $TAG_NAME would contain $IMAGE_ARCH_PREFIX too.
# $IMAGE_ARCH_PREFIX is only used when building Docker images,
# here we handle all architectures so there is no such variable.
merge-manifest:
  extends:
    - .rules_template__master_and_releases
    - .docker_registry_auth
  image: docker:latest
  services:
    - name: "docker:dind"
      command: ["--experimental"]
  variables:
    DOCKER_DRIVER: overlay2
  stage: publish_release
  script:
    - apk add git
    - LAST_COMMIT_DATE_TIME=$(git log --pretty=format:"%cd" -1 --date="format:%Y%m%d%H%M%S" 2>&1)

    - docker pull "${DOCKER_IMAGE_NAME}bare:amd64_${TAG_NAME}"
    - docker pull "${DOCKER_IMAGE_NAME}bare:arm64_${TAG_NAME}"
    - docker manifest create "${DOCKER_IMAGE_NAME}bare:${TAG_NAME}"
      --amend "${DOCKER_IMAGE_NAME}bare:amd64_${TAG_NAME}"
      --amend "${DOCKER_IMAGE_NAME}bare:arm64_${TAG_NAME}"
    - docker manifest push "${DOCKER_IMAGE_NAME}bare:${TAG_NAME}"

    - docker manifest create "${DOCKER_IMAGE_NAME}bare:${TAG_NAME}_${CI_COMMIT_SHORT_SHA}_${LAST_COMMIT_DATE_TIME}"
      --amend "${DOCKER_IMAGE_NAME}bare:amd64_${TAG_NAME}"
      --amend "${DOCKER_IMAGE_NAME}bare:arm64_${TAG_NAME}"
    - docker manifest push "${DOCKER_IMAGE_NAME}bare:${TAG_NAME}_${CI_COMMIT_SHORT_SHA}_${LAST_COMMIT_DATE_TIME}"

    - docker pull "${DOCKER_IMAGE_NAME}debug:amd64_${TAG_NAME}"
    - docker pull "${DOCKER_IMAGE_NAME}debug:arm64_${TAG_NAME}"
    - docker manifest create "${DOCKER_IMAGE_NAME}debug:${TAG_NAME}"
      --amend "${DOCKER_IMAGE_NAME}debug:amd64_${TAG_NAME}"
      --amend "${DOCKER_IMAGE_NAME}debug:arm64_${TAG_NAME}"
    - docker manifest push "${DOCKER_IMAGE_NAME}debug:${TAG_NAME}"

    - docker manifest create "${DOCKER_IMAGE_NAME}debug:${TAG_NAME}_${CI_COMMIT_SHORT_SHA}_${LAST_COMMIT_DATE_TIME}"
      --amend "${DOCKER_IMAGE_NAME}debug:amd64_${TAG_NAME}"
      --amend "${DOCKER_IMAGE_NAME}debug:arm64_${TAG_NAME}"
    - docker manifest push "${DOCKER_IMAGE_NAME}debug:${TAG_NAME}_${CI_COMMIT_SHORT_SHA}_${LAST_COMMIT_DATE_TIME}"

    - docker pull "${DOCKER_IMAGE_NAME%?}:amd64_${TAG_NAME}"
    - docker pull "${DOCKER_IMAGE_NAME%?}:arm64_${TAG_NAME}"
    - docker manifest create "${DOCKER_IMAGE_NAME%?}:${TAG_NAME}"
      --amend "${DOCKER_IMAGE_NAME%?}:amd64_${TAG_NAME}"
      --amend "${DOCKER_IMAGE_NAME%?}:arm64_${TAG_NAME}"
    - docker manifest push "${DOCKER_IMAGE_NAME%?}:${TAG_NAME}"

    - docker manifest create "${DOCKER_IMAGE_NAME%?}:${TAG_NAME}_${CI_COMMIT_SHORT_SHA}_${LAST_COMMIT_DATE_TIME}"
      --amend "${DOCKER_IMAGE_NAME%?}:amd64_${TAG_NAME}"
      --amend "${DOCKER_IMAGE_NAME%?}:arm64_${TAG_NAME}"
    - docker manifest push "${DOCKER_IMAGE_NAME%?}:${TAG_NAME}_${CI_COMMIT_SHORT_SHA}_${LAST_COMMIT_DATE_TIME}"
  interruptible: false

# here we use this hack to publish the tezos documentation on
# gitlab.io because we want to publish the doc for the project
# tezos under https://tezos.gitlab.io and not  https://tezos.gitlab.io/tezos
# The latter follows the gitlab url convention of
# https://<projectname_space>.gitlab.io/<project_name>/
# Notice that we push only if CI_COMMIT_REF_NAME is really master .
# This allows to test the release workflow
publish:documentation:
  extends:
    - .default_settings_template
    - .image_template__runtime_build_test_dependencies_template
    - .rules_template__master
  stage: doc
  before_script:
    - sudo apk add --no-cache openssh-client rsync
    - echo "${CI_PK_GITLAB_DOC}" > ~/.ssh/id_ed25519
    - echo "${CI_KH}" > ~/.ssh/known_hosts
    - chmod 400 ~/.ssh/id_ed25519
  script:
    - if [ "${CI_COMMIT_REF_NAME}" == "master" ] ; then
        make -C docs all ;
        git clone --depth 5 git@gitlab.com:${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAMESPACE}.gitlab.io gitlab.io ;
        rsync --recursive --links --perms --delete
          --exclude=.doctrees --exclude={{main,alpha,zero}net,master}/index.html
          docs/_build/ gitlab.io/public/ ;
        cd gitlab.io ;
      else
          echo "Skip pushing documentation. Only pushing for real master" ;
      fi
    - if [ -z "$(git status -s)" ] ; then
        echo "Nothing to commit!" ;
      else
        git add public ;
        git commit -m "Import doc of ${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:${CI_COMMIT_SHA}" ;
        git push origin master ;
      fi
  interruptible: false
