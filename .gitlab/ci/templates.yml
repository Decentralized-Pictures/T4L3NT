variables:
  # /!\ CI_REGISTRY is overriden to use a private Docker registry mirror in AWS ECR
  # in GitLab namespaces `nomadic-labs` and `tezos`
  ## This value MUST be the same as `opam_repository_tag` in `scripts/version.sh`
  build_deps_image_version: 5f32b741ce4e3f5adb661002d2d93eeb70819d09
  build_deps_image_name: "${CI_REGISTRY}/tezos/opam-repository"
  GIT_STRATEGY: fetch
  GIT_DEPTH: "1"
  GET_SOURCES_ATTEMPTS: "2"
  ARTIFACT_DOWNLOAD_ATTEMPTS: "2"
  # Sets the number of tries before failing opam downloads.
  OPAMRETRIES: "5"

  TEZOS_DEFAULT_BRANCH: "master"
  TEZOS_DEFAULT_NAMESPACE: "tezos"

  # An addition to working around a bug in gitlab-runner's default
  # unzipping implementation (https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27496),
  # this setting cuts cache creation time.
  FF_USE_FASTZIP: "true"

# Basic, specialised, minimal, orthogonal templates

# Some settings we want by default on all jobs that cannot be set
# through the key `default` in `.gitlab-ci.yml`.
.default_settings_template:
  # `dependencies` are empty be default. Each individual job or
  # template requiring artifacts from preceeding jobs should declare
  # their dependencies locally.
  dependencies: []

# Image templates
.image_template__runtime_build_test_dependencies_template:
  image: ${build_deps_image_name}:runtime-build-test-dependencies--${build_deps_image_version}

.image_template__runtime_build_dependencies_template:
  image: ${build_deps_image_name}:runtime-build-dependencies--${build_deps_image_version}

.image_template__runtime_prebuild_dependencies_template:
  image: ${build_deps_image_name}:runtime-prebuild-dependencies--${build_deps_image_version}

# Match GitLab executors version and directly use the Docker socket
# The Docker daemon is already configured, experimental features are enabled
# The following environment variables are already set:
# - BUILDKIT_PROGRESS
# - DOCKER_DRIVER
# - DOCKER_VERSION
# https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-socket-binding
.image_template__docker:
  # https://gitlab.com/tezos/docker-images/ci-docker
  image: "${CI_REGISTRY}/tezos/docker-images/ci-docker:v1.6.0"

.image_template__alpine:
  image: alpine:3.15

# Rules template

# Rules for the first pipeline job (gateway to make the whole pipeline manual for development)
.rules_template__trigger:
  rules:
    # Scheduled pipelines
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE"'
      when: always
    # Default branch in default namespace
    - if: '$CI_COMMIT_BRANCH == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: always
    # Nomadic Labs Marge-bot: https://gitlab.com/nomadic-margebot
    - if: '$CI_MERGE_REQUEST_ASSIGNEES =~ /nomadic-margebot/'
      when: always
    # Tags
    - if: '$CI_COMMIT_TAG && ($CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE || $CI_PROJECT_NAMESPACE == "nomadic-labs")'
      when: always
    # 'vX-release' branches
    - if: '($CI_COMMIT_BRANCH =~ /^v[0-9]{1,3}-release$/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^v[0-9]{1,3}-release$/) && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: always
    # Release branches
    - if: '$CI_COMMIT_REF_NAME == "latest-release" && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: always
    # Test release branches
    - if: '$CI_COMMIT_REF_NAME == "test-latest-release" && $CI_PROJECT_NAMESPACE == "nomadic-labs"'
      when: always
    - when: manual # default

# Rule to add to all jobs which need to be run only if (manual) trigger job is completed
.needs_template__wait_for_trigger_job:
  needs: [trigger]

# Rules for all the jobs that need to be run on development branches (typically
# those that have an MR, but also some experiments, etc.)
.rules_template__development:
  rules:
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    # No development jobs on test latest release
    - if: '$CI_COMMIT_REF_NAME == "test-latest-release" && $CI_PROJECT_NAMESPACE == "nomadic-labs"'
      when: never
    # No development jobs on release branches
    - if: '($CI_COMMIT_BRANCH =~ /-release$/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /-release$/) && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    # No development jobs on release tags
    - if: '$CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - when: on_success

# Same as .rules_template__development, but for manual jobs.
.rules_template__development_manual:
  rules:
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    # No development jobs on test latest release
    - if: '$CI_COMMIT_REF_NAME == "test-latest-release" && $CI_PROJECT_NAMESPACE == "nomadic-labs"'
      when: never
    # No development jobs on release branches
    - if: '($CI_COMMIT_BRANCH =~ /-release$/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /-release$/) && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    # No development jobs on release tags
    - if: '$CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - when: manual

# Same as .rules_template__development, but for jobs that should also
# appear in the extended test pipeline
.rules_template__development_and_extended:
  rules:
    # Run in the scheduled, extended test pipeline
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE" && $TZ_SCHEDULE_KIND == "EXTENDED_TESTS"'
      when: on_success
    # If this is not the extended test pipeline (since the above rule
    # did not trigger), then forbid on default branch
    - if: '$CI_COMMIT_BRANCH == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    # No development jobs on test latest release
    - if: '$CI_COMMIT_REF_NAME == "test-latest-release" && $CI_PROJECT_NAMESPACE == "nomadic-labs"'
      when: never
    # No development jobs on release branches
    - if: '($CI_COMMIT_BRANCH =~ /-release$/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /-release$/) && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    # No development jobs on release tags
    - if: '$CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - when: on_success

# Rules for all the jobs that are run only for the master branch and the like
# (tags, releases, etc.)
.rules_template__master_and_releases:
  rules:
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE"'
      when: never
    # Valid release tag: vX.Y or vX.Y-rcZ
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+(?:\-rc\d+)?$/ && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: on_success
      variables:
        CI_DOCKER_HUB: "true"
    # No jobs on latest release branches
    - if: '($CI_COMMIT_REF_NAME == "latest-release" || $CI_COMMIT_REF_NAME == "test-latest-release")'
      when: never
    # Match 'vX-release' branches only
    - if: '($CI_COMMIT_BRANCH =~ /v[0-9]{1,3}-release$/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /v[0-9]{1,3}-release$/) && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: on_success
      variables:
        CI_DOCKER_HUB: "true"
    - if: '$CI_COMMIT_BRANCH == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: on_success
      variables:
        CI_DOCKER_HUB: "true"
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: on_success
      variables:
        CI_DOCKER_HUB: "true"
    # Testing
    - if: '$CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE == "nomadic-labs"'
      when: on_success
    - when: never

# Rules for all the jobs that are run only for the master branch
.rules_template__master:
  rules:
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE"'
      when: never
    - if: '$CI_COMMIT_BRANCH == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: on_success
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: on_success
    - when: never

# Rules for all the jobs that are run only on release tags
.rules_template__release_tag:
  rules:
    # Valid release tag: vX.Y or vX.Y-rcZ
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+(?:\-rc\d+)?$/ && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: on_success
    # Testing
    - if: '$CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE == "nomadic-labs"'
      when: on_success
    - when: never

# Rules for all the jobs that are run only on latest release branches
.rules_template__latest_release:
  rules:
    # Production: push to Docker Hub
    - if: '$CI_COMMIT_REF_NAME == "latest-release" && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: on_success
      variables:
        CI_DOCKER_HUB: "true"
    # Testing: push to GitLab container registry
    - if: '$CI_COMMIT_REF_NAME == "test-latest-release" && $CI_PROJECT_NAMESPACE == "nomadic-labs"'
      when: on_success
    - when: never

# Rules for jobs that should run all the time except on latest release branches
.rules_template__not_on_latest_release:
  rules:
    # No jobs on latest release branches
    - if: '($CI_COMMIT_REF_NAME == "latest-release" || $CI_COMMIT_REF_NAME == "test-latest-release")'
      when: never
    - when: on_success

# Rules for specific topics: doc, opam, etc.
.rules_template__development_documentation:
  rules:
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE" && $TZ_SCHEDULE_KIND == "EXTENDED_TESTS"'
      when: always
    - if: '$CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    # No development jobs on latest release branches
    - if: '$CI_COMMIT_REF_NAME == "test-latest-release" && $CI_PROJECT_NAMESPACE == "nomadic-labs"'
      when: never
    # No development jobs on release branches
    - if: '($CI_COMMIT_BRANCH =~ /-release$/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /-release$/) && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - if: '$CI_COMMIT_BRANCH == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == $TEZOS_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - if: '$CI_MERGE_REQUEST_ID'
      changes:
        - docs/introduction/*.sh
        - docs/developer/*.sh
        - docs/scripts/test_doc_scripts.sh
      when: on_success
    # Run when there is label on the merge request
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(?:^|[,])ci--docs(?:$|[,])/'
      when: on_success
    - when: manual
      allow_failure: true

.rules_template__development_arm64:
  rules:
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE" && $TZ_SCHEDULE_KIND == "EXTENDED_TESTS"'
      when: always
    # Run when there is label on the merge request
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(?:^|[,])ci--arm64(?:$|[,])/'
      when: on_success
    # No development jobs on test latest release
    - if: '$CI_COMMIT_REF_NAME == "test-latest-release" && $CI_PROJECT_NAMESPACE == "nomadic-labs"'
      when: never
    # No development jobs on release branches
    - if: '($CI_COMMIT_BRANCH =~ /-release$/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /-release$/) && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    # No development jobs on release tags
    - if: '$CI_COMMIT_TAG && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    - when: manual
      allow_failure: true

.rules_template__development_docker:
  rules:
    # No development jobs on test latest release
    - if: '$CI_COMMIT_REF_NAME == "test-latest-release" && $CI_PROJECT_NAMESPACE == "nomadic-labs"'
      when: never
    # No development jobs on release branches
    - if: '($CI_COMMIT_BRANCH =~ /-release$/ || $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /-release$/) && $CI_PROJECT_NAMESPACE == $TEZOS_DEFAULT_NAMESPACE'
      when: never
    # Run when there is label on the merge request
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(?:^|[,])ci--docker(?:$|[,])/'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true
    - when: never

.rules_template__development_dockerfile:
  rules:
    # Only run on merge requests when Dockerfiles have changed
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - build.Dockerfile
        - Dockerfile
    - when: never # default


# Rules for jobs that should appear in the extended test pipeline
.rules_template__extended_test_pipeline:
  rules:
    - if: '$TZ_PIPELINE_KIND == "SCHEDULE" && $TZ_SCHEDULE_KIND == "EXTENDED_TESTS"'
      when: on_success
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(?:^|[,])ci--extended-tests(?:$|[,])/'
      when: on_success
    - when: never

# Rules for jobs that should appear in the extended test pipeline or
# whenever the pytests change
.rules_template__extended_test_pipeline__pytest:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - tests_python/**/*
      when: on_success
    - !reference [.rules_template__extended_test_pipeline, rules]

.rules_template__merge_request_only:
  rules:
    # Only run on merge requests
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: on_success
    - when: never # default

.rules_template__tezos_default_branch_only:
  rules:
    - if: '$CI_COMMIT_BRANCH == $TEZOS_DEFAULT_BRANCH'
      when: on_success
    - when: never # default

# Job templates

# This template is used by the opam test jobs defined in opam-ci.yml
.opam_template:
  extends:
    - .default_settings_template
    - .image_template__runtime_prebuild_dependencies_template
  stage: packaging
  # FIXME: https://gitlab.com/nomadic-labs/tezos/-/issues/663
  # FIXME: https://gitlab.com/nomadic-labs/tezos/-/issues/664
  # At the time of writing, the opam tests were quite flaky.
  # Therefore, a retry was added. This should be removed once the
  # underlying tests have been fixed.
  retry: 2
  script:
    - make  -C ${CI_PROJECT_DIR}/.gitlab/ci opam-configure
  needs: [opam:prepare]
  dependencies: [opam:prepare]
  after_script:
    # Stores logs in opam_logs for artifacts and outputs an excerpt on failure.
    - OPAM_LOGS=opam_logs ./scripts/ci/opam_handle_output.sh
  artifacts:
    paths:
      - opam_logs/
    expire_in: 1 week
    when: always

# Add variables for bisect_ppx instrumentation
.template__coverage:
  variables:
    COVERAGE_OPTIONS: "--instrument-with bisect_ppx"
    BISECT_FILE: "$CI_PROJECT_DIR/_coverage_output/"
    SLACK_COVERAGE_CHANNEL: "C02PHBE7W73"

# Merge coverage files after the execution
.template__coverage_files:
  extends: .template__coverage
  artifacts:
    name: "coverage-files-$CI_JOB_ID"
    paths:
      - $BISECT_FILE
    expire_in: 1 day
    when: on_success

.template__coverage_report:
  extends: .template__coverage
  stage: test_coverage
  before_script:
    # Load the environment poetry previously created in the docker image
    # Give access to the Python dependencies/executables
    - . "$HOME/.venv/bin/activate"
  coverage: '/Coverage: ([^%]+%)/'
  artifacts:
    expose_as: 'Coverage report'
    reports:
      coverage_report:
        coverage_format: cobertura
        path: _coverage_report/cobertura.xml
    paths:
      - _coverage_report/
      - $BISECT_FILE
    expire_in: 15 days
    when: always

.build_template:
  extends:
    - .default_settings_template
    - .image_template__runtime_build_test_dependencies_template
    - .template__coverage
    - .rules_template__not_on_latest_release
  stage: build
  before_script:
    # FIXME: https://gitlab.com/tezos/tezos/-/issues/2865
    - sudo chown -R $(id -u):$(id -g) $CI_PROJECT_DIR
    - . ./scripts/version.sh
    # Load the environment poetry previously created in the docker image.
    # Give access to the Python dependencies/executables
    - . $HOME/.venv/bin/activate

.docker_registry_auth:
  before_script:
    - ./scripts/ci/docker_registry_auth.sh

.template__code_quality:
  variables:
    CODE_QUALITY_REPORT: "_reports/gl-code-quality-report.json"
