# integration:compiler-rejections does not
# require access to the binaries like the "true" integration tests
# below. Therefore, it does not extend the .integration_template.

integration:compiler-rejections:
  extends: .test_template
  script:
    - make -C ${CI_PROJECT_DIR}/.gitlab/ci integration-test-compiler-rejections

############################################################
## Stage: run scripts to check they are working properly  ##
############################################################

# Note: those two jobs actually probably don't need the build_x86_64 job
# to have finished, but we don't want to start before build_x86_64 has finished either.
script:prepare_migration_test:
  extends: .test_template
  needs: ["build_x86_64"]
  before_script:
    - make
  script:
    - make -C ${CI_PROJECT_DIR}/.gitlab/ci integration-test-prepare-migration-test

script:snapshot_alpha_and_link:
  extends: .test_template
  needs: ["build_x86_64"]
  script:
    - make -C ${CI_PROJECT_DIR}/.gitlab/ci integration-test-snapshot-alpha-and-link

script:test-gen-genesis:
  extends:
    - .default_settings_template
    - .image_template__runtime_build_test_dependencies_template
    - .rules_template__development
    - .needs_template__wait_for_trigger_job
  stage: test
  before_script:
    - cd scripts/gen-genesis
  script:
    - dune build gen_genesis.exe

script:test_release_versions:
  extends: .test_template
  script:
    # FIXME: https://gitlab.com/tezos/tezos/-/issues/2865
    - sudo chown -R $(id -u):$(id -g) ${CI_PROJECT_DIR}
    - ./scripts/test_release_version.sh

############################################################
## Stage: run python integration tests                    ##
############################################################

# definition for the environment to run all integration tests
# integration tests are run only on x86_64 architectures (for now)
.pytest_template:
  extends:
    - .test_template
  dependencies: ["build_x86_64"]
  # Start immediately after 'build_x86_64' and don't wait for
  # intermediate stages to succeed
  needs: ["build_x86_64"]
  before_script:
    # Load the environment poetry previously created in the docker image.
    # Give access to the Python dependencies/executables
    - . $HOME/.venv/bin/activate
    - mkdir tests_python/tmp
    - cd tests_python

integration:static-binaries:
  extends:
    - .pytest_template
  allow_failure: true
  needs:
    - build:static-x86_64-linux-binaries
  dependencies:
    - build:static-x86_64-linux-binaries
  script:
    - make -C ${CI_PROJECT_DIR}/.gitlab/ci test-static-binaries

.pytest_integration:
  extends:
    - .pytest_template
    - .template__coverage_files
  # the number of jobs have been choosen to give jobs of maximal
  # length ~10 minutes and to accommodate the addition of new protocol
  # test suites without increasing wall time of the test stage.
  variables:
    TESTS: ""
  script:
    - make -C ${CI_PROJECT_DIR}/.gitlab/ci test-pytest
  artifacts:
    paths:
      - tests_python/tmp/
      - tests_python/reports/*.xml
      - $BISECT_FILE
    reports:
      junit: tests_python/reports/*.xml
    expire_in: 7 day
    when: always

integration:pytest:
  extends:
    - .pytest_integration
  # WARNING: if you increase the number of parallel jobs, you need to
  # update test_coverage.yml with the new list of jobs.
  parallel: 20
  variables:
    TESTS: "tests_alpha"

integration:pytest_old_protocols:
  extends:
    - .pytest_integration
    - .rules_template__extended_test_pipeline__pytest
  parallel: 16
  variables:
    TESTS: "--ignore tests_alpha"

integration:pytest_examples:
  extends: .pytest_template
  script:
    - make -C ${CI_PROJECT_DIR}/.gitlab/ci test-pytest-example
