
./octez-client --protocol ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK --mode mockup --no-base-dir-warnings typecheck script michelson_test_scripts/mini_scenarios/constant_entrypoints.tz --details
Well typed
Gas remaining: 1039546.605 units remaining
{ parameter
    (or (lambda %do
           (constant "exprvKFFbc7SnPjkPZgyhaHewQhmrouNjNae3DpsQ8KuADn9i2WuJ8")
           (list operation))
        (unit %default)) ;
  storage key_hash ;
  code { { { /* [ pair (or (lambda unit (list operation)) unit) key_hash ] */
             DUP
             /* [ or (lambda unit (list operation)) unit
                : pair (or (lambda unit (list operation)) unit) key_hash ] */ ;
             CAR
             /* [ or (lambda unit (list operation)) unit : key_hash ] */ ;
             DIP { /* [ pair (or (lambda unit (list operation)) unit) key_hash ] */ CDR } } } ;
         IF_LEFT
           { /* [ lambda unit (list operation) : key_hash ] */
             PUSH mutez 0 /* [ mutez : mutez : lambda unit (list operation) : key_hash ] */ ;
             AMOUNT ;
             { { /* [ mutez : mutez : lambda unit (list operation) : key_hash ] */
                 COMPARE
                 /* [ bool : lambda unit (list operation) : key_hash ] */ ;
                 EQ } ;
               IF {}
                  { { /* [ lambda unit (list operation) : key_hash ] */ UNIT /* [] */ ; FAILWITH } }
               /* [ lambda unit (list operation) : key_hash ] */ } ;
             { /* [ lambda unit (list operation) : key_hash ] */
               DIP { /* [ key_hash ] */ DUP /* [ key_hash : lambda unit (list operation) : key_hash ] */ } ;
               SWAP
               /* [ contract unit : lambda unit (list operation) : key_hash ] */ } ;
             IMPLICIT_ACCOUNT
             /* [ address : lambda unit (list operation) : key_hash ] */ ;
             ADDRESS
             /* [ address : address : lambda unit (list operation) : key_hash ] */ ;
             SENDER ;
             { { /* [ address : address : lambda unit (list operation) : key_hash ] */
                 COMPARE
                 /* [ bool : lambda unit (list operation) : key_hash ] */ ;
                 EQ } ;
               IF {}
                  { { /* [ lambda unit (list operation) : key_hash ] */
                      UNIT
                      /* [] */ ;
                      FAILWITH
                      /* [ unit : lambda unit (list operation) : key_hash ] */ } }
               /* [ lambda unit (list operation) : key_hash ] */ } ;
             UNIT
             /* [ list operation : key_hash ] */ ;
             EXEC
             /* [ pair (list operation) key_hash ] */ ;
             PAIR }
           { /* [ unit : key_hash ] */
             DROP
             /* [ list operation : key_hash ] */ ;
             NIL operation /* [ pair (list operation) key_hash ] */ ;
             PAIR } } }
