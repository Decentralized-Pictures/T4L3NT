
./tezos-client --wait none originate sc rollup from '[PUBLIC_KEY_HASH]' of kind arith of type string booting with  --burn-cap 9999999
Node is bootstrapped.
Estimated gas: 2909.116 units (will add 100 for safety)
Estimated storage: 6616 bytes added (will add 20 for safety)
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000654
    Expected counter: 1
    Gas limit: 3010
    Storage limit: 6636 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000654
      payload fees(the block proposer) ....... +ꜩ0.000654
    Originate smart contract rollup of kind arith and type string with boot sector ''
      This smart contract rollup origination was successfully applied
      Consumed gas: 2909.116
      Storage size: 6616 bytes
      Address: [SC_ROLLUP_HASH]
      Genesis commitment hash: [SC_ROLLUP_COMMITMENT_HASH]
      Balance updates:
        [PUBLIC_KEY_HASH] ... -ꜩ1.654
        storage fees ........................... +ꜩ1.654


./tezos-client rpc get '/chains/main/blocks/head/context/sc_rollup/[SC_ROLLUP_HASH]/genesis_info'
{ "level": 2,
  "commitment_hash": "[SC_ROLLUP_COMMITMENT_HASH]" }

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs139rUcWoTB9MbNUEaWYn5RswKF7G2uENnRPq7Q9ByQRMahtB2NA"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"0"

./tezos-client --wait none send sc rollup message '["1 6 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1651.701 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.00046
    Expected counter: 2
    Gas limit: 1752
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.00046
      payload fees(the block proposer) ....... +ꜩ0.00046
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1651.829
      Resulting inbox state: { rollup = [SC_ROLLUP_HASH]
                               level = 3
                               current messages hash  = [SC_ROLLUP_INBOX_HASH]
                               nb_messages_in_commitment_period = 1
                               starting_level_of_current_commitment_period = 2
                               message_counter = 1
                               old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                     
       content = [SC_ROLLUP_INBOX_HASH]
       index = 1
       back_pointers = [SC_ROLLUP_INBOX_HASH]
    
                               }


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\007"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs13CGfXJuhF7NnAKY7v3TBokPphzCEYPE5n14UHDnpTAMTAC7GzC"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"18"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs13CGfXJuhF7NnAKY7v3TBokPphzCEYPE5n14UHDnpTAMTAC7GzC"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"18"

./tezos-client --wait none send sc rollup message '["2 8 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1651.923 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.00046
    Expected counter: 3
    Gas limit: 1752
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.00046
      payload fees(the block proposer) ....... +ꜩ0.00046
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.051
      Resulting inbox state: { rollup = [SC_ROLLUP_HASH]
                               level = 4
                               current messages hash  = [SC_ROLLUP_INBOX_HASH]
                               nb_messages_in_commitment_period = 2
                               starting_level_of_current_commitment_period = 2
                               message_counter = 1
                               old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                     
       content = [SC_ROLLUP_INBOX_HASH]
       index = 2
       back_pointers = [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
    
                               }


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\n"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs12BVD7ers632i9FZGzaeT4Zt9jQi13guYDh7yb5HFipfVc13wku"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"35"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs12BVD7ers632i9FZGzaeT4Zt9jQi13guYDh7yb5HFipfVc13wku"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"35"

./tezos-client --wait none send sc rollup message '["3 10 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.147 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000461
    Expected counter: 4
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000461
      payload fees(the block proposer) ....... +ꜩ0.000461
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.147
      Resulting inbox state: { rollup = [SC_ROLLUP_HASH]
                               level = 5
                               current messages hash  = [SC_ROLLUP_INBOX_HASH]
                               nb_messages_in_commitment_period = 3
                               starting_level_of_current_commitment_period = 2
                               message_counter = 1
                               old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                     
       content = [SC_ROLLUP_INBOX_HASH]
       index = 3
       back_pointers = [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
    
                               }


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\r"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs12nXMLncCoT9SGzJX8CwUEG4D1myYhKGYBY6eGvtPrjwqooCovf"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"53"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs12nXMLncCoT9SGzJX8CwUEG4D1myYhKGYBY6eGvtPrjwqooCovf"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"53"

./tezos-client --wait none send sc rollup message '["4 12 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.147 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000461
    Expected counter: 5
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000461
      payload fees(the block proposer) ....... +ꜩ0.000461
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.275
      Resulting inbox state: { rollup = [SC_ROLLUP_HASH]
                               level = 6
                               current messages hash  = [SC_ROLLUP_INBOX_HASH]
                               nb_messages_in_commitment_period = 4
                               starting_level_of_current_commitment_period = 2
                               message_counter = 1
                               old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                     
       content = [SC_ROLLUP_INBOX_HASH]
       index = 4
       back_pointers = [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
    
                               }


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\016"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs11tcLMA9CwjW3K3VuAFp4RiJRujh9msGbyMSHyediDMTfchY2JY"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"71"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs11tcLMA9CwjW3K3VuAFp4RiJRujh9msGbyMSHyediDMTfchY2JY"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"71"

./tezos-client --wait none send sc rollup message '["5 14 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.354 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000461
    Expected counter: 6
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000461
      payload fees(the block proposer) ....... +ꜩ0.000461
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.354
      Resulting inbox state: { rollup = [SC_ROLLUP_HASH]
                               level = 7
                               current messages hash  = [SC_ROLLUP_INBOX_HASH]
                               nb_messages_in_commitment_period = 5
                               starting_level_of_current_commitment_period = 2
                               message_counter = 1
                               old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                     
       content = [SC_ROLLUP_INBOX_HASH]
       index = 5
       back_pointers = [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
    
                               }


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\019"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs11eYQany2zXFhZ6q62wfrHQA1CYzskBu8k5pnnWnBaAQ3ZEWBK6"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"89"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs11eYQany2zXFhZ6q62wfrHQA1CYzskBu8k5pnnWnBaAQ3ZEWBK6"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"89"

./tezos-client --wait none send sc rollup message '["6 16 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.354 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000461
    Expected counter: 7
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000461
      payload fees(the block proposer) ....... +ꜩ0.000461
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.354
      Resulting inbox state: { rollup = [SC_ROLLUP_HASH]
                               level = 8
                               current messages hash  = [SC_ROLLUP_INBOX_HASH]
                               nb_messages_in_commitment_period = 6
                               starting_level_of_current_commitment_period = 2
                               message_counter = 1
                               old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                     
       content = [SC_ROLLUP_INBOX_HASH]
       index = 6
       back_pointers = [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
    
                               }


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\022"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs11ibk6bxp8XcMmHchNkLxniEMGeuu67FYqjeFgsFaK2nSbaj6v6"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"107"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs11ibk6bxp8XcMmHchNkLxniEMGeuu67FYqjeFgsFaK2nSbaj6v6"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"107"

./tezos-client --wait none send sc rollup message '["7 18 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.354 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000461
    Expected counter: 8
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000461
      payload fees(the block proposer) ....... +ꜩ0.000461
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.354
      Resulting inbox state: { rollup = [SC_ROLLUP_HASH]
                               level = 9
                               current messages hash  = [SC_ROLLUP_INBOX_HASH]
                               nb_messages_in_commitment_period = 7
                               starting_level_of_current_commitment_period = 2
                               message_counter = 1
                               old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                     
       content = [SC_ROLLUP_INBOX_HASH]
       index = 7
       back_pointers = [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
    
                               }


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\025"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs1271ctQaBTEibVsSeGQDQwFHaHUhd8EZ1V35wT87wwNkZRKuod2"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"125"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs1271ctQaBTEibVsSeGQDQwFHaHUhd8EZ1V35wT87wwNkZRKuod2"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"125"

./tezos-client --wait none send sc rollup message '["8 20 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.354 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000461
    Expected counter: 9
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000461
      payload fees(the block proposer) ....... +ꜩ0.000461
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.482
      Resulting inbox state: { rollup = [SC_ROLLUP_HASH]
                               level = 10
                               current messages hash  = [SC_ROLLUP_INBOX_HASH]
                               nb_messages_in_commitment_period = 8
                               starting_level_of_current_commitment_period = 2
                               message_counter = 1
                               old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                     
       content = [SC_ROLLUP_INBOX_HASH]
       index = 8
       back_pointers = [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
    
                               }


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\028"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs12hefiWoaPQGYvPcuUYHhiU5FAAfpBtHcztGqTj6LqB3PxDQiyG"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"143"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs12hefiWoaPQGYvPcuUYHhiU5FAAfpBtHcztGqTj6LqB3PxDQiyG"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"143"

./tezos-client --wait none send sc rollup message '["9 22 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.561 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000461
    Expected counter: 10
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000461
      payload fees(the block proposer) ....... +ꜩ0.000461
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.561
      Resulting inbox state: { rollup = [SC_ROLLUP_HASH]
                               level = 11
                               current messages hash  = [SC_ROLLUP_INBOX_HASH]
                               nb_messages_in_commitment_period = 9
                               starting_level_of_current_commitment_period = 2
                               message_counter = 1
                               old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                     
       content = [SC_ROLLUP_INBOX_HASH]
       index = 9
       back_pointers = [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
    
                               }


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\031"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs11oq2aLp31bKWq7Tp3GccxvZHpaE41PzH7FUQNNKWpYSvUn7Fex"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"161"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs11oq2aLp31bKWq7Tp3GccxvZHpaE41PzH7FUQNNKWpYSvUn7Fex"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"161"

./tezos-client --wait none send sc rollup message '["10 24 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.578 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000462
    Expected counter: 11
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000462
      payload fees(the block proposer) ....... +ꜩ0.000462
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.578
      Resulting inbox state: { rollup = [SC_ROLLUP_HASH]
                               level = 12
                               current messages hash  = [SC_ROLLUP_INBOX_HASH]
                               nb_messages_in_commitment_period = 10
                               starting_level_of_current_commitment_period = 2
                               message_counter = 1
                               old_levels_messages = hash : [SC_ROLLUP_INBOX_HASH]
                                                     
       content = [SC_ROLLUP_INBOX_HASH]
       index = 10
       back_pointers = [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
                                                     [SC_ROLLUP_INBOX_HASH]
    
                               }


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\""

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs12z8UFkMz6jxQo5hDNhBz96Pjq31V8fSBz3kH3DPgVhpfQFe6Fk"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"180"
