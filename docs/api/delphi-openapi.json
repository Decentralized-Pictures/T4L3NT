{
  "openapi": "3.0.0",
  "info": {
    "title": "Tezos RPC",
    "description": "Tezos client RPC API.",
    "version": "7.5"
  },
  "paths": {
    "/": {
      "get": {
        "description": "All the information about a block. The associated metadata may not be present depending on the history mode and block's distance from the head.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "enum": [
                        "ProtoGenesisGenesisGenesisGenesisGenesisGenesk612im"
                      ]
                    },
                    "chain_id": {
                      "$ref": "#/components/schemas/Chain_id"
                    },
                    "hash": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "header": {
                      "$ref": "#/components/schemas/raw_block_header"
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/block_header_metadata"
                    },
                    "operations": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/operation"
                        }
                      }
                    }
                  },
                  "required": [
                    "protocol",
                    "chain_id",
                    "hash",
                    "header",
                    "operations"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/big_maps/{big_map_id}/{script_expr}": {
      "get": {
        "description": "Access the value associated with a key in a big map.",
        "parameters": [
          {
            "name": "big_map_id",
            "in": "path",
            "description": "A big map identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "script_expr",
            "in": "path",
            "description": "script_expr (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/constants": {
      "get": {
        "description": "All constants",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "proof_of_work_nonce_size": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "nonce_length": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "max_anon_ops_per_block": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "max_operation_data_length": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "max_proposals_per_delegate": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "preserved_cycles": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "blocks_per_cycle": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "blocks_per_commitment": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "blocks_per_roll_snapshot": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "blocks_per_voting_period": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "time_between_blocks": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/int64"
                      }
                    },
                    "endorsers_per_block": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "hard_gas_limit_per_operation": {
                      "$ref": "#/components/schemas/bignum"
                    },
                    "hard_gas_limit_per_block": {
                      "$ref": "#/components/schemas/bignum"
                    },
                    "proof_of_work_threshold": {
                      "$ref": "#/components/schemas/int64"
                    },
                    "tokens_per_roll": {
                      "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                    },
                    "michelson_maximum_type_size": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "seed_nonce_revelation_tip": {
                      "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                    },
                    "origination_size": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "block_security_deposit": {
                      "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                    },
                    "endorsement_security_deposit": {
                      "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                    },
                    "baking_reward_per_endorsement": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                      }
                    },
                    "endorsement_reward": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                      }
                    },
                    "cost_per_byte": {
                      "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                    },
                    "hard_storage_limit_per_operation": {
                      "$ref": "#/components/schemas/bignum"
                    },
                    "test_chain_duration": {
                      "$ref": "#/components/schemas/int64"
                    },
                    "quorum_min": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "quorum_max": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "min_proposal_quorum": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "initial_endorsers": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "delay_per_missing_endorsement": {
                      "$ref": "#/components/schemas/int64"
                    }
                  },
                  "required": [
                    "proof_of_work_nonce_size",
                    "nonce_length",
                    "max_anon_ops_per_block",
                    "max_operation_data_length",
                    "max_proposals_per_delegate",
                    "preserved_cycles",
                    "blocks_per_cycle",
                    "blocks_per_commitment",
                    "blocks_per_roll_snapshot",
                    "blocks_per_voting_period",
                    "time_between_blocks",
                    "endorsers_per_block",
                    "hard_gas_limit_per_operation",
                    "hard_gas_limit_per_block",
                    "proof_of_work_threshold",
                    "tokens_per_roll",
                    "michelson_maximum_type_size",
                    "seed_nonce_revelation_tip",
                    "origination_size",
                    "block_security_deposit",
                    "endorsement_security_deposit",
                    "baking_reward_per_endorsement",
                    "endorsement_reward",
                    "cost_per_byte",
                    "hard_storage_limit_per_operation",
                    "test_chain_duration",
                    "quorum_min",
                    "quorum_max",
                    "min_proposal_quorum",
                    "initial_endorsers",
                    "delay_per_missing_endorsement"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/constants/errors": {
      "get": {
        "description": "Schema for all the RPC errors from this protocol version",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts": {
      "get": {
        "description": "All existing contracts (including non-empty default contracts).",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}": {
      "get": {
        "description": "Access the complete status of a contract.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "balance": {
                      "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                    },
                    "delegate": {
                      "$ref": "#/components/schemas/Signature.Public_key_hash"
                    },
                    "script": {
                      "$ref": "#/components/schemas/007-PsDELPH1.scripted.contracts"
                    },
                    "counter": {
                      "$ref": "#/components/schemas/positive_bignum"
                    }
                  },
                  "required": [
                    "balance"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/balance": {
      "get": {
        "description": "Access the balance of a contract.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/big_map_get": {
      "post": {
        "description": "Access the value associated with a key in a big map of the contract (deprecated).",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  },
                  "type": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  }
                },
                "required": [
                  "key",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/counter": {
      "get": {
        "description": "Access the counter of a contract, if any.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bignum"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/delegate": {
      "get": {
        "description": "Access the delegate of a contract, if any.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signature.Public_key_hash"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/entrypoints": {
      "get": {
        "description": "Return the list of entrypoints of the contract",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unreachable": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/007-PsDELPH1.michelson.v1.primitives"
                            }
                          }
                        },
                        "required": [
                          "path"
                        ]
                      }
                    },
                    "entrypoints": {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": {
                        "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                      }
                    }
                  },
                  "required": [
                    "entrypoints"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/entrypoints/{string}": {
      "get": {
        "description": "Return the type of the given entrypoint of the contract",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "string",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/manager_key": {
      "get": {
        "description": "Access the manager of a contract.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/Signature.Public_key"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/script": {
      "get": {
        "description": "Access the code and data of the contract.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/007-PsDELPH1.scripted.contracts"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/contracts/{contract_id}/storage": {
      "get": {
        "description": "Access the data of the contract.",
        "parameters": [
          {
            "name": "contract_id",
            "in": "path",
            "description": "A contract identifier encoded in b58check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates": {
      "get": {
        "description": "Lists all registered delegates.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Signature.Public_key_hash"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}": {
      "get": {
        "description": "Everything about a delegate.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "balance": {
                      "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                    },
                    "frozen_balance": {
                      "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                    },
                    "frozen_balance_by_cycle": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cycle": {
                            "type": "integer",
                            "minimum": -2147483648,
                            "maximum": 2147483647
                          },
                          "deposit": {
                            "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                          },
                          "fees": {
                            "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                          },
                          "rewards": {
                            "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                          }
                        },
                        "required": [
                          "cycle",
                          "deposit",
                          "fees",
                          "rewards"
                        ]
                      }
                    },
                    "staking_balance": {
                      "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                    },
                    "delegated_contracts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
                      }
                    },
                    "delegated_balance": {
                      "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                    },
                    "deactivated": {
                      "type": "boolean"
                    },
                    "grace_period": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    }
                  },
                  "required": [
                    "balance",
                    "frozen_balance",
                    "frozen_balance_by_cycle",
                    "staking_balance",
                    "delegated_contracts",
                    "delegated_balance",
                    "deactivated",
                    "grace_period"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/balance": {
      "get": {
        "description": "Returns the full balance of a given delegate, including the frozen balances.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/deactivated": {
      "get": {
        "description": "Tells whether the delegate is currently tagged as deactivated or not.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/delegated_balance": {
      "get": {
        "description": "Returns the balances of all the contracts that delegate to a given delegate. This excludes the delegate's own balance and its frozen balances.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/delegated_contracts": {
      "get": {
        "description": "Returns the list of contracts that delegate to a given delegate.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/frozen_balance": {
      "get": {
        "description": "Returns the total frozen balances of a given delegate, this includes the frozen deposits, rewards and fees.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/frozen_balance_by_cycle": {
      "get": {
        "description": "Returns the frozen balances of a given delegate, indexed by the cycle by which it will be unfrozen",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "cycle": {
                        "type": "integer",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                      },
                      "deposit": {
                        "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                      },
                      "fees": {
                        "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                      },
                      "rewards": {
                        "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                      }
                    },
                    "required": [
                      "cycle",
                      "deposit",
                      "fees",
                      "rewards"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/grace_period": {
      "get": {
        "description": "Returns the cycle by the end of which the delegate might be deactivated if she fails to execute any delegate action. A deactivated delegate might be reactivated (without loosing any rolls) by simply re-registering as a delegate. For deactivated delegates, this value contains the cycle by which they were deactivated.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "minimum": -2147483648,
                  "maximum": 2147483647
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/delegates/{pkh}/staking_balance": {
      "get": {
        "description": "Returns the total amount of tokens delegated to a given delegate. This includes the balances of all the contracts that delegate to it, but also the balance of the delegate itself and its frozen fees and deposits. The rewards do not count in the delegated balance until they are unfrozen.",
        "parameters": [
          {
            "name": "pkh",
            "in": "path",
            "description": "A Secp256k1 of a Ed25519 public key hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/nonces/{block_level}": {
      "get": {
        "description": "Info about the nonce of a previous block.",
        "parameters": [
          {
            "name": "block_level",
            "in": "path",
            "description": "A level integer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Revealed",
                      "type": "object",
                      "properties": {
                        "nonce": {
                          "type": "string",
                          "pattern": "^[a-zA-Z0-9]+$"
                        }
                      },
                      "required": [
                        "nonce"
                      ]
                    },
                    {
                      "title": "Missing",
                      "type": "object",
                      "properties": {
                        "hash": {
                          "$ref": "#/components/schemas/cycle_nonce"
                        }
                      },
                      "required": [
                        "hash"
                      ]
                    },
                    {
                      "title": "Forgotten",
                      "type": "object",
                      "properties": {}
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/raw/bytes": {
      "get": {
        "description": "Returns the raw context.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/raw_context"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/context/seed": {
      "post": {
        "description": "Seed of the cycle to which the block belongs.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9]+$"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/endorsing_power": {
      "post": {
        "description": "Get the endorsing power of an endorsement, that is, the number of slots that the endorser has",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "endorsement_operation": {
                    "type": "object",
                    "properties": {
                      "branch": {
                        "$ref": "#/components/schemas/block_hash"
                      },
                      "contents": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.contents"
                        }
                      },
                      "signature": {
                        "$ref": "#/components/schemas/Signature"
                      }
                    },
                    "required": [
                      "branch",
                      "contents",
                      "signature"
                    ]
                  },
                  "chain_id": {
                    "$ref": "#/components/schemas/Chain_id"
                  }
                },
                "required": [
                  "endorsement_operation",
                  "chain_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "minimum": -1073741824,
                  "maximum": 1073741823
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/hash": {
      "get": {
        "description": "The block's hash, its unique identifier.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_hash"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/header": {
      "get": {
        "description": "The whole block header.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_header"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/header/protocol_data": {
      "get": {
        "description": "The version-specific fragment of the block header.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "protocol": {
                      "type": "string",
                      "enum": [
                        "ProtoGenesisGenesisGenesisGenesisGenesisGenesk612im"
                      ]
                    },
                    "content": {
                      "oneOf": [
                        {
                          "title": "Activate",
                          "type": "object",
                          "properties": {
                            "command": {
                              "type": "string",
                              "enum": [
                                "activate"
                              ]
                            },
                            "hash": {
                              "$ref": "#/components/schemas/Protocol_hash"
                            },
                            "fitness": {
                              "$ref": "#/components/schemas/fitness"
                            },
                            "protocol_parameters": {
                              "type": "string",
                              "pattern": "^[a-zA-Z0-9]+$"
                            }
                          },
                          "required": [
                            "command",
                            "hash",
                            "fitness",
                            "protocol_parameters"
                          ]
                        },
                        {
                          "title": "Activate_testchain",
                          "type": "object",
                          "properties": {
                            "command": {
                              "type": "string",
                              "enum": [
                                "activate_testchain"
                              ]
                            },
                            "hash": {
                              "$ref": "#/components/schemas/Protocol_hash"
                            },
                            "fitness": {
                              "$ref": "#/components/schemas/fitness"
                            },
                            "protocol_parameters": {
                              "type": "string",
                              "pattern": "^[a-zA-Z0-9]+$"
                            },
                            "validity_time": {
                              "$ref": "#/components/schemas/int64"
                            }
                          },
                          "required": [
                            "command",
                            "hash",
                            "fitness",
                            "protocol_parameters",
                            "validity_time"
                          ]
                        }
                      ]
                    },
                    "signature": {
                      "$ref": "#/components/schemas/Signature"
                    }
                  },
                  "required": [
                    "protocol",
                    "content",
                    "signature"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/header/protocol_data/raw": {
      "get": {
        "description": "The version-specific fragment of the block header (unparsed).",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9]+$"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/header/raw": {
      "get": {
        "description": "The whole block header (unparsed).",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9]+$"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/header/shell": {
      "get": {
        "description": "The shell-specific fragment of the block header.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_header.shell"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/baking_rights": {
      "get": {
        "description": "Retrieves the list of delegates allowed to bake a block.\nBy default, it gives the best baking priorities for bakers that have at least one opportunity below the 64th priority for the next block.\nParameters `level` and `cycle` can be used to specify the (valid) level(s) in the past or future at which the baking rights have to be returned. Parameter `delegate` can be used to restrict the results to the given delegates. If parameter `all` is set, all the baking opportunities for each baker at each level are returned, instead of just the first one.\nReturns the list of baking slots. Also returns the minimal timestamps that correspond to these slots. The timestamps are omitted for levels in the past, and are only estimates for levels later that the next block, based on the hypothesis that all predecessor blocks were baked at the first priority.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "level": {
                        "type": "integer",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                      },
                      "delegate": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      },
                      "priority": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 65535
                      },
                      "estimated_time": {
                        "$ref": "#/components/schemas/timestamp.protocol"
                      }
                    },
                    "required": [
                      "level",
                      "delegate",
                      "priority"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/complete/{prefix}": {
      "get": {
        "description": "Try to complete a prefix of a Base58Check-encoded data. This RPC is actually able to complete hashes of block, operations, public_keys and contracts.",
        "parameters": [
          {
            "name": "prefix",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/unistring"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/current_level": {
      "get": {
        "description": "Returns the level of the interrogated block, or the one of a block located `offset` blocks after in the chain (or before when negative). For instance, the next block if `offset` is 1.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "level": {
                      "description": "The level of the block relative to genesis. This is also the Shell's notion of level",
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "level_position": {
                      "description": "The level of the block relative to the block that starts protocol alpha. This is specific to the protocol alpha. Other protocols might or might not include a similar notion.",
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "cycle": {
                      "description": "The current cycle's number. Note that cycles are a protocol-specific notion. As a result, the cycle number starts at 0 with the first block of protocol alpha.",
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "cycle_position": {
                      "description": "The current level of the block relative to the first block of the current cycle.",
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "voting_period": {
                      "description": "The current voting period's index. Note that cycles are a protocol-specific notion. As a result, the voting period index starts at 0 with the first block of protocol alpha.",
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "voting_period_position": {
                      "description": "The current level of the block relative to the first block of the current voting period.",
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "expected_commitment": {
                      "description": "Tells wether the baker of this block has to commit a seed nonce hash.",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "level",
                    "level_position",
                    "cycle",
                    "cycle_position",
                    "voting_period",
                    "voting_period_position",
                    "expected_commitment"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/endorsing_rights": {
      "get": {
        "description": "Retrieves the delegates allowed to endorse a block.\nBy default, it gives the endorsement slots for delegates that have at least one in the next block.\nParameters `level` and `cycle` can be used to specify the (valid) level(s) in the past or future at which the endorsement rights have to be returned. Parameter `delegate` can be used to restrict the results to the given delegates.\nReturns the list of endorsement slots. Also returns the minimal timestamps that correspond to these slots. The timestamps are omitted for levels in the past, and are only estimates for levels later that the next block, based on the hypothesis that all predecessor blocks were baked at the first priority.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "level": {
                        "type": "integer",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                      },
                      "delegate": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      },
                      "slots": {
                        "type": "array",
                        "items": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 65535
                        }
                      },
                      "estimated_time": {
                        "$ref": "#/components/schemas/timestamp.protocol"
                      }
                    },
                    "required": [
                      "level",
                      "delegate",
                      "slots"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/forge/operations": {
      "post": {
        "description": "Forge an operation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.unsigned_operation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9]+$"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/forge/protocol_data": {
      "post": {
        "description": "Forge the protocol-specific part of a block header",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "priority": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 65535
                  },
                  "nonce_hash": {
                    "$ref": "#/components/schemas/cycle_nonce"
                  },
                  "proof_of_work_nonce": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9]+$"
                  }
                },
                "required": [
                  "priority"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "protocol_data": {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9]+$"
                    }
                  },
                  "required": [
                    "protocol_data"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/forge_block_header": {
      "post": {
        "description": "Forge a block header",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/block_header"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "block": {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9]+$"
                    }
                  },
                  "required": [
                    "block"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/levels_in_current_cycle": {
      "get": {
        "description": "Levels of a cycle",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "first": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "last": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    }
                  },
                  "required": [
                    "first",
                    "last"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/parse/block": {
      "post": {
        "description": "Parse a block",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/block_header"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/007-PsDELPH1.block_header.alpha.signed_contents"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/parse/operations": {
      "post": {
        "description": "Parse operations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "operations": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/operation"
                    }
                  },
                  "check_signature": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "operations"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "branch": {
                        "$ref": "#/components/schemas/block_hash"
                      },
                      "contents": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.contents"
                        }
                      },
                      "signature": {
                        "$ref": "#/components/schemas/Signature"
                      }
                    },
                    "required": [
                      "branch",
                      "contents",
                      "signature"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/preapply/block": {
      "post": {
        "description": "Simulate the validation of a block that would contain the given operations and return the resulting fitness and context hash.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "protocol_data": {
                    "type": "object",
                    "properties": {
                      "protocol": {
                        "type": "string",
                        "enum": [
                          "PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo"
                        ]
                      },
                      "priority": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 65535
                      },
                      "proof_of_work_nonce": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9]+$"
                      },
                      "seed_nonce_hash": {
                        "$ref": "#/components/schemas/cycle_nonce"
                      },
                      "signature": {
                        "$ref": "#/components/schemas/Signature"
                      }
                    },
                    "required": [
                      "protocol",
                      "priority",
                      "proof_of_work_nonce",
                      "signature"
                    ]
                  },
                  "operations": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/next_operation"
                      }
                    }
                  }
                },
                "required": [
                  "protocol_data",
                  "operations"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "shell_header": {
                      "$ref": "#/components/schemas/block_header.shell"
                    },
                    "operations": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "applied": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "$ref": "#/components/schemas/Operation_hash"
                                },
                                "branch": {
                                  "$ref": "#/components/schemas/block_hash"
                                },
                                "data": {
                                  "type": "string",
                                  "pattern": "^[a-zA-Z0-9]+$"
                                }
                              },
                              "required": [
                                "hash",
                                "branch",
                                "data"
                              ]
                            }
                          },
                          "refused": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "$ref": "#/components/schemas/Operation_hash"
                                },
                                "branch": {
                                  "$ref": "#/components/schemas/block_hash"
                                },
                                "data": {
                                  "type": "string",
                                  "pattern": "^[a-zA-Z0-9]+$"
                                },
                                "error": {
                                  "$ref": "#/components/schemas/error"
                                }
                              },
                              "required": [
                                "hash",
                                "branch",
                                "data",
                                "error"
                              ]
                            }
                          },
                          "branch_refused": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "$ref": "#/components/schemas/Operation_hash"
                                },
                                "branch": {
                                  "$ref": "#/components/schemas/block_hash"
                                },
                                "data": {
                                  "type": "string",
                                  "pattern": "^[a-zA-Z0-9]+$"
                                },
                                "error": {
                                  "$ref": "#/components/schemas/error"
                                }
                              },
                              "required": [
                                "hash",
                                "branch",
                                "data",
                                "error"
                              ]
                            }
                          },
                          "branch_delayed": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "$ref": "#/components/schemas/Operation_hash"
                                },
                                "branch": {
                                  "$ref": "#/components/schemas/block_hash"
                                },
                                "data": {
                                  "type": "string",
                                  "pattern": "^[a-zA-Z0-9]+$"
                                },
                                "error": {
                                  "$ref": "#/components/schemas/error"
                                }
                              },
                              "required": [
                                "hash",
                                "branch",
                                "data",
                                "error"
                              ]
                            }
                          }
                        },
                        "required": [
                          "applied",
                          "refused",
                          "branch_refused",
                          "branch_delayed"
                        ]
                      }
                    }
                  },
                  "required": [
                    "shell_header",
                    "operations"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/preapply/operations": {
      "post": {
        "description": "Simulate the validation of an operation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/next_operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.operation_with_metadata"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/entrypoint": {
      "post": {
        "description": "Return the type of the given entrypoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "script": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  },
                  "entrypoint": {
                    "$ref": "#/components/schemas/unistring"
                  }
                },
                "required": [
                  "script"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "entrypoint_type": {
                      "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                    }
                  },
                  "required": [
                    "entrypoint_type"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/entrypoints": {
      "post": {
        "description": "Return the list of entrypoints of the given script",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "script": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  }
                },
                "required": [
                  "script"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "unreachable": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/007-PsDELPH1.michelson.v1.primitives"
                            }
                          }
                        },
                        "required": [
                          "path"
                        ]
                      }
                    },
                    "entrypoints": {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": {
                        "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                      }
                    }
                  },
                  "required": [
                    "entrypoints"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/pack_data": {
      "post": {
        "description": "Computes the serialized version of some data expression using the same algorithm as script instruction PACK",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  },
                  "type": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  },
                  "gas": {
                    "$ref": "#/components/schemas/bignum"
                  }
                },
                "required": [
                  "data",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "packed": {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9]+$"
                    },
                    "gas": {
                      "oneOf": [
                        {
                          "title": "Limited",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/bignum"
                            }
                          ]
                        },
                        {
                          "title": "Unaccounted",
                          "type": "string",
                          "enum": [
                            "unaccounted"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "packed",
                    "gas"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/run_code": {
      "post": {
        "description": "Run a piece of code in the current context",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "script": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  },
                  "storage": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  },
                  "input": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                  },
                  "chain_id": {
                    "$ref": "#/components/schemas/Chain_id"
                  },
                  "source": {
                    "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
                  },
                  "payer": {
                    "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
                  },
                  "gas": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "entrypoint": {
                    "$ref": "#/components/schemas/unistring"
                  }
                },
                "required": [
                  "script",
                  "storage",
                  "input",
                  "amount",
                  "chain_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "storage": {
                      "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                    },
                    "operations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.internal_operation"
                      }
                    },
                    "big_map_diff": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "title": "update",
                            "type": "object",
                            "properties": {
                              "action": {
                                "type": "string",
                                "enum": [
                                  "update"
                                ]
                              },
                              "big_map": {
                                "$ref": "#/components/schemas/bignum"
                              },
                              "key_hash": {
                                "$ref": "#/components/schemas/script_expr"
                              },
                              "key": {
                                "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                              },
                              "value": {
                                "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                              }
                            },
                            "required": [
                              "action",
                              "big_map",
                              "key_hash",
                              "key"
                            ]
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "properties": {
                              "action": {
                                "type": "string",
                                "enum": [
                                  "remove"
                                ]
                              },
                              "big_map": {
                                "$ref": "#/components/schemas/bignum"
                              }
                            },
                            "required": [
                              "action",
                              "big_map"
                            ]
                          },
                          {
                            "title": "copy",
                            "type": "object",
                            "properties": {
                              "action": {
                                "type": "string",
                                "enum": [
                                  "copy"
                                ]
                              },
                              "source_big_map": {
                                "$ref": "#/components/schemas/bignum"
                              },
                              "destination_big_map": {
                                "$ref": "#/components/schemas/bignum"
                              }
                            },
                            "required": [
                              "action",
                              "source_big_map",
                              "destination_big_map"
                            ]
                          },
                          {
                            "title": "alloc",
                            "type": "object",
                            "properties": {
                              "action": {
                                "type": "string",
                                "enum": [
                                  "alloc"
                                ]
                              },
                              "big_map": {
                                "$ref": "#/components/schemas/bignum"
                              },
                              "key_type": {
                                "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                              },
                              "value_type": {
                                "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                              }
                            },
                            "required": [
                              "action",
                              "big_map",
                              "key_type",
                              "value_type"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "storage",
                    "operations"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/run_operation": {
      "post": {
        "description": "Run an operation without signature checks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "operation": {
                    "type": "object",
                    "properties": {
                      "branch": {
                        "$ref": "#/components/schemas/block_hash"
                      },
                      "contents": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.contents"
                        }
                      },
                      "signature": {
                        "$ref": "#/components/schemas/Signature"
                      }
                    },
                    "required": [
                      "branch",
                      "contents",
                      "signature"
                    ]
                  },
                  "chain_id": {
                    "$ref": "#/components/schemas/Chain_id"
                  }
                },
                "required": [
                  "operation",
                  "chain_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.operation_with_metadata"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/trace_code": {
      "post": {
        "description": "Run a piece of code in the current context, keeping a trace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "script": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  },
                  "storage": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  },
                  "input": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/007-PsDELPH1.mutez"
                  },
                  "chain_id": {
                    "$ref": "#/components/schemas/Chain_id"
                  },
                  "source": {
                    "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
                  },
                  "payer": {
                    "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
                  },
                  "gas": {
                    "$ref": "#/components/schemas/bignum"
                  },
                  "entrypoint": {
                    "$ref": "#/components/schemas/unistring"
                  }
                },
                "required": [
                  "script",
                  "storage",
                  "input",
                  "amount",
                  "chain_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "storage": {
                      "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                    },
                    "operations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.internal_operation"
                      }
                    },
                    "trace": {
                      "$ref": "#/components/schemas/007-PsDELPH1.scripted.trace"
                    },
                    "big_map_diff": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "title": "update",
                            "type": "object",
                            "properties": {
                              "action": {
                                "type": "string",
                                "enum": [
                                  "update"
                                ]
                              },
                              "big_map": {
                                "$ref": "#/components/schemas/bignum"
                              },
                              "key_hash": {
                                "$ref": "#/components/schemas/script_expr"
                              },
                              "key": {
                                "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                              },
                              "value": {
                                "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                              }
                            },
                            "required": [
                              "action",
                              "big_map",
                              "key_hash",
                              "key"
                            ]
                          },
                          {
                            "title": "remove",
                            "type": "object",
                            "properties": {
                              "action": {
                                "type": "string",
                                "enum": [
                                  "remove"
                                ]
                              },
                              "big_map": {
                                "$ref": "#/components/schemas/bignum"
                              }
                            },
                            "required": [
                              "action",
                              "big_map"
                            ]
                          },
                          {
                            "title": "copy",
                            "type": "object",
                            "properties": {
                              "action": {
                                "type": "string",
                                "enum": [
                                  "copy"
                                ]
                              },
                              "source_big_map": {
                                "$ref": "#/components/schemas/bignum"
                              },
                              "destination_big_map": {
                                "$ref": "#/components/schemas/bignum"
                              }
                            },
                            "required": [
                              "action",
                              "source_big_map",
                              "destination_big_map"
                            ]
                          },
                          {
                            "title": "alloc",
                            "type": "object",
                            "properties": {
                              "action": {
                                "type": "string",
                                "enum": [
                                  "alloc"
                                ]
                              },
                              "big_map": {
                                "$ref": "#/components/schemas/bignum"
                              },
                              "key_type": {
                                "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                              },
                              "value_type": {
                                "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                              }
                            },
                            "required": [
                              "action",
                              "big_map",
                              "key_type",
                              "value_type"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "storage",
                    "operations",
                    "trace"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/typecheck_code": {
      "post": {
        "description": "Typecheck a piece of code in the current context",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "program": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  },
                  "gas": {
                    "$ref": "#/components/schemas/bignum"
                  }
                },
                "required": [
                  "program"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type_map": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "location": {
                            "$ref": "#/components/schemas/micheline.location"
                          },
                          "stack_before": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                                  },
                                  {
                                    "type": "array",
                                    "items": {
                                      "$ref": "#/components/schemas/unistring"
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          "stack_after": {
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                                  },
                                  {
                                    "type": "array",
                                    "items": {
                                      "$ref": "#/components/schemas/unistring"
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "required": [
                          "location",
                          "stack_before",
                          "stack_after"
                        ]
                      }
                    },
                    "gas": {
                      "oneOf": [
                        {
                          "title": "Limited",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/bignum"
                            }
                          ]
                        },
                        {
                          "title": "Unaccounted",
                          "type": "string",
                          "enum": [
                            "unaccounted"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "type_map",
                    "gas"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/helpers/scripts/typecheck_data": {
      "post": {
        "description": "Check that some data expression is well formed and of a given type in the current context",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  },
                  "type": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  },
                  "gas": {
                    "$ref": "#/components/schemas/bignum"
                  }
                },
                "required": [
                  "data",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "gas": {
                      "oneOf": [
                        {
                          "title": "Limited",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/bignum"
                            }
                          ]
                        },
                        {
                          "title": "Unaccounted",
                          "type": "string",
                          "enum": [
                            "unaccounted"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "gas"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/live_blocks": {
      "get": {
        "description": "List the ancestors of the given block which, if referred to as the branch in an operation header, are recent enough for that operation to be included in the current block.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/block_hash"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/metadata": {
      "get": {
        "description": "All the metadata associated to the block.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_header_metadata"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/minimal_valid_time": {
      "get": {
        "description": "Minimal valid time for a block given a priority and an endorsing power.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/timestamp.protocol"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/operation_hashes": {
      "get": {
        "description": "The hashes of all the operations included in the block.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Operation_hash"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/operation_hashes/{list_offset}": {
      "get": {
        "description": "All the operations included in `n-th` validation pass of the block.",
        "parameters": [
          {
            "name": "list_offset",
            "in": "path",
            "description": "Index `n` of the requested validation pass.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Operation_hash"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/operation_hashes/{list_offset}/{operation_offset}": {
      "get": {
        "description": "The hash of then `m-th` operation in the `n-th` validation pass of the block.",
        "parameters": [
          {
            "name": "list_offset",
            "in": "path",
            "description": "Index `n` of the requested validation pass.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operation_offset",
            "in": "path",
            "description": "Index `m` of the requested operation in its validation pass.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Operation_hash"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/operations": {
      "get": {
        "description": "All the operations included in the block.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/operation"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/operations/{list_offset}": {
      "get": {
        "description": "All the operations included in `n-th` validation pass of the block.",
        "parameters": [
          {
            "name": "list_offset",
            "in": "path",
            "description": "Index `n` of the requested validation pass.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/operation"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/operations/{list_offset}/{operation_offset}": {
      "get": {
        "description": "The `m-th` operation in the `n-th` validation pass of the block.",
        "parameters": [
          {
            "name": "list_offset",
            "in": "path",
            "description": "Index `n` of the requested validation pass.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operation_offset",
            "in": "path",
            "description": "Index `m` of the requested operation in its validation pass.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/operation"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/protocols": {
      "get": {
        "description": "Current and next protocol.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "protocol": {
                      "$ref": "#/components/schemas/Protocol_hash"
                    },
                    "next_protocol": {
                      "$ref": "#/components/schemas/Protocol_hash"
                    }
                  },
                  "required": [
                    "protocol",
                    "next_protocol"
                  ],
                  "additionalProperties": {}
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/required_endorsements": {
      "get": {
        "description": "Minimum number of endorsements for a block to be valid, given a delay of the block's timestamp with respect to the minimum time to bake at the block's priority",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "minimum": -1073741824,
                  "maximum": 1073741823
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/votes/ballot_list": {
      "get": {
        "description": "Ballots casted so far during a voting period.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "pkh": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      },
                      "ballot": {
                        "type": "string",
                        "enum": [
                          "nay",
                          "yay",
                          "pass"
                        ]
                      }
                    },
                    "required": [
                      "pkh",
                      "ballot"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/votes/ballots": {
      "get": {
        "description": "Sum of ballots casted so far during a voting period.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "yay": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "nay": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "pass": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    }
                  },
                  "required": [
                    "yay",
                    "nay",
                    "pass"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/votes/current_period_kind": {
      "get": {
        "description": "Current period kind.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Proposal",
                      "type": "string",
                      "enum": [
                        "proposal"
                      ]
                    },
                    {
                      "title": "Testing_vote",
                      "type": "string",
                      "enum": [
                        "testing_vote"
                      ]
                    },
                    {
                      "title": "Testing",
                      "type": "string",
                      "enum": [
                        "testing"
                      ]
                    },
                    {
                      "title": "Promotion_vote",
                      "type": "string",
                      "enum": [
                        "promotion_vote"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/votes/current_proposal": {
      "get": {
        "description": "Current proposal under evaluation.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "nullable": true,
                  "oneOf": [
                    {
                      "title": "Some",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/Protocol_hash"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/votes/current_quorum": {
      "get": {
        "description": "Current expected quorum.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "minimum": -2147483648,
                  "maximum": 2147483647
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/votes/listings": {
      "get": {
        "description": "List of delegates with their voting weight, in number of rolls.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "pkh": {
                        "$ref": "#/components/schemas/Signature.Public_key_hash"
                      },
                      "rolls": {
                        "type": "integer",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                      }
                    },
                    "required": [
                      "pkh",
                      "rolls"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/votes/proposals": {
      "get": {
        "description": "List of proposals with number of supporters.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/Protocol_hash"
                        },
                        {
                          "type": "integer",
                          "minimum": -2147483648,
                          "maximum": 2147483647
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "007-PsDELPH1.block_header.alpha.full_header": {
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "minimum": -2147483648,
            "maximum": 2147483647
          },
          "proto": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "predecessor": {
            "$ref": "#/components/schemas/block_hash"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp.protocol"
          },
          "validation_pass": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "operations_hash": {
            "$ref": "#/components/schemas/Operation_list_list_hash"
          },
          "fitness": {
            "$ref": "#/components/schemas/fitness"
          },
          "context": {
            "$ref": "#/components/schemas/Context_hash"
          },
          "priority": {
            "type": "integer",
            "minimum": 0,
            "maximum": 65535
          },
          "proof_of_work_nonce": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]+$"
          },
          "seed_nonce_hash": {
            "$ref": "#/components/schemas/cycle_nonce"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        "required": [
          "level",
          "proto",
          "predecessor",
          "timestamp",
          "validation_pass",
          "operations_hash",
          "fitness",
          "context",
          "priority",
          "proof_of_work_nonce",
          "signature"
        ]
      },
      "007-PsDELPH1.block_header.alpha.signed_contents": {
        "type": "object",
        "properties": {
          "priority": {
            "type": "integer",
            "minimum": 0,
            "maximum": 65535
          },
          "proof_of_work_nonce": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]+$"
          },
          "seed_nonce_hash": {
            "$ref": "#/components/schemas/cycle_nonce"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        "required": [
          "priority",
          "proof_of_work_nonce",
          "signature"
        ]
      },
      "007-PsDELPH1.contract_id": {
        "title": "A contract handle",
        "description": "A contract notation as given to an RPC or inside scripts. Can be a base58 implicit contract hash or a base58 originated contract hash.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "007-PsDELPH1.entrypoint": {
        "title": "entrypoint",
        "description": "Named entrypoint to a Michelson smart contract",
        "oneOf": [
          {
            "title": "default",
            "type": "string",
            "enum": [
              "default"
            ]
          },
          {
            "title": "root",
            "type": "string",
            "enum": [
              "root"
            ]
          },
          {
            "title": "do",
            "type": "string",
            "enum": [
              "do"
            ]
          },
          {
            "title": "set_delegate",
            "type": "string",
            "enum": [
              "set_delegate"
            ]
          },
          {
            "title": "remove_delegate",
            "type": "string",
            "enum": [
              "remove_delegate"
            ]
          },
          {
            "title": "named",
            "type": "string"
          }
        ]
      },
      "007-PsDELPH1.error": {
        "description": "The full list of RPC errors would be too long to include.\nIt is available at RPC `/errors` (GET).\nErrors specific to protocol Alpha have an id that starts with `proto.alpha`."
      },
      "007-PsDELPH1.inlined.endorsement": {
        "type": "object",
        "properties": {
          "branch": {
            "$ref": "#/components/schemas/block_hash"
          },
          "operations": {
            "$ref": "#/components/schemas/007-PsDELPH1.inlined.endorsement.contents"
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        "required": [
          "branch",
          "operations"
        ]
      },
      "007-PsDELPH1.inlined.endorsement.contents": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "endorsement"
            ]
          },
          "level": {
            "type": "integer",
            "minimum": -2147483648,
            "maximum": 2147483647
          }
        },
        "required": [
          "kind",
          "level"
        ]
      },
      "007-PsDELPH1.michelson.v1.primitives": {
        "type": "string",
        "enum": [
          "ADD",
          "IF_NONE",
          "SWAP",
          "set",
          "nat",
          "CHECK_SIGNATURE",
          "IF_LEFT",
          "LAMBDA",
          "Elt",
          "CREATE_CONTRACT",
          "NEG",
          "big_map",
          "map",
          "or",
          "BLAKE2B",
          "bytes",
          "SHA256",
          "SET_DELEGATE",
          "CONTRACT",
          "LSL",
          "SUB",
          "IMPLICIT_ACCOUNT",
          "PACK",
          "list",
          "PAIR",
          "Right",
          "contract",
          "GT",
          "LEFT",
          "STEPS_TO_QUOTA",
          "storage",
          "TRANSFER_TOKENS",
          "CDR",
          "SLICE",
          "PUSH",
          "False",
          "SHA512",
          "CHAIN_ID",
          "BALANCE",
          "signature",
          "DUG",
          "SELF",
          "EMPTY_BIG_MAP",
          "LSR",
          "OR",
          "XOR",
          "lambda",
          "COMPARE",
          "key",
          "option",
          "Unit",
          "Some",
          "UNPACK",
          "NEQ",
          "INT",
          "pair",
          "AMOUNT",
          "DIP",
          "ABS",
          "ISNAT",
          "EXEC",
          "NOW",
          "LOOP",
          "chain_id",
          "string",
          "MEM",
          "MAP",
          "None",
          "address",
          "CONCAT",
          "EMPTY_SET",
          "MUL",
          "LOOP_LEFT",
          "timestamp",
          "LT",
          "UPDATE",
          "DUP",
          "SOURCE",
          "mutez",
          "SENDER",
          "IF_CONS",
          "RIGHT",
          "CAR",
          "CONS",
          "LE",
          "NONE",
          "IF",
          "SOME",
          "GET",
          "Left",
          "CAST",
          "int",
          "SIZE",
          "key_hash",
          "unit",
          "DROP",
          "EMPTY_MAP",
          "NIL",
          "DIG",
          "APPLY",
          "bool",
          "RENAME",
          "operation",
          "True",
          "FAILWITH",
          "parameter",
          "HASH_KEY",
          "EQ",
          "NOT",
          "UNIT",
          "Pair",
          "ADDRESS",
          "EDIV",
          "CREATE_ACCOUNT",
          "GE",
          "ITER",
          "code",
          "AND"
        ]
      },
      "007-PsDELPH1.mutez": {
        "$ref": "#/components/schemas/positive_bignum"
      },
      "007-PsDELPH1.operation.alpha.contents": {
        "oneOf": [
          {
            "title": "Endorsement",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "endorsement"
                ]
              },
              "level": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              }
            },
            "required": [
              "kind",
              "level"
            ]
          },
          {
            "title": "Seed_nonce_revelation",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "seed_nonce_revelation"
                ]
              },
              "level": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "nonce": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9]+$"
              }
            },
            "required": [
              "kind",
              "level",
              "nonce"
            ]
          },
          {
            "title": "Double_endorsement_evidence",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "double_endorsement_evidence"
                ]
              },
              "op1": {
                "$ref": "#/components/schemas/007-PsDELPH1.inlined.endorsement"
              },
              "op2": {
                "$ref": "#/components/schemas/007-PsDELPH1.inlined.endorsement"
              }
            },
            "required": [
              "kind",
              "op1",
              "op2"
            ]
          },
          {
            "title": "Double_baking_evidence",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "double_baking_evidence"
                ]
              },
              "bh1": {
                "$ref": "#/components/schemas/007-PsDELPH1.block_header.alpha.full_header"
              },
              "bh2": {
                "$ref": "#/components/schemas/007-PsDELPH1.block_header.alpha.full_header"
              }
            },
            "required": [
              "kind",
              "bh1",
              "bh2"
            ]
          },
          {
            "title": "Activate_account",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "activate_account"
                ]
              },
              "pkh": {
                "$ref": "#/components/schemas/Ed25519.Public_key_hash"
              },
              "secret": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9]+$"
              }
            },
            "required": [
              "kind",
              "pkh",
              "secret"
            ]
          },
          {
            "title": "Proposals",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "proposals"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "period": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "proposals": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Protocol_hash"
                }
              }
            },
            "required": [
              "kind",
              "source",
              "period",
              "proposals"
            ]
          },
          {
            "title": "Ballot",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "ballot"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "period": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "proposal": {
                "$ref": "#/components/schemas/Protocol_hash"
              },
              "ballot": {
                "type": "string",
                "enum": [
                  "nay",
                  "yay",
                  "pass"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "period",
              "proposal",
              "ballot"
            ]
          },
          {
            "title": "Reveal",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "reveal"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/007-PsDELPH1.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "public_key": {
                "$ref": "#/components/schemas/Signature.Public_key"
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "public_key"
            ]
          },
          {
            "title": "Transaction",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "transaction"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/007-PsDELPH1.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "amount": {
                "$ref": "#/components/schemas/007-PsDELPH1.mutez"
              },
              "destination": {
                "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
              },
              "parameters": {
                "type": "object",
                "properties": {
                  "entrypoint": {
                    "$ref": "#/components/schemas/007-PsDELPH1.entrypoint"
                  },
                  "value": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  }
                },
                "required": [
                  "entrypoint",
                  "value"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "amount",
              "destination"
            ]
          },
          {
            "title": "Origination",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "origination"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/007-PsDELPH1.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "balance": {
                "$ref": "#/components/schemas/007-PsDELPH1.mutez"
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "script": {
                "$ref": "#/components/schemas/007-PsDELPH1.scripted.contracts"
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "balance",
              "script"
            ]
          },
          {
            "title": "Delegation",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "delegation"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/007-PsDELPH1.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit"
            ]
          }
        ]
      },
      "007-PsDELPH1.operation.alpha.internal_operation": {
        "oneOf": [
          {
            "title": "Reveal",
            "type": "object",
            "properties": {
              "source": {
                "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
              },
              "nonce": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "kind": {
                "type": "string",
                "enum": [
                  "reveal"
                ]
              },
              "public_key": {
                "$ref": "#/components/schemas/Signature.Public_key"
              }
            },
            "required": [
              "source",
              "nonce",
              "kind",
              "public_key"
            ]
          },
          {
            "title": "Transaction",
            "type": "object",
            "properties": {
              "source": {
                "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
              },
              "nonce": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "kind": {
                "type": "string",
                "enum": [
                  "transaction"
                ]
              },
              "amount": {
                "$ref": "#/components/schemas/007-PsDELPH1.mutez"
              },
              "destination": {
                "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
              },
              "parameters": {
                "type": "object",
                "properties": {
                  "entrypoint": {
                    "$ref": "#/components/schemas/007-PsDELPH1.entrypoint"
                  },
                  "value": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  }
                },
                "required": [
                  "entrypoint",
                  "value"
                ]
              }
            },
            "required": [
              "source",
              "nonce",
              "kind",
              "amount",
              "destination"
            ]
          },
          {
            "title": "Origination",
            "type": "object",
            "properties": {
              "source": {
                "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
              },
              "nonce": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "kind": {
                "type": "string",
                "enum": [
                  "origination"
                ]
              },
              "balance": {
                "$ref": "#/components/schemas/007-PsDELPH1.mutez"
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "script": {
                "$ref": "#/components/schemas/007-PsDELPH1.scripted.contracts"
              }
            },
            "required": [
              "source",
              "nonce",
              "kind",
              "balance",
              "script"
            ]
          },
          {
            "title": "Delegation",
            "type": "object",
            "properties": {
              "source": {
                "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
              },
              "nonce": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "kind": {
                "type": "string",
                "enum": [
                  "delegation"
                ]
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              }
            },
            "required": [
              "source",
              "nonce",
              "kind"
            ]
          }
        ]
      },
      "007-PsDELPH1.operation.alpha.internal_operation_result": {
        "oneOf": [
          {
            "title": "reveal",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "reveal"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
              },
              "nonce": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "public_key": {
                "$ref": "#/components/schemas/Signature.Public_key"
              },
              "result": {
                "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.operation_result.reveal"
              }
            },
            "required": [
              "kind",
              "source",
              "nonce",
              "public_key",
              "result"
            ]
          },
          {
            "title": "transaction",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "transaction"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
              },
              "nonce": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "amount": {
                "$ref": "#/components/schemas/007-PsDELPH1.mutez"
              },
              "destination": {
                "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
              },
              "parameters": {
                "type": "object",
                "properties": {
                  "entrypoint": {
                    "$ref": "#/components/schemas/007-PsDELPH1.entrypoint"
                  },
                  "value": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  }
                },
                "required": [
                  "entrypoint",
                  "value"
                ]
              },
              "result": {
                "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.operation_result.transaction"
              }
            },
            "required": [
              "kind",
              "source",
              "nonce",
              "amount",
              "destination",
              "result"
            ]
          },
          {
            "title": "origination",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "origination"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
              },
              "nonce": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "balance": {
                "$ref": "#/components/schemas/007-PsDELPH1.mutez"
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "script": {
                "$ref": "#/components/schemas/007-PsDELPH1.scripted.contracts"
              },
              "result": {
                "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.operation_result.origination"
              }
            },
            "required": [
              "kind",
              "source",
              "nonce",
              "balance",
              "script",
              "result"
            ]
          },
          {
            "title": "delegation",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "delegation"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
              },
              "nonce": {
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "result": {
                "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.operation_result.delegation"
              }
            },
            "required": [
              "kind",
              "source",
              "nonce",
              "result"
            ]
          }
        ]
      },
      "007-PsDELPH1.operation.alpha.operation_contents_and_result": {
        "oneOf": [
          {
            "title": "Endorsement",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "endorsement"
                ]
              },
              "level": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/007-PsDELPH1.operation_metadata.alpha.balance_updates"
                  },
                  "delegate": {
                    "$ref": "#/components/schemas/Signature.Public_key_hash"
                  },
                  "slots": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    }
                  }
                },
                "required": [
                  "balance_updates",
                  "delegate",
                  "slots"
                ]
              }
            },
            "required": [
              "kind",
              "level",
              "metadata"
            ]
          },
          {
            "title": "Seed_nonce_revelation",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "seed_nonce_revelation"
                ]
              },
              "level": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "nonce": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9]+$"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/007-PsDELPH1.operation_metadata.alpha.balance_updates"
                  }
                },
                "required": [
                  "balance_updates"
                ]
              }
            },
            "required": [
              "kind",
              "level",
              "nonce",
              "metadata"
            ]
          },
          {
            "title": "Double_endorsement_evidence",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "double_endorsement_evidence"
                ]
              },
              "op1": {
                "$ref": "#/components/schemas/007-PsDELPH1.inlined.endorsement"
              },
              "op2": {
                "$ref": "#/components/schemas/007-PsDELPH1.inlined.endorsement"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/007-PsDELPH1.operation_metadata.alpha.balance_updates"
                  }
                },
                "required": [
                  "balance_updates"
                ]
              }
            },
            "required": [
              "kind",
              "op1",
              "op2",
              "metadata"
            ]
          },
          {
            "title": "Double_baking_evidence",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "double_baking_evidence"
                ]
              },
              "bh1": {
                "$ref": "#/components/schemas/007-PsDELPH1.block_header.alpha.full_header"
              },
              "bh2": {
                "$ref": "#/components/schemas/007-PsDELPH1.block_header.alpha.full_header"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/007-PsDELPH1.operation_metadata.alpha.balance_updates"
                  }
                },
                "required": [
                  "balance_updates"
                ]
              }
            },
            "required": [
              "kind",
              "bh1",
              "bh2",
              "metadata"
            ]
          },
          {
            "title": "Activate_account",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "activate_account"
                ]
              },
              "pkh": {
                "$ref": "#/components/schemas/Ed25519.Public_key_hash"
              },
              "secret": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9]+$"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/007-PsDELPH1.operation_metadata.alpha.balance_updates"
                  }
                },
                "required": [
                  "balance_updates"
                ]
              }
            },
            "required": [
              "kind",
              "pkh",
              "secret",
              "metadata"
            ]
          },
          {
            "title": "Proposals",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "proposals"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "period": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "proposals": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Protocol_hash"
                }
              },
              "metadata": {
                "type": "object",
                "properties": {}
              }
            },
            "required": [
              "kind",
              "source",
              "period",
              "proposals",
              "metadata"
            ]
          },
          {
            "title": "Ballot",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "ballot"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "period": {
                "type": "integer",
                "minimum": -2147483648,
                "maximum": 2147483647
              },
              "proposal": {
                "$ref": "#/components/schemas/Protocol_hash"
              },
              "ballot": {
                "type": "string",
                "enum": [
                  "nay",
                  "yay",
                  "pass"
                ]
              },
              "metadata": {
                "type": "object",
                "properties": {}
              }
            },
            "required": [
              "kind",
              "source",
              "period",
              "proposal",
              "ballot",
              "metadata"
            ]
          },
          {
            "title": "Reveal",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "reveal"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/007-PsDELPH1.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "public_key": {
                "$ref": "#/components/schemas/Signature.Public_key"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/007-PsDELPH1.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.operation_result.reveal"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.internal_operation_result"
                    }
                  }
                },
                "required": [
                  "balance_updates",
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "public_key",
              "metadata"
            ]
          },
          {
            "title": "Transaction",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "transaction"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/007-PsDELPH1.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "amount": {
                "$ref": "#/components/schemas/007-PsDELPH1.mutez"
              },
              "destination": {
                "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
              },
              "parameters": {
                "type": "object",
                "properties": {
                  "entrypoint": {
                    "$ref": "#/components/schemas/007-PsDELPH1.entrypoint"
                  },
                  "value": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  }
                },
                "required": [
                  "entrypoint",
                  "value"
                ]
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/007-PsDELPH1.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.operation_result.transaction"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.internal_operation_result"
                    }
                  }
                },
                "required": [
                  "balance_updates",
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "amount",
              "destination",
              "metadata"
            ]
          },
          {
            "title": "Origination",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "origination"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/007-PsDELPH1.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "balance": {
                "$ref": "#/components/schemas/007-PsDELPH1.mutez"
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "script": {
                "$ref": "#/components/schemas/007-PsDELPH1.scripted.contracts"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/007-PsDELPH1.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.operation_result.origination"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.internal_operation_result"
                    }
                  }
                },
                "required": [
                  "balance_updates",
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "balance",
              "script",
              "metadata"
            ]
          },
          {
            "title": "Delegation",
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "delegation"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "fee": {
                "$ref": "#/components/schemas/007-PsDELPH1.mutez"
              },
              "counter": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "gas_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_limit": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "delegate": {
                "$ref": "#/components/schemas/Signature.Public_key_hash"
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "balance_updates": {
                    "$ref": "#/components/schemas/007-PsDELPH1.operation_metadata.alpha.balance_updates"
                  },
                  "operation_result": {
                    "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.operation_result.delegation"
                  },
                  "internal_operation_results": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.internal_operation_result"
                    }
                  }
                },
                "required": [
                  "balance_updates",
                  "operation_result"
                ]
              }
            },
            "required": [
              "kind",
              "source",
              "fee",
              "counter",
              "gas_limit",
              "storage_limit",
              "metadata"
            ]
          }
        ]
      },
      "007-PsDELPH1.operation.alpha.operation_result.delegation": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "consumed_gas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/007-PsDELPH1.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/007-PsDELPH1.error"
                }
              },
              "consumed_gas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status"
            ]
          }
        ]
      },
      "007-PsDELPH1.operation.alpha.operation_result.origination": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "big_map_diff": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "title": "update",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "update"
                          ]
                        },
                        "big_map": {
                          "$ref": "#/components/schemas/bignum"
                        },
                        "key_hash": {
                          "$ref": "#/components/schemas/script_expr"
                        },
                        "key": {
                          "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                        },
                        "value": {
                          "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "action",
                        "big_map",
                        "key_hash",
                        "key"
                      ]
                    },
                    {
                      "title": "remove",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "remove"
                          ]
                        },
                        "big_map": {
                          "$ref": "#/components/schemas/bignum"
                        }
                      },
                      "required": [
                        "action",
                        "big_map"
                      ]
                    },
                    {
                      "title": "copy",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "copy"
                          ]
                        },
                        "source_big_map": {
                          "$ref": "#/components/schemas/bignum"
                        },
                        "destination_big_map": {
                          "$ref": "#/components/schemas/bignum"
                        }
                      },
                      "required": [
                        "action",
                        "source_big_map",
                        "destination_big_map"
                      ]
                    },
                    {
                      "title": "alloc",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "alloc"
                          ]
                        },
                        "big_map": {
                          "$ref": "#/components/schemas/bignum"
                        },
                        "key_type": {
                          "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                        },
                        "value_type": {
                          "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "action",
                        "big_map",
                        "key_type",
                        "value_type"
                      ]
                    }
                  ]
                }
              },
              "balance_updates": {
                "$ref": "#/components/schemas/007-PsDELPH1.operation_metadata.alpha.balance_updates"
              },
              "originated_contracts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
                }
              },
              "consumed_gas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_size": {
                "$ref": "#/components/schemas/bignum"
              },
              "paid_storage_size_diff": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/007-PsDELPH1.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/007-PsDELPH1.error"
                }
              },
              "big_map_diff": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "title": "update",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "update"
                          ]
                        },
                        "big_map": {
                          "$ref": "#/components/schemas/bignum"
                        },
                        "key_hash": {
                          "$ref": "#/components/schemas/script_expr"
                        },
                        "key": {
                          "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                        },
                        "value": {
                          "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "action",
                        "big_map",
                        "key_hash",
                        "key"
                      ]
                    },
                    {
                      "title": "remove",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "remove"
                          ]
                        },
                        "big_map": {
                          "$ref": "#/components/schemas/bignum"
                        }
                      },
                      "required": [
                        "action",
                        "big_map"
                      ]
                    },
                    {
                      "title": "copy",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "copy"
                          ]
                        },
                        "source_big_map": {
                          "$ref": "#/components/schemas/bignum"
                        },
                        "destination_big_map": {
                          "$ref": "#/components/schemas/bignum"
                        }
                      },
                      "required": [
                        "action",
                        "source_big_map",
                        "destination_big_map"
                      ]
                    },
                    {
                      "title": "alloc",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "alloc"
                          ]
                        },
                        "big_map": {
                          "$ref": "#/components/schemas/bignum"
                        },
                        "key_type": {
                          "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                        },
                        "value_type": {
                          "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "action",
                        "big_map",
                        "key_type",
                        "value_type"
                      ]
                    }
                  ]
                }
              },
              "balance_updates": {
                "$ref": "#/components/schemas/007-PsDELPH1.operation_metadata.alpha.balance_updates"
              },
              "originated_contracts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
                }
              },
              "consumed_gas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_size": {
                "$ref": "#/components/schemas/bignum"
              },
              "paid_storage_size_diff": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "status"
            ]
          }
        ]
      },
      "007-PsDELPH1.operation.alpha.operation_result.reveal": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "consumed_gas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/007-PsDELPH1.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/007-PsDELPH1.error"
                }
              },
              "consumed_gas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              }
            },
            "required": [
              "status"
            ]
          }
        ]
      },
      "007-PsDELPH1.operation.alpha.operation_result.transaction": {
        "oneOf": [
          {
            "title": "Applied",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "applied"
                ]
              },
              "storage": {
                "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
              },
              "big_map_diff": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "title": "update",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "update"
                          ]
                        },
                        "big_map": {
                          "$ref": "#/components/schemas/bignum"
                        },
                        "key_hash": {
                          "$ref": "#/components/schemas/script_expr"
                        },
                        "key": {
                          "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                        },
                        "value": {
                          "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "action",
                        "big_map",
                        "key_hash",
                        "key"
                      ]
                    },
                    {
                      "title": "remove",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "remove"
                          ]
                        },
                        "big_map": {
                          "$ref": "#/components/schemas/bignum"
                        }
                      },
                      "required": [
                        "action",
                        "big_map"
                      ]
                    },
                    {
                      "title": "copy",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "copy"
                          ]
                        },
                        "source_big_map": {
                          "$ref": "#/components/schemas/bignum"
                        },
                        "destination_big_map": {
                          "$ref": "#/components/schemas/bignum"
                        }
                      },
                      "required": [
                        "action",
                        "source_big_map",
                        "destination_big_map"
                      ]
                    },
                    {
                      "title": "alloc",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "alloc"
                          ]
                        },
                        "big_map": {
                          "$ref": "#/components/schemas/bignum"
                        },
                        "key_type": {
                          "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                        },
                        "value_type": {
                          "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "action",
                        "big_map",
                        "key_type",
                        "value_type"
                      ]
                    }
                  ]
                }
              },
              "balance_updates": {
                "$ref": "#/components/schemas/007-PsDELPH1.operation_metadata.alpha.balance_updates"
              },
              "originated_contracts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
                }
              },
              "consumed_gas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_size": {
                "$ref": "#/components/schemas/bignum"
              },
              "paid_storage_size_diff": {
                "$ref": "#/components/schemas/bignum"
              },
              "allocated_destination_contract": {
                "type": "boolean"
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Failed",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/007-PsDELPH1.error"
                }
              }
            },
            "required": [
              "status",
              "errors"
            ]
          },
          {
            "title": "Skipped",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "skipped"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Backtracked",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "backtracked"
                ]
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/007-PsDELPH1.error"
                }
              },
              "storage": {
                "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
              },
              "big_map_diff": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "title": "update",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "update"
                          ]
                        },
                        "big_map": {
                          "$ref": "#/components/schemas/bignum"
                        },
                        "key_hash": {
                          "$ref": "#/components/schemas/script_expr"
                        },
                        "key": {
                          "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                        },
                        "value": {
                          "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "action",
                        "big_map",
                        "key_hash",
                        "key"
                      ]
                    },
                    {
                      "title": "remove",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "remove"
                          ]
                        },
                        "big_map": {
                          "$ref": "#/components/schemas/bignum"
                        }
                      },
                      "required": [
                        "action",
                        "big_map"
                      ]
                    },
                    {
                      "title": "copy",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "copy"
                          ]
                        },
                        "source_big_map": {
                          "$ref": "#/components/schemas/bignum"
                        },
                        "destination_big_map": {
                          "$ref": "#/components/schemas/bignum"
                        }
                      },
                      "required": [
                        "action",
                        "source_big_map",
                        "destination_big_map"
                      ]
                    },
                    {
                      "title": "alloc",
                      "type": "object",
                      "properties": {
                        "action": {
                          "type": "string",
                          "enum": [
                            "alloc"
                          ]
                        },
                        "big_map": {
                          "$ref": "#/components/schemas/bignum"
                        },
                        "key_type": {
                          "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                        },
                        "value_type": {
                          "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                        }
                      },
                      "required": [
                        "action",
                        "big_map",
                        "key_type",
                        "value_type"
                      ]
                    }
                  ]
                }
              },
              "balance_updates": {
                "$ref": "#/components/schemas/007-PsDELPH1.operation_metadata.alpha.balance_updates"
              },
              "originated_contracts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
                }
              },
              "consumed_gas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "consumed_milligas": {
                "$ref": "#/components/schemas/positive_bignum"
              },
              "storage_size": {
                "$ref": "#/components/schemas/bignum"
              },
              "paid_storage_size_diff": {
                "$ref": "#/components/schemas/bignum"
              },
              "allocated_destination_contract": {
                "type": "boolean"
              }
            },
            "required": [
              "status"
            ]
          }
        ]
      },
      "007-PsDELPH1.operation.alpha.operation_with_metadata": {
        "oneOf": [
          {
            "title": "Operation_with_metadata",
            "type": "object",
            "properties": {
              "contents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.operation_contents_and_result"
                }
              },
              "signature": {
                "$ref": "#/components/schemas/Signature"
              }
            },
            "required": [
              "contents"
            ]
          },
          {
            "title": "Operation_without_metadata",
            "type": "object",
            "properties": {
              "contents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.contents"
                }
              },
              "signature": {
                "$ref": "#/components/schemas/Signature"
              }
            },
            "required": [
              "contents"
            ]
          }
        ]
      },
      "007-PsDELPH1.operation.alpha.unsigned_operation": {
        "type": "object",
        "properties": {
          "branch": {
            "$ref": "#/components/schemas/block_hash"
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.contents"
            }
          }
        },
        "required": [
          "branch",
          "contents"
        ]
      },
      "007-PsDELPH1.operation_metadata.alpha.balance_updates": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "contract"
                  ]
                },
                "contract": {
                  "$ref": "#/components/schemas/007-PsDELPH1.contract_id"
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                }
              },
              "required": [
                "kind",
                "contract",
                "change"
              ]
            },
            {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "freezer"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "rewards"
                  ]
                },
                "delegate": {
                  "$ref": "#/components/schemas/Signature.Public_key_hash"
                },
                "cycle": {
                  "type": "integer",
                  "minimum": -2147483648,
                  "maximum": 2147483647
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                }
              },
              "required": [
                "kind",
                "category",
                "delegate",
                "cycle",
                "change"
              ]
            },
            {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "freezer"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "fees"
                  ]
                },
                "delegate": {
                  "$ref": "#/components/schemas/Signature.Public_key_hash"
                },
                "cycle": {
                  "type": "integer",
                  "minimum": -2147483648,
                  "maximum": 2147483647
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                }
              },
              "required": [
                "kind",
                "category",
                "delegate",
                "cycle",
                "change"
              ]
            },
            {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "freezer"
                  ]
                },
                "category": {
                  "type": "string",
                  "enum": [
                    "deposits"
                  ]
                },
                "delegate": {
                  "$ref": "#/components/schemas/Signature.Public_key_hash"
                },
                "cycle": {
                  "type": "integer",
                  "minimum": -2147483648,
                  "maximum": 2147483647
                },
                "change": {
                  "$ref": "#/components/schemas/int64"
                }
              },
              "required": [
                "kind",
                "category",
                "delegate",
                "cycle",
                "change"
              ]
            }
          ]
        }
      },
      "007-PsDELPH1.scripted.contracts": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
          },
          "storage": {
            "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
          }
        },
        "required": [
          "code",
          "storage"
        ]
      },
      "007-PsDELPH1.scripted.trace": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "location": {
              "$ref": "#/components/schemas/micheline.location"
            },
            "gas": {
              "oneOf": [
                {
                  "title": "Limited",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bignum"
                    }
                  ]
                },
                {
                  "title": "Unaccounted",
                  "type": "string",
                  "enum": [
                    "unaccounted"
                  ]
                }
              ]
            },
            "stack": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "item": {
                    "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                  },
                  "annot": {
                    "$ref": "#/components/schemas/unistring"
                  }
                },
                "required": [
                  "item"
                ]
              }
            }
          },
          "required": [
            "location",
            "gas",
            "stack"
          ]
        }
      },
      "Chain_id": {
        "title": "Network identifier (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Context_hash": {
        "title": "A hash of context (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Ed25519.Public_key_hash": {
        "title": "An Ed25519 public key hash (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Operation_hash": {
        "title": "A Tezos operation ID (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Operation_list_list_hash": {
        "title": "A list of list of operations (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Protocol_hash": {
        "title": "A Tezos protocol ID (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Signature": {
        "title": "A Ed25519, Secp256k1 or P256 signature (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Signature.Public_key": {
        "title": "A Ed25519, Secp256k1, or P256 public key (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Signature.Public_key_hash": {
        "title": "A Ed25519, Secp256k1, or P256 public key hash (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "bignum": {
        "title": "Big number",
        "description": "Decimal representation of a big number",
        "type": "string"
      },
      "block_hash": {
        "title": "A block identifier (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "block_header": {
        "type": "object",
        "properties": {
          "protocol": {
            "type": "string",
            "enum": [
              "ProtoGenesisGenesisGenesisGenesisGenesisGenesk612im"
            ]
          },
          "chain_id": {
            "$ref": "#/components/schemas/Chain_id"
          },
          "hash": {
            "$ref": "#/components/schemas/block_hash"
          },
          "level": {
            "type": "integer",
            "minimum": -2147483648,
            "maximum": 2147483647
          },
          "proto": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "predecessor": {
            "$ref": "#/components/schemas/block_hash"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp.protocol"
          },
          "validation_pass": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "operations_hash": {
            "$ref": "#/components/schemas/Operation_list_list_hash"
          },
          "fitness": {
            "$ref": "#/components/schemas/fitness"
          },
          "context": {
            "$ref": "#/components/schemas/Context_hash"
          },
          "content": {
            "oneOf": [
              {
                "title": "Activate",
                "type": "object",
                "properties": {
                  "command": {
                    "type": "string",
                    "enum": [
                      "activate"
                    ]
                  },
                  "hash": {
                    "$ref": "#/components/schemas/Protocol_hash"
                  },
                  "fitness": {
                    "$ref": "#/components/schemas/fitness"
                  },
                  "protocol_parameters": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9]+$"
                  }
                },
                "required": [
                  "command",
                  "hash",
                  "fitness",
                  "protocol_parameters"
                ]
              },
              {
                "title": "Activate_testchain",
                "type": "object",
                "properties": {
                  "command": {
                    "type": "string",
                    "enum": [
                      "activate_testchain"
                    ]
                  },
                  "hash": {
                    "$ref": "#/components/schemas/Protocol_hash"
                  },
                  "fitness": {
                    "$ref": "#/components/schemas/fitness"
                  },
                  "protocol_parameters": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9]+$"
                  },
                  "validity_time": {
                    "$ref": "#/components/schemas/int64"
                  }
                },
                "required": [
                  "command",
                  "hash",
                  "fitness",
                  "protocol_parameters",
                  "validity_time"
                ]
              }
            ]
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        "required": [
          "protocol",
          "chain_id",
          "hash",
          "level",
          "proto",
          "predecessor",
          "timestamp",
          "validation_pass",
          "operations_hash",
          "fitness",
          "context",
          "content",
          "signature"
        ]
      },
      "block_header.shell": {
        "title": "Shell header",
        "description": "Block header's shell-related content. It contains information such as the block level, its predecessor and timestamp.",
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "minimum": -2147483648,
            "maximum": 2147483647
          },
          "proto": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "predecessor": {
            "$ref": "#/components/schemas/block_hash"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp.protocol"
          },
          "validation_pass": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "operations_hash": {
            "$ref": "#/components/schemas/Operation_list_list_hash"
          },
          "fitness": {
            "$ref": "#/components/schemas/fitness"
          },
          "context": {
            "$ref": "#/components/schemas/Context_hash"
          }
        },
        "required": [
          "level",
          "proto",
          "predecessor",
          "timestamp",
          "validation_pass",
          "operations_hash",
          "fitness",
          "context"
        ]
      },
      "block_header_metadata": {
        "type": "object",
        "properties": {
          "protocol": {
            "type": "string",
            "enum": [
              "ProtoGenesisGenesisGenesisGenesisGenesisGenesk612im"
            ]
          },
          "next_protocol": {
            "type": "string",
            "enum": [
              "PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo"
            ]
          },
          "test_chain_status": {
            "$ref": "#/components/schemas/test_chain_status"
          },
          "max_operations_ttl": {
            "type": "integer",
            "minimum": -1073741824,
            "maximum": 1073741823
          },
          "max_operation_data_length": {
            "type": "integer",
            "minimum": -1073741824,
            "maximum": 1073741823
          },
          "max_block_header_length": {
            "type": "integer",
            "minimum": -1073741824,
            "maximum": 1073741823
          },
          "max_operation_list_length": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "max_size": {
                  "type": "integer",
                  "minimum": -1073741824,
                  "maximum": 1073741823
                },
                "max_op": {
                  "type": "integer",
                  "minimum": -1073741824,
                  "maximum": 1073741823
                }
              },
              "required": [
                "max_size"
              ]
            }
          }
        },
        "required": [
          "protocol",
          "next_protocol",
          "test_chain_status",
          "max_operations_ttl",
          "max_operation_data_length",
          "max_block_header_length",
          "max_operation_list_length"
        ],
        "additionalProperties": {}
      },
      "cycle_nonce": {
        "title": "A nonce hash (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "error": {
        "description": "The full list of error is available with the global RPC `GET errors`"
      },
      "fitness": {
        "title": "Block fitness",
        "description": "The fitness, or score, of a block, that allow the Tezos to decide which chain is the best. A fitness value is a list of byte sequences. They are compared as follows: shortest lists are smaller; lists of the same length are compared according to the lexicographical order.",
        "type": "array",
        "items": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9]+$"
        }
      },
      "int64": {
        "title": "64 bit integers",
        "description": "Decimal representation of 64 bit integers",
        "type": "string"
      },
      "micheline.007-PsDELPH1.michelson_v1.expression": {
        "oneOf": [
          {
            "title": "Int",
            "type": "object",
            "properties": {
              "int": {
                "$ref": "#/components/schemas/bignum"
              }
            },
            "required": [
              "int"
            ]
          },
          {
            "title": "String",
            "type": "object",
            "properties": {
              "string": {
                "$ref": "#/components/schemas/unistring"
              }
            },
            "required": [
              "string"
            ]
          },
          {
            "title": "Bytes",
            "type": "object",
            "properties": {
              "bytes": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9]+$"
              }
            },
            "required": [
              "bytes"
            ]
          },
          {
            "title": "Sequence",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
            }
          },
          {
            "title": "Generic prim (any number of args with or without annot)",
            "type": "object",
            "properties": {
              "prim": {
                "$ref": "#/components/schemas/007-PsDELPH1.michelson.v1.primitives"
              },
              "args": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/micheline.007-PsDELPH1.michelson_v1.expression"
                }
              },
              "annots": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "prim"
            ]
          }
        ]
      },
      "micheline.location": {
        "title": "Canonical location in a Micheline expression",
        "description": "The location of a node in a Micheline expression tree in prefix order, with zero being the root and adding one for every basic node, sequence and primitive application.",
        "type": "integer",
        "minimum": -1073741824,
        "maximum": 1073741823
      },
      "next_operation": {
        "type": "object",
        "properties": {
          "protocol": {
            "type": "string",
            "enum": [
              "PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo"
            ]
          },
          "branch": {
            "$ref": "#/components/schemas/block_hash"
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/007-PsDELPH1.operation.alpha.contents"
            }
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        "required": [
          "protocol",
          "branch",
          "contents",
          "signature"
        ]
      },
      "operation": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "enum": [
                  "ProtoGenesisGenesisGenesisGenesisGenesisGenesk612im"
                ]
              },
              "chain_id": {
                "$ref": "#/components/schemas/Chain_id"
              },
              "hash": {
                "$ref": "#/components/schemas/Operation_hash"
              },
              "branch": {
                "$ref": "#/components/schemas/block_hash"
              }
            },
            "required": [
              "protocol",
              "chain_id",
              "hash",
              "branch"
            ],
            "additionalProperties": {}
          },
          {
            "type": "object",
            "properties": {
              "protocol": {
                "type": "string",
                "enum": [
                  "ProtoGenesisGenesisGenesisGenesisGenesisGenesk612im"
                ]
              },
              "chain_id": {
                "$ref": "#/components/schemas/Chain_id"
              },
              "hash": {
                "$ref": "#/components/schemas/Operation_hash"
              },
              "branch": {
                "$ref": "#/components/schemas/block_hash"
              }
            },
            "required": [
              "protocol",
              "chain_id",
              "hash",
              "branch"
            ],
            "additionalProperties": {}
          }
        ]
      },
      "positive_bignum": {
        "title": "Positive big number",
        "description": "Decimal representation of a positive big number",
        "type": "string"
      },
      "raw_block_header": {
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "minimum": -2147483648,
            "maximum": 2147483647
          },
          "proto": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "predecessor": {
            "$ref": "#/components/schemas/block_hash"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp.protocol"
          },
          "validation_pass": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "operations_hash": {
            "$ref": "#/components/schemas/Operation_list_list_hash"
          },
          "fitness": {
            "$ref": "#/components/schemas/fitness"
          },
          "context": {
            "$ref": "#/components/schemas/Context_hash"
          },
          "content": {
            "oneOf": [
              {
                "title": "Activate",
                "type": "object",
                "properties": {
                  "command": {
                    "type": "string",
                    "enum": [
                      "activate"
                    ]
                  },
                  "hash": {
                    "$ref": "#/components/schemas/Protocol_hash"
                  },
                  "fitness": {
                    "$ref": "#/components/schemas/fitness"
                  },
                  "protocol_parameters": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9]+$"
                  }
                },
                "required": [
                  "command",
                  "hash",
                  "fitness",
                  "protocol_parameters"
                ]
              },
              {
                "title": "Activate_testchain",
                "type": "object",
                "properties": {
                  "command": {
                    "type": "string",
                    "enum": [
                      "activate_testchain"
                    ]
                  },
                  "hash": {
                    "$ref": "#/components/schemas/Protocol_hash"
                  },
                  "fitness": {
                    "$ref": "#/components/schemas/fitness"
                  },
                  "protocol_parameters": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9]+$"
                  },
                  "validity_time": {
                    "$ref": "#/components/schemas/int64"
                  }
                },
                "required": [
                  "command",
                  "hash",
                  "fitness",
                  "protocol_parameters",
                  "validity_time"
                ]
              }
            ]
          },
          "signature": {
            "$ref": "#/components/schemas/Signature"
          }
        },
        "required": [
          "level",
          "proto",
          "predecessor",
          "timestamp",
          "validation_pass",
          "operations_hash",
          "fitness",
          "context",
          "content",
          "signature"
        ]
      },
      "raw_context": {
        "nullable": true,
        "oneOf": [
          {
            "title": "Key",
            "type": "string",
            "pattern": "^[a-zA-Z0-9]+$"
          },
          {
            "title": "Dir",
            "type": "object",
            "properties": {},
            "additionalProperties": {
              "$ref": "#/components/schemas/raw_context"
            }
          }
        ]
      },
      "script_expr": {
        "title": "A script expression ID (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "test_chain_status": {
        "description": "The status of the test chain: not_running (there is no test chain at the moment), forking (the test chain is being setup), running (the test chain is running).",
        "oneOf": [
          {
            "title": "Not_running",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "not_running"
                ]
              }
            },
            "required": [
              "status"
            ]
          },
          {
            "title": "Forking",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "forking"
                ]
              },
              "protocol": {
                "$ref": "#/components/schemas/Protocol_hash"
              },
              "expiration": {
                "$ref": "#/components/schemas/timestamp.protocol"
              }
            },
            "required": [
              "status",
              "protocol",
              "expiration"
            ]
          },
          {
            "title": "Running",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "running"
                ]
              },
              "chain_id": {
                "$ref": "#/components/schemas/Chain_id"
              },
              "genesis": {
                "$ref": "#/components/schemas/block_hash"
              },
              "protocol": {
                "$ref": "#/components/schemas/Protocol_hash"
              },
              "expiration": {
                "$ref": "#/components/schemas/timestamp.protocol"
              }
            },
            "required": [
              "status",
              "chain_id",
              "genesis",
              "protocol",
              "expiration"
            ]
          }
        ]
      },
      "timestamp.protocol": {
        "description": "A timestamp as seen by the protocol: second-level precision, epoch based.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "unistring": {
        "title": "Universal string representation",
        "description": "Either a plain UTF8 string, or a sequence of bytes for strings that contain invalid byte sequences.",
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "object",
            "properties": {
              "invalid_utf8_string": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 255
                }
              }
            },
            "required": [
              "invalid_utf8_string"
            ]
          }
        ]
      }
    }
  }
}
