{
  "openapi": "3.0.0",
  "info": {
    "title": "Tezos RPC",
    "description": "Tezos client RPC API.",
    "version": "7.5"
  },
  "paths": {
    "/chains/{chain_id}": {
      "patch": {
        "description": "Forcefully set the bootstrapped flag of the node",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bootstrapped": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "bootstrapped"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/blocks": {
      "get": {
        "description": "Lists block hashes from '<chain>', up to the last checkpoint, sorted with decreasing fitness. Without arguments it returns the head of the chain. Optional arguments allow to return the list of predecessors of a given block or of a set of blocks.",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/block_hash"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/chain_id": {
      "get": {
        "description": "The chain unique identifier.",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chain_id"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/checkpoint": {
      "get": {
        "description": "The current checkpoint for this chain.",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "block": {
                      "$ref": "#/components/schemas/block_header"
                    },
                    "save_point": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "caboose": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "history_mode": {
                      "type": "string",
                      "enum": [
                        "full",
                        "archive",
                        "rolling"
                      ]
                    }
                  },
                  "required": [
                    "block",
                    "save_point",
                    "caboose",
                    "history_mode"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/invalid_blocks": {
      "get": {
        "description": "Lists blocks that have been declared invalid along with the errors that led to them being declared invalid.",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "block": {
                        "$ref": "#/components/schemas/block_hash"
                      },
                      "level": {
                        "type": "integer",
                        "minimum": -2147483648,
                        "maximum": 2147483647
                      },
                      "errors": {
                        "$ref": "#/components/schemas/error"
                      }
                    },
                    "required": [
                      "block",
                      "level",
                      "errors"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/invalid_blocks/{block_hash}": {
      "get": {
        "description": "The errors that appears during the block (in)validation.",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_hash",
            "in": "path",
            "description": "block_hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "block": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "level": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "errors": {
                      "$ref": "#/components/schemas/error"
                    }
                  },
                  "required": [
                    "block",
                    "level",
                    "errors"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Remove an invalid block for the tezos storage",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "block_hash",
            "in": "path",
            "description": "block_hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/chains/{chain_id}/is_bootstrapped": {
      "get": {
        "description": "The bootstrap status of a chain",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bootstrapped": {
                      "type": "boolean"
                    },
                    "sync_state": {
                      "$ref": "#/components/schemas/chain_status"
                    }
                  },
                  "required": [
                    "bootstrapped",
                    "sync_state"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/config/network/user_activated_protocol_overrides": {
      "get": {
        "description": "List of protocols which replace other protocols",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_activated.protocol_overrides"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/config/network/user_activated_upgrades": {
      "get": {
        "description": "List of protocols to switch to at given levels",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user_activated.upgrades"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/errors": {
      "get": {
        "description": "Schema for all the RPC errors from the shell",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/fetch_protocol/{Protocol_hash}": {
      "get": {
        "description": "Fetch a protocol from the network.",
        "parameters": [
          {
            "name": "Protocol_hash",
            "in": "path",
            "description": "Protocol_hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/injection/block": {
      "post": {
        "description": "Inject a block in the node and broadcast it. The `operations` embedded in `blockHeader` might be pre-validated using a contextual RPCs from the latest block (e.g. '/blocks/head/context/preapply'). Returns the ID of the block. By default, the RPC will wait for the block to be validated before answering. If ?async is true, the function returns immediately. Otherwise, the block will be validated before the result is returned. If ?force is true, it will be injected even on non strictly increasing fitness. An optional ?chain parameter can be used to specify whether to inject on the test chain or the main chain.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9]+$"
                  },
                  "operations": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/operation"
                      }
                    }
                  }
                },
                "required": [
                  "data",
                  "operations"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/block_hash"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/injection/operation": {
      "post": {
        "description": "Inject an operation in node and broadcast it. Returns the ID of the operation. The `signedOperationContents` should be constructed using a contextual RPCs from the latest block and signed by the client. By default, the RPC will wait for the operation to be (pre-)validated before answering. See RPCs under /blocks/prevalidation for more details on the prevalidation context. If ?async is true, the function returns immediately. Otherwise, the operation will be validated before the result is returned. An optional ?chain parameter can be used to specify whether to inject on the test chain or the main chain.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9]+$"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Operation_hash"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/injection/protocol": {
      "post": {
        "description": "Inject a protocol in node. Returns the ID of the protocol. If ?async is true, the function returns immediately. Otherwise, the protocol will be validated before the result is returned.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/protocol"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Protocol_hash"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/monitor/active_chains": {
      "get": {
        "description": "Monitor every chain creation and destruction. Currently active chains will be given as first elements",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "title": "Main",
                        "type": "object",
                        "properties": {
                          "chain_id": {
                            "$ref": "#/components/schemas/Chain_id"
                          }
                        },
                        "required": [
                          "chain_id"
                        ]
                      },
                      {
                        "title": "Test",
                        "type": "object",
                        "properties": {
                          "chain_id": {
                            "$ref": "#/components/schemas/Chain_id"
                          },
                          "test_protocol": {
                            "$ref": "#/components/schemas/Protocol_hash"
                          },
                          "expiration_date": {
                            "$ref": "#/components/schemas/timestamp.protocol"
                          }
                        },
                        "required": [
                          "chain_id",
                          "test_protocol",
                          "expiration_date"
                        ]
                      },
                      {
                        "title": "Stopping",
                        "type": "object",
                        "properties": {
                          "stopping": {
                            "$ref": "#/components/schemas/Chain_id"
                          }
                        },
                        "required": [
                          "stopping"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/monitor/bootstrapped": {
      "get": {
        "description": "Wait for the node to have synchronized its chain with a few peers (configured by the node's administrator), streaming head updates that happen during the bootstrapping process, and closing the stream at the end. If the node was already bootstrapped, returns the current head immediately.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "block": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "timestamp": {
                      "$ref": "#/components/schemas/timestamp.protocol"
                    }
                  },
                  "required": [
                    "block",
                    "timestamp"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/monitor/commit_hash": {
      "get": {
        "description": "DEPRECATED: use `version` instead.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unistring"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/monitor/heads/{chain_id}": {
      "get": {
        "description": "Monitor all blocks that are successfully validated by the node and selected as the new head of the given chain.",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hash": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "level": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "proto": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "predecessor": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "timestamp": {
                      "$ref": "#/components/schemas/timestamp.protocol"
                    },
                    "validation_pass": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "operations_hash": {
                      "$ref": "#/components/schemas/Operation_list_list_hash"
                    },
                    "fitness": {
                      "$ref": "#/components/schemas/fitness"
                    },
                    "context": {
                      "$ref": "#/components/schemas/Context_hash"
                    },
                    "protocol_data": {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9]+$"
                    }
                  },
                  "required": [
                    "hash",
                    "level",
                    "proto",
                    "predecessor",
                    "timestamp",
                    "validation_pass",
                    "operations_hash",
                    "fitness",
                    "context",
                    "protocol_data"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/monitor/protocols": {
      "get": {
        "description": "Monitor all economic protocols that are retrieved and successfully loaded and compiled by the node.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Protocol_hash"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/monitor/valid_blocks": {
      "get": {
        "description": "Monitor all blocks that are successfully validated by the node, disregarding whether they were selected as the new head or not.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "chain_id": {
                      "$ref": "#/components/schemas/Chain_id"
                    },
                    "hash": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "level": {
                      "type": "integer",
                      "minimum": -2147483648,
                      "maximum": 2147483647
                    },
                    "proto": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "predecessor": {
                      "$ref": "#/components/schemas/block_hash"
                    },
                    "timestamp": {
                      "$ref": "#/components/schemas/timestamp.protocol"
                    },
                    "validation_pass": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 255
                    },
                    "operations_hash": {
                      "$ref": "#/components/schemas/Operation_list_list_hash"
                    },
                    "fitness": {
                      "$ref": "#/components/schemas/fitness"
                    },
                    "context": {
                      "$ref": "#/components/schemas/Context_hash"
                    },
                    "protocol_data": {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9]+$"
                    }
                  },
                  "required": [
                    "chain_id",
                    "hash",
                    "level",
                    "proto",
                    "predecessor",
                    "timestamp",
                    "validation_pass",
                    "operations_hash",
                    "fitness",
                    "context",
                    "protocol_data"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/connections": {
      "get": {
        "description": "List the running P2P connection.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "incoming": {
                        "type": "boolean"
                      },
                      "peer_id": {
                        "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                      },
                      "id_point": {
                        "$ref": "#/components/schemas/p2p_connection.id"
                      },
                      "remote_socket_port": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 65535
                      },
                      "announced_version": {
                        "$ref": "#/components/schemas/network_version"
                      },
                      "private": {
                        "type": "boolean"
                      },
                      "local_metadata": {
                        "type": "object",
                        "properties": {
                          "disable_mempool": {
                            "type": "boolean"
                          },
                          "private_node": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "disable_mempool",
                          "private_node"
                        ]
                      },
                      "remote_metadata": {
                        "type": "object",
                        "properties": {
                          "disable_mempool": {
                            "type": "boolean"
                          },
                          "private_node": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "disable_mempool",
                          "private_node"
                        ]
                      }
                    },
                    "required": [
                      "incoming",
                      "peer_id",
                      "id_point",
                      "remote_socket_port",
                      "announced_version",
                      "private",
                      "local_metadata",
                      "remote_metadata"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/connections/{peer_id}": {
      "get": {
        "description": "Details about the current P2P connection to the given peer.",
        "parameters": [
          {
            "name": "peer_id",
            "in": "path",
            "description": "A cryptographic node identity (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "incoming": {
                      "type": "boolean"
                    },
                    "peer_id": {
                      "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                    },
                    "id_point": {
                      "$ref": "#/components/schemas/p2p_connection.id"
                    },
                    "remote_socket_port": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "announced_version": {
                      "$ref": "#/components/schemas/network_version"
                    },
                    "private": {
                      "type": "boolean"
                    },
                    "local_metadata": {
                      "type": "object",
                      "properties": {
                        "disable_mempool": {
                          "type": "boolean"
                        },
                        "private_node": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "disable_mempool",
                        "private_node"
                      ]
                    },
                    "remote_metadata": {
                      "type": "object",
                      "properties": {
                        "disable_mempool": {
                          "type": "boolean"
                        },
                        "private_node": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "disable_mempool",
                        "private_node"
                      ]
                    }
                  },
                  "required": [
                    "incoming",
                    "peer_id",
                    "id_point",
                    "remote_socket_port",
                    "announced_version",
                    "private",
                    "local_metadata",
                    "remote_metadata"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Forced close of the current P2P connection to the given peer.",
        "parameters": [
          {
            "name": "peer_id",
            "in": "path",
            "description": "A cryptographic node identity (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/greylist/clear": {
      "get": {
        "description": "Clear all greylists tables.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/log": {
      "get": {
        "description": "Stream of all network events",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/p2p_connection.pool_event"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/peers": {
      "get": {
        "description": "List the peers the node ever met.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "score": {
                              "type": "integer"
                            },
                            "trusted": {
                              "type": "boolean"
                            },
                            "conn_metadata": {
                              "type": "object",
                              "properties": {
                                "disable_mempool": {
                                  "type": "boolean"
                                },
                                "private_node": {
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "disable_mempool",
                                "private_node"
                              ]
                            },
                            "peer_metadata": {
                              "type": "object",
                              "properties": {
                                "responses": {
                                  "type": "object",
                                  "properties": {
                                    "sent": {
                                      "type": "object",
                                      "properties": {
                                        "branch": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "head": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "block_header": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operations": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "protocols": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operation_hashes_for_block": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operations_for_block": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "other": {
                                          "$ref": "#/components/schemas/bignum"
                                        }
                                      },
                                      "required": [
                                        "branch",
                                        "head",
                                        "block_header",
                                        "operations",
                                        "protocols",
                                        "operation_hashes_for_block",
                                        "operations_for_block",
                                        "other"
                                      ]
                                    },
                                    "failed": {
                                      "type": "object",
                                      "properties": {
                                        "branch": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "head": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "block_header": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operations": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "protocols": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operation_hashes_for_block": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operations_for_block": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "other": {
                                          "$ref": "#/components/schemas/bignum"
                                        }
                                      },
                                      "required": [
                                        "branch",
                                        "head",
                                        "block_header",
                                        "operations",
                                        "protocols",
                                        "operation_hashes_for_block",
                                        "operations_for_block",
                                        "other"
                                      ]
                                    },
                                    "received": {
                                      "type": "object",
                                      "properties": {
                                        "branch": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "head": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "block_header": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operations": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "protocols": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operation_hashes_for_block": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operations_for_block": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "other": {
                                          "$ref": "#/components/schemas/bignum"
                                        }
                                      },
                                      "required": [
                                        "branch",
                                        "head",
                                        "block_header",
                                        "operations",
                                        "protocols",
                                        "operation_hashes_for_block",
                                        "operations_for_block",
                                        "other"
                                      ]
                                    },
                                    "unexpected": {
                                      "$ref": "#/components/schemas/bignum"
                                    },
                                    "outdated": {
                                      "$ref": "#/components/schemas/bignum"
                                    }
                                  },
                                  "required": [
                                    "sent",
                                    "failed",
                                    "received",
                                    "unexpected",
                                    "outdated"
                                  ]
                                },
                                "requests": {
                                  "type": "object",
                                  "properties": {
                                    "sent": {
                                      "type": "object",
                                      "properties": {
                                        "branch": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "head": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "block_header": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operations": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "protocols": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operation_hashes_for_block": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operations_for_block": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "other": {
                                          "$ref": "#/components/schemas/bignum"
                                        }
                                      },
                                      "required": [
                                        "branch",
                                        "head",
                                        "block_header",
                                        "operations",
                                        "protocols",
                                        "operation_hashes_for_block",
                                        "operations_for_block",
                                        "other"
                                      ]
                                    },
                                    "received": {
                                      "type": "object",
                                      "properties": {
                                        "branch": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "head": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "block_header": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operations": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "protocols": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operation_hashes_for_block": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operations_for_block": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "other": {
                                          "$ref": "#/components/schemas/bignum"
                                        }
                                      },
                                      "required": [
                                        "branch",
                                        "head",
                                        "block_header",
                                        "operations",
                                        "protocols",
                                        "operation_hashes_for_block",
                                        "operations_for_block",
                                        "other"
                                      ]
                                    },
                                    "failed": {
                                      "type": "object",
                                      "properties": {
                                        "branch": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "head": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "block_header": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operations": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "protocols": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operation_hashes_for_block": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operations_for_block": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "other": {
                                          "$ref": "#/components/schemas/bignum"
                                        }
                                      },
                                      "required": [
                                        "branch",
                                        "head",
                                        "block_header",
                                        "operations",
                                        "protocols",
                                        "operation_hashes_for_block",
                                        "operations_for_block",
                                        "other"
                                      ]
                                    },
                                    "scheduled": {
                                      "type": "object",
                                      "properties": {
                                        "branch": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "head": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "block_header": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operations": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "protocols": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operation_hashes_for_block": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "operations_for_block": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "other": {
                                          "$ref": "#/components/schemas/bignum"
                                        }
                                      },
                                      "required": [
                                        "branch",
                                        "head",
                                        "block_header",
                                        "operations",
                                        "protocols",
                                        "operation_hashes_for_block",
                                        "operations_for_block",
                                        "other"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "sent",
                                    "received",
                                    "failed",
                                    "scheduled"
                                  ]
                                },
                                "valid_blocks": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "old_heads": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "prevalidator_results": {
                                  "type": "object",
                                  "properties": {
                                    "cannot_download": {
                                      "$ref": "#/components/schemas/bignum"
                                    },
                                    "cannot_parse": {
                                      "$ref": "#/components/schemas/bignum"
                                    },
                                    "refused_by_prefilter": {
                                      "$ref": "#/components/schemas/bignum"
                                    },
                                    "refused_by_postfilter": {
                                      "$ref": "#/components/schemas/bignum"
                                    },
                                    "applied": {
                                      "$ref": "#/components/schemas/bignum"
                                    },
                                    "branch_delayed": {
                                      "$ref": "#/components/schemas/bignum"
                                    },
                                    "branch_refused": {
                                      "$ref": "#/components/schemas/bignum"
                                    },
                                    "refused": {
                                      "$ref": "#/components/schemas/bignum"
                                    },
                                    "duplicate": {
                                      "$ref": "#/components/schemas/bignum"
                                    },
                                    "outdated": {
                                      "$ref": "#/components/schemas/bignum"
                                    }
                                  },
                                  "required": [
                                    "cannot_download",
                                    "cannot_parse",
                                    "refused_by_prefilter",
                                    "refused_by_postfilter",
                                    "applied",
                                    "branch_delayed",
                                    "branch_refused",
                                    "refused",
                                    "duplicate",
                                    "outdated"
                                  ]
                                },
                                "unactivated_chains": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "inactive_chains": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "future_blocks_advertised": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "unadvertised": {
                                  "type": "object",
                                  "properties": {
                                    "block": {
                                      "$ref": "#/components/schemas/bignum"
                                    },
                                    "operations": {
                                      "$ref": "#/components/schemas/bignum"
                                    },
                                    "protocol": {
                                      "$ref": "#/components/schemas/bignum"
                                    }
                                  },
                                  "required": [
                                    "block",
                                    "operations",
                                    "protocol"
                                  ]
                                },
                                "advertisements": {
                                  "type": "object",
                                  "properties": {
                                    "sent": {
                                      "type": "object",
                                      "properties": {
                                        "head": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "branch": {
                                          "$ref": "#/components/schemas/bignum"
                                        }
                                      },
                                      "required": [
                                        "head",
                                        "branch"
                                      ]
                                    },
                                    "received": {
                                      "type": "object",
                                      "properties": {
                                        "head": {
                                          "$ref": "#/components/schemas/bignum"
                                        },
                                        "branch": {
                                          "$ref": "#/components/schemas/bignum"
                                        }
                                      },
                                      "required": [
                                        "head",
                                        "branch"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "sent",
                                    "received"
                                  ]
                                }
                              },
                              "required": [
                                "responses",
                                "requests",
                                "valid_blocks",
                                "old_heads",
                                "prevalidator_results",
                                "unactivated_chains",
                                "inactive_chains",
                                "future_blocks_advertised",
                                "unadvertised",
                                "advertisements"
                              ]
                            },
                            "state": {
                              "$ref": "#/components/schemas/p2p_peer.state"
                            },
                            "reachable_at": {
                              "$ref": "#/components/schemas/p2p_connection.id"
                            },
                            "stat": {
                              "$ref": "#/components/schemas/p2p_stat"
                            },
                            "last_failed_connection": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "$ref": "#/components/schemas/p2p_connection.id"
                                  },
                                  {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                ]
                              }
                            },
                            "last_rejected_connection": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "$ref": "#/components/schemas/p2p_connection.id"
                                  },
                                  {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                ]
                              }
                            },
                            "last_established_connection": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "$ref": "#/components/schemas/p2p_connection.id"
                                  },
                                  {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                ]
                              }
                            },
                            "last_disconnection": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "$ref": "#/components/schemas/p2p_connection.id"
                                  },
                                  {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                ]
                              }
                            },
                            "last_seen": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "$ref": "#/components/schemas/p2p_connection.id"
                                  },
                                  {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                ]
                              }
                            },
                            "last_miss": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "$ref": "#/components/schemas/p2p_connection.id"
                                  },
                                  {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                ]
                              }
                            }
                          },
                          "required": [
                            "score",
                            "trusted",
                            "peer_metadata",
                            "state",
                            "stat"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/peers/{peer_id}": {
      "get": {
        "description": "Details about a given peer.",
        "parameters": [
          {
            "name": "peer_id",
            "in": "path",
            "description": "A cryptographic node identity (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "score": {
                      "type": "integer"
                    },
                    "trusted": {
                      "type": "boolean"
                    },
                    "conn_metadata": {
                      "type": "object",
                      "properties": {
                        "disable_mempool": {
                          "type": "boolean"
                        },
                        "private_node": {
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "disable_mempool",
                        "private_node"
                      ]
                    },
                    "peer_metadata": {
                      "type": "object",
                      "properties": {
                        "responses": {
                          "type": "object",
                          "properties": {
                            "sent": {
                              "type": "object",
                              "properties": {
                                "branch": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "head": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "block_header": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operations": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "protocols": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operation_hashes_for_block": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operations_for_block": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "other": {
                                  "$ref": "#/components/schemas/bignum"
                                }
                              },
                              "required": [
                                "branch",
                                "head",
                                "block_header",
                                "operations",
                                "protocols",
                                "operation_hashes_for_block",
                                "operations_for_block",
                                "other"
                              ]
                            },
                            "failed": {
                              "type": "object",
                              "properties": {
                                "branch": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "head": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "block_header": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operations": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "protocols": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operation_hashes_for_block": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operations_for_block": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "other": {
                                  "$ref": "#/components/schemas/bignum"
                                }
                              },
                              "required": [
                                "branch",
                                "head",
                                "block_header",
                                "operations",
                                "protocols",
                                "operation_hashes_for_block",
                                "operations_for_block",
                                "other"
                              ]
                            },
                            "received": {
                              "type": "object",
                              "properties": {
                                "branch": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "head": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "block_header": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operations": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "protocols": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operation_hashes_for_block": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operations_for_block": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "other": {
                                  "$ref": "#/components/schemas/bignum"
                                }
                              },
                              "required": [
                                "branch",
                                "head",
                                "block_header",
                                "operations",
                                "protocols",
                                "operation_hashes_for_block",
                                "operations_for_block",
                                "other"
                              ]
                            },
                            "unexpected": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "outdated": {
                              "$ref": "#/components/schemas/bignum"
                            }
                          },
                          "required": [
                            "sent",
                            "failed",
                            "received",
                            "unexpected",
                            "outdated"
                          ]
                        },
                        "requests": {
                          "type": "object",
                          "properties": {
                            "sent": {
                              "type": "object",
                              "properties": {
                                "branch": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "head": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "block_header": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operations": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "protocols": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operation_hashes_for_block": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operations_for_block": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "other": {
                                  "$ref": "#/components/schemas/bignum"
                                }
                              },
                              "required": [
                                "branch",
                                "head",
                                "block_header",
                                "operations",
                                "protocols",
                                "operation_hashes_for_block",
                                "operations_for_block",
                                "other"
                              ]
                            },
                            "received": {
                              "type": "object",
                              "properties": {
                                "branch": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "head": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "block_header": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operations": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "protocols": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operation_hashes_for_block": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operations_for_block": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "other": {
                                  "$ref": "#/components/schemas/bignum"
                                }
                              },
                              "required": [
                                "branch",
                                "head",
                                "block_header",
                                "operations",
                                "protocols",
                                "operation_hashes_for_block",
                                "operations_for_block",
                                "other"
                              ]
                            },
                            "failed": {
                              "type": "object",
                              "properties": {
                                "branch": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "head": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "block_header": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operations": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "protocols": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operation_hashes_for_block": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operations_for_block": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "other": {
                                  "$ref": "#/components/schemas/bignum"
                                }
                              },
                              "required": [
                                "branch",
                                "head",
                                "block_header",
                                "operations",
                                "protocols",
                                "operation_hashes_for_block",
                                "operations_for_block",
                                "other"
                              ]
                            },
                            "scheduled": {
                              "type": "object",
                              "properties": {
                                "branch": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "head": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "block_header": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operations": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "protocols": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operation_hashes_for_block": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "operations_for_block": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "other": {
                                  "$ref": "#/components/schemas/bignum"
                                }
                              },
                              "required": [
                                "branch",
                                "head",
                                "block_header",
                                "operations",
                                "protocols",
                                "operation_hashes_for_block",
                                "operations_for_block",
                                "other"
                              ]
                            }
                          },
                          "required": [
                            "sent",
                            "received",
                            "failed",
                            "scheduled"
                          ]
                        },
                        "valid_blocks": {
                          "$ref": "#/components/schemas/bignum"
                        },
                        "old_heads": {
                          "$ref": "#/components/schemas/bignum"
                        },
                        "prevalidator_results": {
                          "type": "object",
                          "properties": {
                            "cannot_download": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "cannot_parse": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "refused_by_prefilter": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "refused_by_postfilter": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "applied": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "branch_delayed": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "branch_refused": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "refused": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "duplicate": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "outdated": {
                              "$ref": "#/components/schemas/bignum"
                            }
                          },
                          "required": [
                            "cannot_download",
                            "cannot_parse",
                            "refused_by_prefilter",
                            "refused_by_postfilter",
                            "applied",
                            "branch_delayed",
                            "branch_refused",
                            "refused",
                            "duplicate",
                            "outdated"
                          ]
                        },
                        "unactivated_chains": {
                          "$ref": "#/components/schemas/bignum"
                        },
                        "inactive_chains": {
                          "$ref": "#/components/schemas/bignum"
                        },
                        "future_blocks_advertised": {
                          "$ref": "#/components/schemas/bignum"
                        },
                        "unadvertised": {
                          "type": "object",
                          "properties": {
                            "block": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "operations": {
                              "$ref": "#/components/schemas/bignum"
                            },
                            "protocol": {
                              "$ref": "#/components/schemas/bignum"
                            }
                          },
                          "required": [
                            "block",
                            "operations",
                            "protocol"
                          ]
                        },
                        "advertisements": {
                          "type": "object",
                          "properties": {
                            "sent": {
                              "type": "object",
                              "properties": {
                                "head": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "branch": {
                                  "$ref": "#/components/schemas/bignum"
                                }
                              },
                              "required": [
                                "head",
                                "branch"
                              ]
                            },
                            "received": {
                              "type": "object",
                              "properties": {
                                "head": {
                                  "$ref": "#/components/schemas/bignum"
                                },
                                "branch": {
                                  "$ref": "#/components/schemas/bignum"
                                }
                              },
                              "required": [
                                "head",
                                "branch"
                              ]
                            }
                          },
                          "required": [
                            "sent",
                            "received"
                          ]
                        }
                      },
                      "required": [
                        "responses",
                        "requests",
                        "valid_blocks",
                        "old_heads",
                        "prevalidator_results",
                        "unactivated_chains",
                        "inactive_chains",
                        "future_blocks_advertised",
                        "unadvertised",
                        "advertisements"
                      ]
                    },
                    "state": {
                      "$ref": "#/components/schemas/p2p_peer.state"
                    },
                    "reachable_at": {
                      "$ref": "#/components/schemas/p2p_connection.id"
                    },
                    "stat": {
                      "$ref": "#/components/schemas/p2p_stat"
                    },
                    "last_failed_connection": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/p2p_connection.id"
                          },
                          {
                            "$ref": "#/components/schemas/timestamp.system"
                          }
                        ]
                      }
                    },
                    "last_rejected_connection": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/p2p_connection.id"
                          },
                          {
                            "$ref": "#/components/schemas/timestamp.system"
                          }
                        ]
                      }
                    },
                    "last_established_connection": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/p2p_connection.id"
                          },
                          {
                            "$ref": "#/components/schemas/timestamp.system"
                          }
                        ]
                      }
                    },
                    "last_disconnection": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/p2p_connection.id"
                          },
                          {
                            "$ref": "#/components/schemas/timestamp.system"
                          }
                        ]
                      }
                    },
                    "last_seen": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/p2p_connection.id"
                          },
                          {
                            "$ref": "#/components/schemas/timestamp.system"
                          }
                        ]
                      }
                    },
                    "last_miss": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/p2p_connection.id"
                          },
                          {
                            "$ref": "#/components/schemas/timestamp.system"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "score",
                    "trusted",
                    "peer_metadata",
                    "state",
                    "stat"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/peers/{peer_id}/ban": {
      "get": {
        "description": "Blacklist the given peer and remove it from the whitelist if present.",
        "parameters": [
          {
            "name": "peer_id",
            "in": "path",
            "description": "A cryptographic node identity (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/peers/{peer_id}/banned": {
      "get": {
        "description": "Check if a given peer is blacklisted or greylisted.",
        "parameters": [
          {
            "name": "peer_id",
            "in": "path",
            "description": "A cryptographic node identity (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/peers/{peer_id}/log": {
      "get": {
        "description": "Monitor network events related to a given peer.",
        "parameters": [
          {
            "name": "peer_id",
            "in": "path",
            "description": "A cryptographic node identity (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/p2p_peer.pool_event"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/peers/{peer_id}/trust": {
      "get": {
        "description": "Whitelist a given peer permanently and remove it from the blacklist if present. The peer cannot be blocked (but its host IP still can).",
        "parameters": [
          {
            "name": "peer_id",
            "in": "path",
            "description": "A cryptographic node identity (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/peers/{peer_id}/unban": {
      "get": {
        "description": "Remove the given peer from the blacklist.",
        "parameters": [
          {
            "name": "peer_id",
            "in": "path",
            "description": "A cryptographic node identity (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/peers/{peer_id}/untrust": {
      "get": {
        "description": "Remove a given peer from the whitelist.",
        "parameters": [
          {
            "name": "peer_id",
            "in": "path",
            "description": "A cryptographic node identity (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/points": {
      "get": {
        "description": "List the pool of known `IP:port` used for establishing P2P connections.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/p2p_point.id"
                        },
                        {
                          "$ref": "#/components/schemas/p2p_point.info"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/points/{point}": {
      "get": {
        "description": "Details about a given `IP:addr`.",
        "parameters": [
          {
            "name": "point",
            "in": "path",
            "description": "A network point (ipv4:port or [ipv6]:port).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/p2p_point.info"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Connect to a peer",
        "parameters": [
          {
            "name": "point",
            "in": "path",
            "description": "A network point (ipv4:port or [ipv6]:port).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/points/{point}/ban": {
      "get": {
        "description": "Blacklist the given address and remove it from the whitelist if present.",
        "parameters": [
          {
            "name": "point",
            "in": "path",
            "description": "A network point (ipv4:port or [ipv6]:port).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/points/{point}/banned": {
      "get": {
        "description": "Check is a given address is blacklisted or greylisted.",
        "parameters": [
          {
            "name": "point",
            "in": "path",
            "description": "A network point (ipv4:port or [ipv6]:port).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/points/{point}/log": {
      "get": {
        "description": "Monitor network events related to an `IP:addr`.",
        "parameters": [
          {
            "name": "point",
            "in": "path",
            "description": "A network point (ipv4:port or [ipv6]:port).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/p2p_point.pool_event"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/points/{point}/trust": {
      "get": {
        "description": "Trust a given address permanently and remove it from the blacklist if present. Connections from this address can still be closed on authentication if the peer is greylisted.",
        "parameters": [
          {
            "name": "point",
            "in": "path",
            "description": "A network point (ipv4:port or [ipv6]:port).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/points/{point}/unban": {
      "get": {
        "description": "Remove an address from the blacklist.",
        "parameters": [
          {
            "name": "point",
            "in": "path",
            "description": "A network point (ipv4:port or [ipv6]:port).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/points/{point}/untrust": {
      "get": {
        "description": "Remove an address from the whitelist.",
        "parameters": [
          {
            "name": "point",
            "in": "path",
            "description": "A network point (ipv4:port or [ipv6]:port).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/self": {
      "get": {
        "description": "Return the node's peer id",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/stat": {
      "get": {
        "description": "Global network bandwidth statistics in B/s.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/p2p_stat"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/version": {
      "get": {
        "description": "DEPRECATED: use `version` instead.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/network_version"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/network/versions": {
      "get": {
        "description": "DEPRECATED: use `version` instead.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/network_version"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/protocols": {
      "get": {
        "description": "(no description)",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Protocol_hash"
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/protocols/{Protocol_hash}": {
      "get": {
        "description": "(no description)",
        "parameters": [
          {
            "name": "Protocol_hash",
            "in": "path",
            "description": "Protocol_hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/protocol"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/protocols/{Protocol_hash}/environment": {
      "get": {
        "description": "(no description)",
        "parameters": [
          {
            "name": "Protocol_hash",
            "in": "path",
            "description": "Protocol_hash (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/protocol.environment_version"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/stats/gc": {
      "get": {
        "description": "Gets stats from the OCaml Garbage Collector",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "minor_words": {
                      "type": "integer"
                    },
                    "promoted_words": {
                      "type": "integer"
                    },
                    "major_words": {
                      "type": "integer"
                    },
                    "minor_collections": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "major_collections": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "heap_words": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "heap_chunks": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "live_words": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "live_blocks": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "free_words": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "free_blocks": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "largest_free": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "fragments": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "compactions": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "top_heap_words": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "stack_size": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    }
                  },
                  "required": [
                    "minor_words",
                    "promoted_words",
                    "major_words",
                    "minor_collections",
                    "major_collections",
                    "heap_words",
                    "heap_chunks",
                    "live_words",
                    "live_blocks",
                    "free_words",
                    "free_blocks",
                    "largest_free",
                    "fragments",
                    "compactions",
                    "top_heap_words",
                    "stack_size"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/stats/memory": {
      "get": {
        "description": "Gets memory usage stats",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Linux_proc_statm",
                      "type": "object",
                      "properties": {
                        "page_size": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "size": {
                          "$ref": "#/components/schemas/int64"
                        },
                        "resident": {
                          "$ref": "#/components/schemas/int64"
                        },
                        "shared": {
                          "$ref": "#/components/schemas/int64"
                        },
                        "text": {
                          "$ref": "#/components/schemas/int64"
                        },
                        "lib": {
                          "$ref": "#/components/schemas/int64"
                        },
                        "data": {
                          "$ref": "#/components/schemas/int64"
                        },
                        "dt": {
                          "$ref": "#/components/schemas/int64"
                        }
                      },
                      "required": [
                        "page_size",
                        "size",
                        "resident",
                        "shared",
                        "text",
                        "lib",
                        "data",
                        "dt"
                      ]
                    },
                    {
                      "title": "Darwin_ps",
                      "type": "object",
                      "properties": {
                        "page_size": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "mem": {
                          "type": "integer"
                        },
                        "resident": {
                          "$ref": "#/components/schemas/int64"
                        }
                      },
                      "required": [
                        "page_size",
                        "mem",
                        "resident"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "Get information on the node version",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "object",
                      "properties": {
                        "major": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "minor": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "additional_info": {
                          "oneOf": [
                            {
                              "title": "Dev",
                              "type": "string",
                              "enum": [
                                "dev"
                              ]
                            },
                            {
                              "title": "RC",
                              "type": "object",
                              "properties": {
                                "rc": {
                                  "type": "integer",
                                  "minimum": -1073741824,
                                  "maximum": 1073741823
                                }
                              },
                              "required": [
                                "rc"
                              ]
                            },
                            {
                              "title": "Release",
                              "type": "string",
                              "enum": [
                                "release"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "major",
                        "minor",
                        "additional_info"
                      ]
                    },
                    "network_version": {
                      "$ref": "#/components/schemas/network_version"
                    },
                    "commit_info": {
                      "nullable": true,
                      "oneOf": [
                        {
                          "title": "Some",
                          "type": "object",
                          "properties": {
                            "commit_hash": {
                              "$ref": "#/components/schemas/unistring"
                            },
                            "commit_date": {
                              "$ref": "#/components/schemas/unistring"
                            }
                          },
                          "required": [
                            "commit_hash",
                            "commit_date"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "version",
                    "network_version",
                    "commit_info"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/workers/block_validator": {
      "get": {
        "description": "Introspect the state of the block_validator worker.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "oneOf": [
                        {
                          "title": "Launching",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "launching"
                              ]
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            }
                          },
                          "required": [
                            "phase",
                            "since"
                          ]
                        },
                        {
                          "title": "Running",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "running"
                              ]
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            }
                          },
                          "required": [
                            "phase",
                            "since"
                          ]
                        },
                        {
                          "title": "Closing",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "closing"
                              ]
                            },
                            "birth": {
                              "$ref": "#/components/schemas/timestamp.system"
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            }
                          },
                          "required": [
                            "phase",
                            "birth",
                            "since"
                          ]
                        },
                        {
                          "title": "Closed",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "closed"
                              ]
                            },
                            "birth": {
                              "$ref": "#/components/schemas/timestamp.system"
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            }
                          },
                          "required": [
                            "phase",
                            "birth",
                            "since"
                          ]
                        },
                        {
                          "title": "Crashed",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "crashed"
                              ]
                            },
                            "birth": {
                              "$ref": "#/components/schemas/timestamp.system"
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            },
                            "errors": {
                              "$ref": "#/components/schemas/error"
                            }
                          },
                          "required": [
                            "phase",
                            "birth",
                            "since",
                            "errors"
                          ]
                        }
                      ]
                    },
                    "pending_requests": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "pushed": {
                            "$ref": "#/components/schemas/timestamp.system"
                          },
                          "request": {
                            "type": "object",
                            "properties": {
                              "block": {
                                "$ref": "#/components/schemas/block_hash"
                              },
                              "chain_id": {
                                "$ref": "#/components/schemas/Chain_id"
                              },
                              "peer": {
                                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                              }
                            },
                            "required": [
                              "block",
                              "chain_id"
                            ]
                          }
                        },
                        "required": [
                          "pushed",
                          "request"
                        ]
                      }
                    },
                    "backlog": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "level": {
                            "type": "string",
                            "enum": [
                              "info",
                              "debug",
                              "error",
                              "fatal",
                              "warning",
                              "notice"
                            ]
                          },
                          "events": {
                            "type": "array",
                            "items": {
                              "oneOf": [
                                {
                                  "title": "Debug",
                                  "type": "object",
                                  "properties": {
                                    "message": {
                                      "$ref": "#/components/schemas/unistring"
                                    }
                                  },
                                  "required": [
                                    "message"
                                  ]
                                },
                                {
                                  "title": "Validation_success",
                                  "type": "object",
                                  "properties": {
                                    "successful_validation": {
                                      "type": "object",
                                      "properties": {
                                        "block": {
                                          "$ref": "#/components/schemas/block_hash"
                                        },
                                        "chain_id": {
                                          "$ref": "#/components/schemas/Chain_id"
                                        },
                                        "peer": {
                                          "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                                        }
                                      },
                                      "required": [
                                        "block",
                                        "chain_id"
                                      ]
                                    },
                                    "status": {
                                      "type": "object",
                                      "properties": {
                                        "pushed": {
                                          "$ref": "#/components/schemas/timestamp.system"
                                        },
                                        "treated": {
                                          "$ref": "#/components/schemas/timespan.system"
                                        },
                                        "completed": {
                                          "$ref": "#/components/schemas/timespan.system"
                                        }
                                      },
                                      "required": [
                                        "pushed",
                                        "treated",
                                        "completed"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "successful_validation",
                                    "status"
                                  ]
                                },
                                {
                                  "title": "Validation_failure",
                                  "type": "object",
                                  "properties": {
                                    "failed_validation": {
                                      "type": "object",
                                      "properties": {
                                        "block": {
                                          "$ref": "#/components/schemas/block_hash"
                                        },
                                        "chain_id": {
                                          "$ref": "#/components/schemas/Chain_id"
                                        },
                                        "peer": {
                                          "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                                        }
                                      },
                                      "required": [
                                        "block",
                                        "chain_id"
                                      ]
                                    },
                                    "status": {
                                      "type": "object",
                                      "properties": {
                                        "pushed": {
                                          "$ref": "#/components/schemas/timestamp.system"
                                        },
                                        "treated": {
                                          "$ref": "#/components/schemas/timespan.system"
                                        },
                                        "completed": {
                                          "$ref": "#/components/schemas/timespan.system"
                                        }
                                      },
                                      "required": [
                                        "pushed",
                                        "treated",
                                        "completed"
                                      ]
                                    },
                                    "errors": {
                                      "$ref": "#/components/schemas/error"
                                    }
                                  },
                                  "required": [
                                    "failed_validation",
                                    "status"
                                  ]
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "level",
                          "events"
                        ]
                      }
                    },
                    "current_request": {
                      "type": "object",
                      "properties": {
                        "pushed": {
                          "$ref": "#/components/schemas/timestamp.system"
                        },
                        "treated": {
                          "$ref": "#/components/schemas/timestamp.system"
                        },
                        "request": {
                          "type": "object",
                          "properties": {
                            "block": {
                              "$ref": "#/components/schemas/block_hash"
                            },
                            "chain_id": {
                              "$ref": "#/components/schemas/Chain_id"
                            },
                            "peer": {
                              "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                            }
                          },
                          "required": [
                            "block",
                            "chain_id"
                          ]
                        }
                      },
                      "required": [
                        "pushed",
                        "treated",
                        "request"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "pending_requests",
                    "backlog"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/workers/chain_validators": {
      "get": {
        "description": "Lists the chain validator workers and their status.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "chain_id": {
                        "$ref": "#/components/schemas/Chain_id"
                      },
                      "status": {
                        "oneOf": [
                          {
                            "title": "Launching",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "launching"
                                ]
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              }
                            },
                            "required": [
                              "phase",
                              "since"
                            ]
                          },
                          {
                            "title": "Running",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "running"
                                ]
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              }
                            },
                            "required": [
                              "phase",
                              "since"
                            ]
                          },
                          {
                            "title": "Closing",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "closing"
                                ]
                              },
                              "birth": {
                                "$ref": "#/components/schemas/timestamp.system"
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              }
                            },
                            "required": [
                              "phase",
                              "birth",
                              "since"
                            ]
                          },
                          {
                            "title": "Closed",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "closed"
                                ]
                              },
                              "birth": {
                                "$ref": "#/components/schemas/timestamp.system"
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              }
                            },
                            "required": [
                              "phase",
                              "birth",
                              "since"
                            ]
                          },
                          {
                            "title": "Crashed",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "crashed"
                                ]
                              },
                              "birth": {
                                "$ref": "#/components/schemas/timestamp.system"
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              },
                              "errors": {
                                "$ref": "#/components/schemas/error"
                              }
                            },
                            "required": [
                              "phase",
                              "birth",
                              "since",
                              "errors"
                            ]
                          }
                        ]
                      },
                      "information": {
                        "type": "object",
                        "properties": {
                          "instances": {
                            "type": "integer",
                            "minimum": -1073741824,
                            "maximum": 1073741823
                          },
                          "status": {
                            "oneOf": [
                              {
                                "title": "Launching",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "launching"
                                    ]
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "since"
                                ]
                              },
                              {
                                "title": "Running",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "running"
                                    ]
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "since"
                                ]
                              },
                              {
                                "title": "Closing",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "closing"
                                    ]
                                  },
                                  "birth": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "birth",
                                  "since"
                                ]
                              },
                              {
                                "title": "Closed",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "closed"
                                    ]
                                  },
                                  "birth": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "birth",
                                  "since"
                                ]
                              },
                              {
                                "title": "Crashed",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "crashed"
                                    ]
                                  },
                                  "birth": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  },
                                  "errors": {
                                    "$ref": "#/components/schemas/error"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "birth",
                                  "since",
                                  "errors"
                                ]
                              }
                            ]
                          },
                          "queue_length": {
                            "type": "integer",
                            "minimum": -1073741824,
                            "maximum": 1073741823
                          }
                        },
                        "required": [
                          "instances",
                          "status",
                          "queue_length"
                        ]
                      },
                      "pipelines": {
                        "type": "integer",
                        "minimum": -32768,
                        "maximum": 32767
                      }
                    },
                    "required": [
                      "chain_id",
                      "status",
                      "information",
                      "pipelines"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/workers/chain_validators/{chain_id}": {
      "get": {
        "description": "Introspect the state of a chain validator worker.",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "oneOf": [
                        {
                          "title": "Launching",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "launching"
                              ]
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            }
                          },
                          "required": [
                            "phase",
                            "since"
                          ]
                        },
                        {
                          "title": "Running",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "running"
                              ]
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            }
                          },
                          "required": [
                            "phase",
                            "since"
                          ]
                        },
                        {
                          "title": "Closing",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "closing"
                              ]
                            },
                            "birth": {
                              "$ref": "#/components/schemas/timestamp.system"
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            }
                          },
                          "required": [
                            "phase",
                            "birth",
                            "since"
                          ]
                        },
                        {
                          "title": "Closed",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "closed"
                              ]
                            },
                            "birth": {
                              "$ref": "#/components/schemas/timestamp.system"
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            }
                          },
                          "required": [
                            "phase",
                            "birth",
                            "since"
                          ]
                        },
                        {
                          "title": "Crashed",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "crashed"
                              ]
                            },
                            "birth": {
                              "$ref": "#/components/schemas/timestamp.system"
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            },
                            "errors": {
                              "$ref": "#/components/schemas/error"
                            }
                          },
                          "required": [
                            "phase",
                            "birth",
                            "since",
                            "errors"
                          ]
                        }
                      ]
                    },
                    "pending_requests": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "pushed": {
                            "$ref": "#/components/schemas/timestamp.system"
                          },
                          "request": {
                            "$ref": "#/components/schemas/block_hash"
                          }
                        },
                        "required": [
                          "pushed",
                          "request"
                        ]
                      }
                    },
                    "backlog": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "level": {
                            "type": "string",
                            "enum": [
                              "info",
                              "debug",
                              "error",
                              "fatal",
                              "warning",
                              "notice"
                            ]
                          },
                          "events": {
                            "type": "array",
                            "items": {
                              "oneOf": [
                                {
                                  "title": "Processed_block",
                                  "type": "object",
                                  "properties": {
                                    "request": {
                                      "$ref": "#/components/schemas/block_hash"
                                    },
                                    "status": {
                                      "type": "object",
                                      "properties": {
                                        "pushed": {
                                          "$ref": "#/components/schemas/timestamp.system"
                                        },
                                        "treated": {
                                          "$ref": "#/components/schemas/timespan.system"
                                        },
                                        "completed": {
                                          "$ref": "#/components/schemas/timespan.system"
                                        }
                                      },
                                      "required": [
                                        "pushed",
                                        "treated",
                                        "completed"
                                      ]
                                    },
                                    "outcome": {
                                      "type": "string",
                                      "enum": [
                                        "branch",
                                        "ignored",
                                        "increment"
                                      ]
                                    },
                                    "fitness": {
                                      "$ref": "#/components/schemas/fitness"
                                    },
                                    "level": {
                                      "type": "integer",
                                      "minimum": -2147483648,
                                      "maximum": 2147483647
                                    },
                                    "timestamp": {
                                      "$ref": "#/components/schemas/timestamp.protocol"
                                    }
                                  },
                                  "required": [
                                    "request",
                                    "status",
                                    "outcome",
                                    "fitness",
                                    "level",
                                    "timestamp"
                                  ]
                                },
                                {
                                  "title": "Could_not_switch_testchain",
                                  "oneOf": [
                                    {
                                      "$ref": "#/components/schemas/error"
                                    }
                                  ]
                                },
                                {
                                  "title": "Bootstrapped"
                                },
                                {
                                  "title": "Sync_status",
                                  "oneOf": [
                                    {
                                      "$ref": "#/components/schemas/chain_status"
                                    }
                                  ]
                                },
                                {
                                  "title": "Bootstrap_active_peers",
                                  "type": "object",
                                  "properties": {
                                    "active": {
                                      "type": "integer",
                                      "minimum": -1073741824,
                                      "maximum": 1073741823
                                    },
                                    "needed": {
                                      "type": "integer",
                                      "minimum": -1073741824,
                                      "maximum": 1073741823
                                    }
                                  },
                                  "required": [
                                    "active",
                                    "needed"
                                  ]
                                },
                                {
                                  "title": "Bootstrap_active_peers_heads_time",
                                  "type": "object",
                                  "properties": {
                                    "min_head_time": {
                                      "$ref": "#/components/schemas/timestamp.protocol"
                                    },
                                    "max_head_time": {
                                      "$ref": "#/components/schemas/timestamp.protocol"
                                    },
                                    "most_recent_validation": {
                                      "$ref": "#/components/schemas/timestamp.protocol"
                                    }
                                  },
                                  "required": [
                                    "min_head_time",
                                    "max_head_time",
                                    "most_recent_validation"
                                  ]
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "level",
                          "events"
                        ]
                      }
                    },
                    "current_request": {
                      "type": "object",
                      "properties": {
                        "pushed": {
                          "$ref": "#/components/schemas/timestamp.system"
                        },
                        "treated": {
                          "$ref": "#/components/schemas/timestamp.system"
                        },
                        "request": {
                          "$ref": "#/components/schemas/block_hash"
                        }
                      },
                      "required": [
                        "pushed",
                        "treated",
                        "request"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "pending_requests",
                    "backlog"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/workers/chain_validators/{chain_id}/ddb": {
      "get": {
        "description": "Introspect the state of the DDB attached to a chain validator worker.",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "p2p_readers": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "active_chains": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "operation_db": {
                      "type": "object",
                      "properties": {
                        "table_length": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "scheduler_length": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        }
                      },
                      "required": [
                        "table_length",
                        "scheduler_length"
                      ]
                    },
                    "operations_db": {
                      "type": "object",
                      "properties": {
                        "table_length": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "scheduler_length": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        }
                      },
                      "required": [
                        "table_length",
                        "scheduler_length"
                      ]
                    },
                    "block_header_db": {
                      "type": "object",
                      "properties": {
                        "table_length": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        },
                        "scheduler_length": {
                          "type": "integer",
                          "minimum": -1073741824,
                          "maximum": 1073741823
                        }
                      },
                      "required": [
                        "table_length",
                        "scheduler_length"
                      ]
                    },
                    "active_connections": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    },
                    "active_peers": {
                      "type": "integer",
                      "minimum": -1073741824,
                      "maximum": 1073741823
                    }
                  },
                  "required": [
                    "p2p_readers",
                    "active_chains",
                    "operation_db",
                    "operations_db",
                    "block_header_db",
                    "active_connections",
                    "active_peers"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/workers/chain_validators/{chain_id}/peers_validators": {
      "get": {
        "description": "Lists the peer validator workers and their status.",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "peer_id": {
                        "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                      },
                      "status": {
                        "oneOf": [
                          {
                            "title": "Launching",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "launching"
                                ]
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              }
                            },
                            "required": [
                              "phase",
                              "since"
                            ]
                          },
                          {
                            "title": "Running",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "running"
                                ]
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              }
                            },
                            "required": [
                              "phase",
                              "since"
                            ]
                          },
                          {
                            "title": "Closing",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "closing"
                                ]
                              },
                              "birth": {
                                "$ref": "#/components/schemas/timestamp.system"
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              }
                            },
                            "required": [
                              "phase",
                              "birth",
                              "since"
                            ]
                          },
                          {
                            "title": "Closed",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "closed"
                                ]
                              },
                              "birth": {
                                "$ref": "#/components/schemas/timestamp.system"
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              }
                            },
                            "required": [
                              "phase",
                              "birth",
                              "since"
                            ]
                          },
                          {
                            "title": "Crashed",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "crashed"
                                ]
                              },
                              "birth": {
                                "$ref": "#/components/schemas/timestamp.system"
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              },
                              "errors": {
                                "$ref": "#/components/schemas/error"
                              }
                            },
                            "required": [
                              "phase",
                              "birth",
                              "since",
                              "errors"
                            ]
                          }
                        ]
                      },
                      "information": {
                        "type": "object",
                        "properties": {
                          "instances": {
                            "type": "integer",
                            "minimum": -1073741824,
                            "maximum": 1073741823
                          },
                          "status": {
                            "oneOf": [
                              {
                                "title": "Launching",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "launching"
                                    ]
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "since"
                                ]
                              },
                              {
                                "title": "Running",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "running"
                                    ]
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "since"
                                ]
                              },
                              {
                                "title": "Closing",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "closing"
                                    ]
                                  },
                                  "birth": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "birth",
                                  "since"
                                ]
                              },
                              {
                                "title": "Closed",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "closed"
                                    ]
                                  },
                                  "birth": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "birth",
                                  "since"
                                ]
                              },
                              {
                                "title": "Crashed",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "crashed"
                                    ]
                                  },
                                  "birth": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  },
                                  "errors": {
                                    "$ref": "#/components/schemas/error"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "birth",
                                  "since",
                                  "errors"
                                ]
                              }
                            ]
                          },
                          "queue_length": {
                            "type": "integer",
                            "minimum": -1073741824,
                            "maximum": 1073741823
                          }
                        },
                        "required": [
                          "instances",
                          "status",
                          "queue_length"
                        ]
                      },
                      "pipelines": {
                        "type": "object",
                        "properties": {
                          "fetched_headers": {
                            "type": "integer",
                            "minimum": -1073741824,
                            "maximum": 1073741823
                          },
                          "fetched_blocks": {
                            "type": "integer",
                            "minimum": -1073741824,
                            "maximum": 1073741823
                          }
                        },
                        "required": [
                          "fetched_headers",
                          "fetched_blocks"
                        ]
                      }
                    },
                    "required": [
                      "peer_id",
                      "status",
                      "information",
                      "pipelines"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/workers/chain_validators/{chain_id}/peers_validators/{peer_id}": {
      "get": {
        "description": "Introspect the state of a peer validator worker.",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "peer_id",
            "in": "path",
            "description": "A cryptographic node identity (Base58Check-encoded)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "oneOf": [
                        {
                          "title": "Launching",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "launching"
                              ]
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            }
                          },
                          "required": [
                            "phase",
                            "since"
                          ]
                        },
                        {
                          "title": "Running",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "running"
                              ]
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            }
                          },
                          "required": [
                            "phase",
                            "since"
                          ]
                        },
                        {
                          "title": "Closing",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "closing"
                              ]
                            },
                            "birth": {
                              "$ref": "#/components/schemas/timestamp.system"
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            }
                          },
                          "required": [
                            "phase",
                            "birth",
                            "since"
                          ]
                        },
                        {
                          "title": "Closed",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "closed"
                              ]
                            },
                            "birth": {
                              "$ref": "#/components/schemas/timestamp.system"
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            }
                          },
                          "required": [
                            "phase",
                            "birth",
                            "since"
                          ]
                        },
                        {
                          "title": "Crashed",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "crashed"
                              ]
                            },
                            "birth": {
                              "$ref": "#/components/schemas/timestamp.system"
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            },
                            "errors": {
                              "$ref": "#/components/schemas/error"
                            }
                          },
                          "required": [
                            "phase",
                            "birth",
                            "since",
                            "errors"
                          ]
                        }
                      ]
                    },
                    "pending_requests": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "pushed": {
                            "$ref": "#/components/schemas/timestamp.system"
                          },
                          "request": {
                            "oneOf": [
                              {
                                "title": "New_head",
                                "type": "object",
                                "properties": {
                                  "request": {
                                    "type": "string",
                                    "enum": [
                                      "new_head"
                                    ]
                                  },
                                  "block": {
                                    "$ref": "#/components/schemas/block_hash"
                                  }
                                },
                                "required": [
                                  "request",
                                  "block"
                                ]
                              },
                              {
                                "title": "New_branch",
                                "type": "object",
                                "properties": {
                                  "request": {
                                    "type": "string",
                                    "enum": [
                                      "new_branch"
                                    ]
                                  },
                                  "block": {
                                    "$ref": "#/components/schemas/block_hash"
                                  },
                                  "locators": {
                                    "type": "integer",
                                    "minimum": -1073741824,
                                    "maximum": 1073741823
                                  }
                                },
                                "required": [
                                  "request",
                                  "block",
                                  "locators"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "pushed",
                          "request"
                        ]
                      }
                    },
                    "backlog": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "level": {
                            "type": "string",
                            "enum": [
                              "info",
                              "debug",
                              "error",
                              "fatal",
                              "warning",
                              "notice"
                            ]
                          },
                          "events": {
                            "type": "array",
                            "items": {
                              "oneOf": [
                                {
                                  "title": "Debug",
                                  "type": "object",
                                  "properties": {
                                    "message": {
                                      "$ref": "#/components/schemas/unistring"
                                    }
                                  },
                                  "required": [
                                    "message"
                                  ]
                                },
                                {
                                  "title": "Request",
                                  "type": "object",
                                  "properties": {
                                    "request": {
                                      "oneOf": [
                                        {
                                          "title": "New_head",
                                          "type": "object",
                                          "properties": {
                                            "request": {
                                              "type": "string",
                                              "enum": [
                                                "new_head"
                                              ]
                                            },
                                            "block": {
                                              "$ref": "#/components/schemas/block_hash"
                                            }
                                          },
                                          "required": [
                                            "request",
                                            "block"
                                          ]
                                        },
                                        {
                                          "title": "New_branch",
                                          "type": "object",
                                          "properties": {
                                            "request": {
                                              "type": "string",
                                              "enum": [
                                                "new_branch"
                                              ]
                                            },
                                            "block": {
                                              "$ref": "#/components/schemas/block_hash"
                                            },
                                            "locators": {
                                              "type": "integer",
                                              "minimum": -1073741824,
                                              "maximum": 1073741823
                                            }
                                          },
                                          "required": [
                                            "request",
                                            "block",
                                            "locators"
                                          ]
                                        }
                                      ]
                                    },
                                    "status": {
                                      "type": "object",
                                      "properties": {
                                        "pushed": {
                                          "$ref": "#/components/schemas/timestamp.system"
                                        },
                                        "treated": {
                                          "$ref": "#/components/schemas/timespan.system"
                                        },
                                        "completed": {
                                          "$ref": "#/components/schemas/timespan.system"
                                        }
                                      },
                                      "required": [
                                        "pushed",
                                        "treated",
                                        "completed"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "request",
                                    "status"
                                  ]
                                },
                                {
                                  "title": "Failed request",
                                  "type": "object",
                                  "properties": {
                                    "error": {
                                      "$ref": "#/components/schemas/error"
                                    },
                                    "failed_request": {
                                      "oneOf": [
                                        {
                                          "title": "New_head",
                                          "type": "object",
                                          "properties": {
                                            "request": {
                                              "type": "string",
                                              "enum": [
                                                "new_head"
                                              ]
                                            },
                                            "block": {
                                              "$ref": "#/components/schemas/block_hash"
                                            }
                                          },
                                          "required": [
                                            "request",
                                            "block"
                                          ]
                                        },
                                        {
                                          "title": "New_branch",
                                          "type": "object",
                                          "properties": {
                                            "request": {
                                              "type": "string",
                                              "enum": [
                                                "new_branch"
                                              ]
                                            },
                                            "block": {
                                              "$ref": "#/components/schemas/block_hash"
                                            },
                                            "locators": {
                                              "type": "integer",
                                              "minimum": -1073741824,
                                              "maximum": 1073741823
                                            }
                                          },
                                          "required": [
                                            "request",
                                            "block",
                                            "locators"
                                          ]
                                        }
                                      ]
                                    },
                                    "status": {
                                      "type": "object",
                                      "properties": {
                                        "pushed": {
                                          "$ref": "#/components/schemas/timestamp.system"
                                        },
                                        "treated": {
                                          "$ref": "#/components/schemas/timespan.system"
                                        },
                                        "completed": {
                                          "$ref": "#/components/schemas/timespan.system"
                                        }
                                      },
                                      "required": [
                                        "pushed",
                                        "treated",
                                        "completed"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "error",
                                    "failed_request",
                                    "status"
                                  ]
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "level",
                          "events"
                        ]
                      }
                    },
                    "current_request": {
                      "type": "object",
                      "properties": {
                        "pushed": {
                          "$ref": "#/components/schemas/timestamp.system"
                        },
                        "treated": {
                          "$ref": "#/components/schemas/timestamp.system"
                        },
                        "request": {
                          "oneOf": [
                            {
                              "title": "New_head",
                              "type": "object",
                              "properties": {
                                "request": {
                                  "type": "string",
                                  "enum": [
                                    "new_head"
                                  ]
                                },
                                "block": {
                                  "$ref": "#/components/schemas/block_hash"
                                }
                              },
                              "required": [
                                "request",
                                "block"
                              ]
                            },
                            {
                              "title": "New_branch",
                              "type": "object",
                              "properties": {
                                "request": {
                                  "type": "string",
                                  "enum": [
                                    "new_branch"
                                  ]
                                },
                                "block": {
                                  "$ref": "#/components/schemas/block_hash"
                                },
                                "locators": {
                                  "type": "integer",
                                  "minimum": -1073741824,
                                  "maximum": 1073741823
                                }
                              },
                              "required": [
                                "request",
                                "block",
                                "locators"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "pushed",
                        "treated",
                        "request"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "pending_requests",
                    "backlog"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/workers/prevalidators": {
      "get": {
        "description": "Lists the Prevalidator workers and their status.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "chain_id": {
                        "$ref": "#/components/schemas/Chain_id"
                      },
                      "status": {
                        "oneOf": [
                          {
                            "title": "Launching",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "launching"
                                ]
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              }
                            },
                            "required": [
                              "phase",
                              "since"
                            ]
                          },
                          {
                            "title": "Running",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "running"
                                ]
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              }
                            },
                            "required": [
                              "phase",
                              "since"
                            ]
                          },
                          {
                            "title": "Closing",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "closing"
                                ]
                              },
                              "birth": {
                                "$ref": "#/components/schemas/timestamp.system"
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              }
                            },
                            "required": [
                              "phase",
                              "birth",
                              "since"
                            ]
                          },
                          {
                            "title": "Closed",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "closed"
                                ]
                              },
                              "birth": {
                                "$ref": "#/components/schemas/timestamp.system"
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              }
                            },
                            "required": [
                              "phase",
                              "birth",
                              "since"
                            ]
                          },
                          {
                            "title": "Crashed",
                            "type": "object",
                            "properties": {
                              "phase": {
                                "type": "string",
                                "enum": [
                                  "crashed"
                                ]
                              },
                              "birth": {
                                "$ref": "#/components/schemas/timestamp.system"
                              },
                              "since": {
                                "$ref": "#/components/schemas/timestamp.system"
                              },
                              "errors": {
                                "$ref": "#/components/schemas/error"
                              }
                            },
                            "required": [
                              "phase",
                              "birth",
                              "since",
                              "errors"
                            ]
                          }
                        ]
                      },
                      "information": {
                        "type": "object",
                        "properties": {
                          "instances": {
                            "type": "integer",
                            "minimum": -1073741824,
                            "maximum": 1073741823
                          },
                          "status": {
                            "oneOf": [
                              {
                                "title": "Launching",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "launching"
                                    ]
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "since"
                                ]
                              },
                              {
                                "title": "Running",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "running"
                                    ]
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "since"
                                ]
                              },
                              {
                                "title": "Closing",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "closing"
                                    ]
                                  },
                                  "birth": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "birth",
                                  "since"
                                ]
                              },
                              {
                                "title": "Closed",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "closed"
                                    ]
                                  },
                                  "birth": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "birth",
                                  "since"
                                ]
                              },
                              {
                                "title": "Crashed",
                                "type": "object",
                                "properties": {
                                  "phase": {
                                    "type": "string",
                                    "enum": [
                                      "crashed"
                                    ]
                                  },
                                  "birth": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  },
                                  "since": {
                                    "$ref": "#/components/schemas/timestamp.system"
                                  },
                                  "errors": {
                                    "$ref": "#/components/schemas/error"
                                  }
                                },
                                "required": [
                                  "phase",
                                  "birth",
                                  "since",
                                  "errors"
                                ]
                              }
                            ]
                          },
                          "queue_length": {
                            "type": "integer",
                            "minimum": -1073741824,
                            "maximum": 1073741823
                          }
                        },
                        "required": [
                          "instances",
                          "status",
                          "queue_length"
                        ]
                      },
                      "pipelines": {
                        "type": "integer",
                        "minimum": -32768,
                        "maximum": 32767
                      }
                    },
                    "required": [
                      "chain_id",
                      "status",
                      "information",
                      "pipelines"
                    ]
                  }
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/workers/prevalidators/{chain_id}": {
      "get": {
        "description": "Introspect the state of prevalidator workers.",
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "description": "A chain identifier. This is either a chain hash in Base58Check notation or a one the predefined aliases: 'main', 'test'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "oneOf": [
                        {
                          "title": "Launching",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "launching"
                              ]
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            }
                          },
                          "required": [
                            "phase",
                            "since"
                          ]
                        },
                        {
                          "title": "Running",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "running"
                              ]
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            }
                          },
                          "required": [
                            "phase",
                            "since"
                          ]
                        },
                        {
                          "title": "Closing",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "closing"
                              ]
                            },
                            "birth": {
                              "$ref": "#/components/schemas/timestamp.system"
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            }
                          },
                          "required": [
                            "phase",
                            "birth",
                            "since"
                          ]
                        },
                        {
                          "title": "Closed",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "closed"
                              ]
                            },
                            "birth": {
                              "$ref": "#/components/schemas/timestamp.system"
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            }
                          },
                          "required": [
                            "phase",
                            "birth",
                            "since"
                          ]
                        },
                        {
                          "title": "Crashed",
                          "type": "object",
                          "properties": {
                            "phase": {
                              "type": "string",
                              "enum": [
                                "crashed"
                              ]
                            },
                            "birth": {
                              "$ref": "#/components/schemas/timestamp.system"
                            },
                            "since": {
                              "$ref": "#/components/schemas/timestamp.system"
                            },
                            "errors": {
                              "$ref": "#/components/schemas/error"
                            }
                          },
                          "required": [
                            "phase",
                            "birth",
                            "since",
                            "errors"
                          ]
                        }
                      ]
                    },
                    "pending_requests": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "pushed": {
                            "$ref": "#/components/schemas/timestamp.system"
                          },
                          "request": {
                            "oneOf": [
                              {
                                "title": "Flush",
                                "type": "object",
                                "properties": {
                                  "request": {
                                    "type": "string",
                                    "enum": [
                                      "flush"
                                    ]
                                  },
                                  "block": {
                                    "$ref": "#/components/schemas/block_hash"
                                  }
                                },
                                "required": [
                                  "request",
                                  "block"
                                ]
                              },
                              {
                                "title": "Notify",
                                "type": "object",
                                "properties": {
                                  "request": {
                                    "type": "string",
                                    "enum": [
                                      "notify"
                                    ]
                                  },
                                  "peer": {
                                    "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                                  },
                                  "mempool": {
                                    "$ref": "#/components/schemas/mempool"
                                  }
                                },
                                "required": [
                                  "request",
                                  "peer",
                                  "mempool"
                                ]
                              },
                              {
                                "title": "Inject",
                                "type": "object",
                                "properties": {
                                  "request": {
                                    "type": "string",
                                    "enum": [
                                      "inject"
                                    ]
                                  },
                                  "operation": {
                                    "$ref": "#/components/schemas/operation"
                                  }
                                },
                                "required": [
                                  "request",
                                  "operation"
                                ]
                              },
                              {
                                "title": "Arrived",
                                "type": "object",
                                "properties": {
                                  "request": {
                                    "type": "string",
                                    "enum": [
                                      "arrived"
                                    ]
                                  },
                                  "operation_hash": {
                                    "$ref": "#/components/schemas/Operation_hash"
                                  },
                                  "operation": {
                                    "$ref": "#/components/schemas/operation"
                                  }
                                },
                                "required": [
                                  "request",
                                  "operation_hash",
                                  "operation"
                                ]
                              },
                              {
                                "title": "Advertise",
                                "type": "object",
                                "properties": {
                                  "request": {
                                    "type": "string",
                                    "enum": [
                                      "advertise"
                                    ]
                                  }
                                },
                                "required": [
                                  "request"
                                ]
                              },
                              {
                                "title": "Leftover",
                                "type": "object",
                                "properties": {
                                  "request": {
                                    "type": "string",
                                    "enum": [
                                      "leftover"
                                    ]
                                  }
                                },
                                "required": [
                                  "request"
                                ]
                              }
                            ]
                          }
                        },
                        "required": [
                          "pushed",
                          "request"
                        ]
                      }
                    },
                    "backlog": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "level": {
                            "type": "string",
                            "enum": [
                              "info",
                              "debug",
                              "error",
                              "fatal",
                              "warning",
                              "notice"
                            ]
                          },
                          "events": {
                            "type": "array",
                            "items": {
                              "oneOf": [
                                {
                                  "title": "Debug",
                                  "type": "object",
                                  "properties": {
                                    "message": {
                                      "$ref": "#/components/schemas/unistring"
                                    }
                                  },
                                  "required": [
                                    "message"
                                  ]
                                },
                                {
                                  "title": "Request",
                                  "type": "object",
                                  "properties": {
                                    "request": {
                                      "oneOf": [
                                        {
                                          "title": "Flush",
                                          "type": "object",
                                          "properties": {
                                            "request": {
                                              "type": "string",
                                              "enum": [
                                                "flush"
                                              ]
                                            },
                                            "block": {
                                              "$ref": "#/components/schemas/block_hash"
                                            }
                                          },
                                          "required": [
                                            "request",
                                            "block"
                                          ]
                                        },
                                        {
                                          "title": "Notify",
                                          "type": "object",
                                          "properties": {
                                            "request": {
                                              "type": "string",
                                              "enum": [
                                                "notify"
                                              ]
                                            },
                                            "peer": {
                                              "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                                            },
                                            "mempool": {
                                              "$ref": "#/components/schemas/mempool"
                                            }
                                          },
                                          "required": [
                                            "request",
                                            "peer",
                                            "mempool"
                                          ]
                                        },
                                        {
                                          "title": "Inject",
                                          "type": "object",
                                          "properties": {
                                            "request": {
                                              "type": "string",
                                              "enum": [
                                                "inject"
                                              ]
                                            },
                                            "operation": {
                                              "$ref": "#/components/schemas/operation"
                                            }
                                          },
                                          "required": [
                                            "request",
                                            "operation"
                                          ]
                                        },
                                        {
                                          "title": "Arrived",
                                          "type": "object",
                                          "properties": {
                                            "request": {
                                              "type": "string",
                                              "enum": [
                                                "arrived"
                                              ]
                                            },
                                            "operation_hash": {
                                              "$ref": "#/components/schemas/Operation_hash"
                                            },
                                            "operation": {
                                              "$ref": "#/components/schemas/operation"
                                            }
                                          },
                                          "required": [
                                            "request",
                                            "operation_hash",
                                            "operation"
                                          ]
                                        },
                                        {
                                          "title": "Advertise",
                                          "type": "object",
                                          "properties": {
                                            "request": {
                                              "type": "string",
                                              "enum": [
                                                "advertise"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "request"
                                          ]
                                        },
                                        {
                                          "title": "Leftover",
                                          "type": "object",
                                          "properties": {
                                            "request": {
                                              "type": "string",
                                              "enum": [
                                                "leftover"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "request"
                                          ]
                                        }
                                      ]
                                    },
                                    "status": {
                                      "type": "object",
                                      "properties": {
                                        "pushed": {
                                          "$ref": "#/components/schemas/timestamp.system"
                                        },
                                        "treated": {
                                          "$ref": "#/components/schemas/timespan.system"
                                        },
                                        "completed": {
                                          "$ref": "#/components/schemas/timespan.system"
                                        }
                                      },
                                      "required": [
                                        "pushed",
                                        "treated",
                                        "completed"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "request",
                                    "status"
                                  ]
                                },
                                {
                                  "title": "Failed request",
                                  "type": "object",
                                  "properties": {
                                    "error": {
                                      "$ref": "#/components/schemas/error"
                                    },
                                    "failed_request": {
                                      "oneOf": [
                                        {
                                          "title": "Flush",
                                          "type": "object",
                                          "properties": {
                                            "request": {
                                              "type": "string",
                                              "enum": [
                                                "flush"
                                              ]
                                            },
                                            "block": {
                                              "$ref": "#/components/schemas/block_hash"
                                            }
                                          },
                                          "required": [
                                            "request",
                                            "block"
                                          ]
                                        },
                                        {
                                          "title": "Notify",
                                          "type": "object",
                                          "properties": {
                                            "request": {
                                              "type": "string",
                                              "enum": [
                                                "notify"
                                              ]
                                            },
                                            "peer": {
                                              "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                                            },
                                            "mempool": {
                                              "$ref": "#/components/schemas/mempool"
                                            }
                                          },
                                          "required": [
                                            "request",
                                            "peer",
                                            "mempool"
                                          ]
                                        },
                                        {
                                          "title": "Inject",
                                          "type": "object",
                                          "properties": {
                                            "request": {
                                              "type": "string",
                                              "enum": [
                                                "inject"
                                              ]
                                            },
                                            "operation": {
                                              "$ref": "#/components/schemas/operation"
                                            }
                                          },
                                          "required": [
                                            "request",
                                            "operation"
                                          ]
                                        },
                                        {
                                          "title": "Arrived",
                                          "type": "object",
                                          "properties": {
                                            "request": {
                                              "type": "string",
                                              "enum": [
                                                "arrived"
                                              ]
                                            },
                                            "operation_hash": {
                                              "$ref": "#/components/schemas/Operation_hash"
                                            },
                                            "operation": {
                                              "$ref": "#/components/schemas/operation"
                                            }
                                          },
                                          "required": [
                                            "request",
                                            "operation_hash",
                                            "operation"
                                          ]
                                        },
                                        {
                                          "title": "Advertise",
                                          "type": "object",
                                          "properties": {
                                            "request": {
                                              "type": "string",
                                              "enum": [
                                                "advertise"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "request"
                                          ]
                                        },
                                        {
                                          "title": "Leftover",
                                          "type": "object",
                                          "properties": {
                                            "request": {
                                              "type": "string",
                                              "enum": [
                                                "leftover"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "request"
                                          ]
                                        }
                                      ]
                                    },
                                    "status": {
                                      "type": "object",
                                      "properties": {
                                        "pushed": {
                                          "$ref": "#/components/schemas/timestamp.system"
                                        },
                                        "treated": {
                                          "$ref": "#/components/schemas/timespan.system"
                                        },
                                        "completed": {
                                          "$ref": "#/components/schemas/timespan.system"
                                        }
                                      },
                                      "required": [
                                        "pushed",
                                        "treated",
                                        "completed"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "error",
                                    "failed_request",
                                    "status"
                                  ]
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "level",
                          "events"
                        ]
                      }
                    },
                    "current_request": {
                      "type": "object",
                      "properties": {
                        "pushed": {
                          "$ref": "#/components/schemas/timestamp.system"
                        },
                        "treated": {
                          "$ref": "#/components/schemas/timestamp.system"
                        },
                        "request": {
                          "oneOf": [
                            {
                              "title": "Flush",
                              "type": "object",
                              "properties": {
                                "request": {
                                  "type": "string",
                                  "enum": [
                                    "flush"
                                  ]
                                },
                                "block": {
                                  "$ref": "#/components/schemas/block_hash"
                                }
                              },
                              "required": [
                                "request",
                                "block"
                              ]
                            },
                            {
                              "title": "Notify",
                              "type": "object",
                              "properties": {
                                "request": {
                                  "type": "string",
                                  "enum": [
                                    "notify"
                                  ]
                                },
                                "peer": {
                                  "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                                },
                                "mempool": {
                                  "$ref": "#/components/schemas/mempool"
                                }
                              },
                              "required": [
                                "request",
                                "peer",
                                "mempool"
                              ]
                            },
                            {
                              "title": "Inject",
                              "type": "object",
                              "properties": {
                                "request": {
                                  "type": "string",
                                  "enum": [
                                    "inject"
                                  ]
                                },
                                "operation": {
                                  "$ref": "#/components/schemas/operation"
                                }
                              },
                              "required": [
                                "request",
                                "operation"
                              ]
                            },
                            {
                              "title": "Arrived",
                              "type": "object",
                              "properties": {
                                "request": {
                                  "type": "string",
                                  "enum": [
                                    "arrived"
                                  ]
                                },
                                "operation_hash": {
                                  "$ref": "#/components/schemas/Operation_hash"
                                },
                                "operation": {
                                  "$ref": "#/components/schemas/operation"
                                }
                              },
                              "required": [
                                "request",
                                "operation_hash",
                                "operation"
                              ]
                            },
                            {
                              "title": "Advertise",
                              "type": "object",
                              "properties": {
                                "request": {
                                  "type": "string",
                                  "enum": [
                                    "advertise"
                                  ]
                                }
                              },
                              "required": [
                                "request"
                              ]
                            },
                            {
                              "title": "Leftover",
                              "type": "object",
                              "properties": {
                                "request": {
                                  "type": "string",
                                  "enum": [
                                    "leftover"
                                  ]
                                }
                              },
                              "required": [
                                "request"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "pushed",
                        "treated",
                        "request"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "pending_requests",
                    "backlog"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Chain_id": {
        "title": "Network identifier (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Context_hash": {
        "title": "A hash of context (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Crypto_box.Public_key_hash": {
        "title": "A Cryptobox public key ID (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Operation_hash": {
        "title": "A Tezos operation ID (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Operation_list_list_hash": {
        "title": "A list of list of operations (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "Protocol_hash": {
        "title": "A Tezos protocol ID (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "bignum": {
        "title": "Big number",
        "description": "Decimal representation of a big number",
        "type": "string"
      },
      "block_hash": {
        "title": "A block identifier (Base58Check-encoded)",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "block_header": {
        "title": "Block header",
        "description": "Block header. It contains both shell and protocol specific data.",
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "minimum": -2147483648,
            "maximum": 2147483647
          },
          "proto": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "predecessor": {
            "$ref": "#/components/schemas/block_hash"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp.protocol"
          },
          "validation_pass": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "operations_hash": {
            "$ref": "#/components/schemas/Operation_list_list_hash"
          },
          "fitness": {
            "$ref": "#/components/schemas/fitness"
          },
          "context": {
            "$ref": "#/components/schemas/Context_hash"
          },
          "protocol_data": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]+$"
          }
        },
        "required": [
          "level",
          "proto",
          "predecessor",
          "timestamp",
          "validation_pass",
          "operations_hash",
          "fitness",
          "context",
          "protocol_data"
        ]
      },
      "chain_status": {
        "description": "If 'unsynced', the node is not currently synchronized with of its peers (it is probably still bootstrapping and its head is lagging behind the chain's).\nIf 'synced', the node considers itself synchronized with its peers and the current head timestamp is recent.\nIf 'stuck', the node considers itself synchronized with its peers but the chain seems to be halted from its viewpoint.",
        "type": "string",
        "enum": [
          "stuck",
          "synced",
          "unsynced"
        ]
      },
      "distributed_db_version": {
        "description": "A version number for the distributed DB protocol",
        "type": "integer",
        "minimum": 0,
        "maximum": 65535
      },
      "distributed_db_version.name": {
        "description": "A name for the distributed DB protocol",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "error": {
        "description": "The full list of error is available with the global RPC `GET errors`"
      },
      "fitness": {
        "title": "Block fitness",
        "description": "The fitness, or score, of a block, that allow the Tezos to decide which chain is the best. A fitness value is a list of byte sequences. They are compared as follows: shortest lists are smaller; lists of the same length are compared according to the lexicographical order.",
        "type": "array",
        "items": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9]+$"
        }
      },
      "int64": {
        "title": "64 bit integers",
        "description": "Decimal representation of 64 bit integers",
        "type": "string"
      },
      "mempool": {
        "description": "A batch of operation. This format is used to gossip operations between peers.",
        "type": "object",
        "properties": {
          "known_valid": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Operation_hash"
            }
          },
          "pending": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Operation_hash"
            }
          }
        },
        "required": [
          "known_valid",
          "pending"
        ]
      },
      "network_version": {
        "description": "A version number for the network protocol (includes distributed DB version and p2p version)",
        "type": "object",
        "properties": {
          "chain_name": {
            "$ref": "#/components/schemas/distributed_db_version.name"
          },
          "distributed_db_version": {
            "$ref": "#/components/schemas/distributed_db_version"
          },
          "p2p_version": {
            "$ref": "#/components/schemas/p2p_version"
          }
        },
        "required": [
          "chain_name",
          "distributed_db_version",
          "p2p_version"
        ]
      },
      "operation": {
        "description": "An operation. The shell_header part indicates a block an operation is meant to apply on top of. The proto part is protocol-specific and appears as a binary blob.",
        "type": "object",
        "properties": {
          "branch": {
            "$ref": "#/components/schemas/block_hash"
          },
          "data": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]+$"
          }
        },
        "required": [
          "branch",
          "data"
        ]
      },
      "p2p_address": {
        "description": "An address for locating peers.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "p2p_connection.id": {
        "description": "The identifier for a p2p connection. It includes an address and a port number.",
        "type": "object",
        "properties": {
          "addr": {
            "$ref": "#/components/schemas/p2p_address"
          },
          "port": {
            "type": "integer",
            "minimum": 0,
            "maximum": 65535
          }
        },
        "required": [
          "addr"
        ]
      },
      "p2p_connection.pool_event": {
        "description": "An event that may happen during maintenance of and other operations on the p2p connection pool. Typically, it includes connection errors, peer swaps, etc.",
        "oneOf": [
          {
            "title": "Too_few_connections",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "too_few_connections"
                ]
              }
            },
            "required": [
              "event"
            ]
          },
          {
            "title": "Too_many_connections",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "too_many_connections"
                ]
              }
            },
            "required": [
              "event"
            ]
          },
          {
            "title": "New_point",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "new_point"
                ]
              },
              "point": {
                "$ref": "#/components/schemas/p2p_point.id"
              }
            },
            "required": [
              "event",
              "point"
            ]
          },
          {
            "title": "New_peer",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "new_peer"
                ]
              },
              "peer_id": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "peer_id"
            ]
          },
          {
            "title": "Incoming_connection",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "incoming_connection"
                ]
              },
              "point": {
                "$ref": "#/components/schemas/p2p_point.id"
              }
            },
            "required": [
              "event",
              "point"
            ]
          },
          {
            "title": "Outgoing_connection",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "outgoing_connection"
                ]
              },
              "point": {
                "$ref": "#/components/schemas/p2p_point.id"
              }
            },
            "required": [
              "event",
              "point"
            ]
          },
          {
            "title": "Authentication_failed",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "authentication_failed"
                ]
              },
              "point": {
                "$ref": "#/components/schemas/p2p_point.id"
              }
            },
            "required": [
              "event",
              "point"
            ]
          },
          {
            "title": "Accepting_request",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "accepting_request"
                ]
              },
              "point": {
                "$ref": "#/components/schemas/p2p_point.id"
              },
              "id_point": {
                "$ref": "#/components/schemas/p2p_connection.id"
              },
              "peer_id": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "point",
              "id_point",
              "peer_id"
            ]
          },
          {
            "title": "Rejecting_request",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "rejecting_request"
                ]
              },
              "point": {
                "$ref": "#/components/schemas/p2p_point.id"
              },
              "id_point": {
                "$ref": "#/components/schemas/p2p_connection.id"
              },
              "peer_id": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "point",
              "id_point",
              "peer_id"
            ]
          },
          {
            "title": "Request_rejected",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "request_rejected"
                ]
              },
              "point": {
                "$ref": "#/components/schemas/p2p_point.id"
              },
              "identity": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/p2p_connection.id"
                    },
                    {
                      "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                    }
                  ]
                }
              }
            },
            "required": [
              "event",
              "point"
            ]
          },
          {
            "title": "Connection_established",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "connection_established"
                ]
              },
              "id_point": {
                "$ref": "#/components/schemas/p2p_connection.id"
              },
              "peer_id": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "id_point",
              "peer_id"
            ]
          },
          {
            "title": "Disconnection",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "disconnection"
                ]
              },
              "peer_id": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "peer_id"
            ]
          },
          {
            "title": "External_disconnection",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "external_disconnection"
                ]
              },
              "peer_id": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "peer_id"
            ]
          },
          {
            "title": "Gc_points",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "gc_points"
                ]
              }
            },
            "required": [
              "event"
            ]
          },
          {
            "title": "Gc_peer_ids",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "gc_peer_ids"
                ]
              }
            },
            "required": [
              "event"
            ]
          },
          {
            "title": "Swap_request_received",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "swap_request_received"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Swap_ack_received",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "swap_ack_received"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Swap_request_sent",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "swap_request_sent"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Swap_ack_sent",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "swap_ack_sent"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Swap_request_ignored",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "swap_request_ignored"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Swap_success",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "swap_success"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Swap_failure",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "swap_failure"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Bootstrap_sent",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "bootstrap_sent"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Bootstrap_received",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "bootstrap_received"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Advertise_sent",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "advertise_sent"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          },
          {
            "title": "Advertise_received",
            "type": "object",
            "properties": {
              "event": {
                "type": "string",
                "enum": [
                  "advertise_received"
                ]
              },
              "source": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event",
              "source"
            ]
          }
        ]
      },
      "p2p_peer.pool_event": {
        "description": "An event that may happen during maintenance of and other operations on the connection to a specific peer.",
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "rejecting_request",
              "incoming_request",
              "disconnection",
              "external_disconnection",
              "connection_established",
              "request_rejected"
            ]
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp.system"
          },
          "addr": {
            "$ref": "#/components/schemas/p2p_address"
          },
          "port": {
            "type": "integer",
            "minimum": 0,
            "maximum": 65535
          }
        },
        "required": [
          "kind",
          "timestamp",
          "addr"
        ]
      },
      "p2p_peer.state": {
        "description": "The state a peer connection can be in: accepted (when the connection is being established), running (when the connection is already established), disconnected (otherwise).",
        "type": "string",
        "enum": [
          "running",
          "accepted",
          "disconnected"
        ]
      },
      "p2p_point.id": {
        "description": "Identifier for a peer point",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "p2p_point.info": {
        "description": "Information about a peer point. Includes flags, state, and records about past events.",
        "type": "object",
        "properties": {
          "trusted": {
            "type": "boolean"
          },
          "greylisted_until": {
            "$ref": "#/components/schemas/timestamp.system"
          },
          "state": {
            "$ref": "#/components/schemas/p2p_point.state"
          },
          "p2p_peer_id": {
            "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
          },
          "last_failed_connection": {
            "$ref": "#/components/schemas/timestamp.system"
          },
          "last_rejected_connection": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                },
                {
                  "$ref": "#/components/schemas/timestamp.system"
                }
              ]
            }
          },
          "last_established_connection": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                },
                {
                  "$ref": "#/components/schemas/timestamp.system"
                }
              ]
            }
          },
          "last_disconnection": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                },
                {
                  "$ref": "#/components/schemas/timestamp.system"
                }
              ]
            }
          },
          "last_seen": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                },
                {
                  "$ref": "#/components/schemas/timestamp.system"
                }
              ]
            }
          },
          "last_miss": {
            "$ref": "#/components/schemas/timestamp.system"
          }
        },
        "required": [
          "trusted",
          "state"
        ]
      },
      "p2p_point.pool_event": {
        "description": "Events happening during maintenance of and operations on a peer point pool (such as connections, disconnections, connection requests).",
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/timestamp.system"
            },
            {
              "oneOf": [
                {
                  "title": "Outgoing_request",
                  "type": "object",
                  "properties": {
                    "event_kind": {
                      "type": "string",
                      "enum": [
                        "outgoing_request"
                      ]
                    }
                  },
                  "required": [
                    "event_kind"
                  ]
                },
                {
                  "title": "Accepting_request",
                  "type": "object",
                  "properties": {
                    "event_kind": {
                      "type": "string",
                      "enum": [
                        "accepting_request"
                      ]
                    },
                    "p2p_peer_id": {
                      "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                    }
                  },
                  "required": [
                    "event_kind",
                    "p2p_peer_id"
                  ]
                },
                {
                  "title": "Rejecting_request",
                  "type": "object",
                  "properties": {
                    "event_kind": {
                      "type": "string",
                      "enum": [
                        "rejecting_request"
                      ]
                    },
                    "p2p_peer_id": {
                      "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                    }
                  },
                  "required": [
                    "event_kind",
                    "p2p_peer_id"
                  ]
                },
                {
                  "title": "Rejecting_rejected",
                  "type": "object",
                  "properties": {
                    "event_kind": {
                      "type": "string",
                      "enum": [
                        "request_rejected"
                      ]
                    },
                    "p2p_peer_id": {
                      "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                    }
                  },
                  "required": [
                    "event_kind"
                  ]
                },
                {
                  "title": "Connection_established",
                  "type": "object",
                  "properties": {
                    "event_kind": {
                      "type": "string",
                      "enum": [
                        "rejecting_request"
                      ]
                    },
                    "p2p_peer_id": {
                      "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                    }
                  },
                  "required": [
                    "event_kind",
                    "p2p_peer_id"
                  ]
                },
                {
                  "title": "Disconnection",
                  "type": "object",
                  "properties": {
                    "event_kind": {
                      "type": "string",
                      "enum": [
                        "rejecting_request"
                      ]
                    },
                    "p2p_peer_id": {
                      "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                    }
                  },
                  "required": [
                    "event_kind",
                    "p2p_peer_id"
                  ]
                },
                {
                  "title": "External_disconnection",
                  "type": "object",
                  "properties": {
                    "event_kind": {
                      "type": "string",
                      "enum": [
                        "rejecting_request"
                      ]
                    },
                    "p2p_peer_id": {
                      "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
                    }
                  },
                  "required": [
                    "event_kind",
                    "p2p_peer_id"
                  ]
                }
              ]
            }
          ]
        }
      },
      "p2p_point.state": {
        "description": "The state a connection to a peer point can be in: requested (connection open from here), accepted (handshake), running (connection already established), disconnected (no connection).",
        "oneOf": [
          {
            "title": "Requested",
            "type": "object",
            "properties": {
              "event_kind": {
                "type": "string",
                "enum": [
                  "requested"
                ]
              }
            },
            "required": [
              "event_kind"
            ]
          },
          {
            "title": "Accepted",
            "type": "object",
            "properties": {
              "event_kind": {
                "type": "string",
                "enum": [
                  "accepted"
                ]
              },
              "p2p_peer_id": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event_kind",
              "p2p_peer_id"
            ]
          },
          {
            "title": "Running",
            "type": "object",
            "properties": {
              "event_kind": {
                "type": "string",
                "enum": [
                  "running"
                ]
              },
              "p2p_peer_id": {
                "$ref": "#/components/schemas/Crypto_box.Public_key_hash"
              }
            },
            "required": [
              "event_kind",
              "p2p_peer_id"
            ]
          },
          {
            "title": "Disconnected",
            "type": "object",
            "properties": {
              "event_kind": {
                "type": "string",
                "enum": [
                  "disconnected"
                ]
              }
            },
            "required": [
              "event_kind"
            ]
          }
        ]
      },
      "p2p_stat": {
        "description": "Statistics about the p2p network.",
        "type": "object",
        "properties": {
          "total_sent": {
            "$ref": "#/components/schemas/int64"
          },
          "total_recv": {
            "$ref": "#/components/schemas/int64"
          },
          "current_inflow": {
            "type": "integer",
            "minimum": -1073741824,
            "maximum": 1073741823
          },
          "current_outflow": {
            "type": "integer",
            "minimum": -1073741824,
            "maximum": 1073741823
          }
        },
        "required": [
          "total_sent",
          "total_recv",
          "current_inflow",
          "current_outflow"
        ]
      },
      "p2p_version": {
        "description": "A version number for the p2p layer.",
        "type": "integer",
        "minimum": 0,
        "maximum": 65535
      },
      "protocol": {
        "description": "The environment a protocol relies on and the components a protocol is made of.",
        "type": "object",
        "properties": {
          "expected_env_version": {
            "$ref": "#/components/schemas/protocol.environment_version"
          },
          "components": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "$ref": "#/components/schemas/unistring"
                },
                "interface": {
                  "$ref": "#/components/schemas/unistring"
                },
                "implementation": {
                  "$ref": "#/components/schemas/unistring"
                }
              },
              "required": [
                "name",
                "implementation"
              ]
            }
          }
        },
        "required": [
          "expected_env_version",
          "components"
        ]
      },
      "protocol.environment_version": {
        "type": "integer",
        "minimum": -32768,
        "maximum": 32767
      },
      "timespan.system": {
        "description": "A span of time, as seen by the local computer.",
        "type": "integer"
      },
      "timestamp.protocol": {
        "description": "A timestamp as seen by the protocol: second-level precision, epoch based.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "timestamp.rfc": {
        "title": "RFC 3339 formatted timestamp",
        "description": "A date in RFC 3339 notation.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/unistring"
          }
        ]
      },
      "timestamp.system": {
        "description": "A timestamp as seen by the underlying, local computer: subsecond-level precision, epoch or rfc3339 based.",
        "oneOf": [
          {
            "title": "RFC encoding",
            "oneOf": [
              {
                "$ref": "#/components/schemas/timestamp.rfc"
              }
            ]
          },
          {
            "title": "Second since epoch",
            "oneOf": [
              {
                "$ref": "#/components/schemas/int64"
              }
            ]
          }
        ]
      },
      "unistring": {
        "title": "Universal string representation",
        "description": "Either a plain UTF8 string, or a sequence of bytes for strings that contain invalid byte sequences.",
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "object",
            "properties": {
              "invalid_utf8_string": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 255
                }
              }
            },
            "required": [
              "invalid_utf8_string"
            ]
          }
        ]
      },
      "user_activated.protocol_overrides": {
        "title": "User activated protocol overrides",
        "description": "User activated protocol overrides: activate a protocol instead of another.",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "replaced_protocol": {
              "$ref": "#/components/schemas/Protocol_hash"
            },
            "replacement_protocol": {
              "$ref": "#/components/schemas/Protocol_hash"
            }
          },
          "required": [
            "replaced_protocol",
            "replacement_protocol"
          ]
        }
      },
      "user_activated.upgrades": {
        "title": "User activated upgrades",
        "description": "User activated upgrades: at given level, switch to given protocol.",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "level": {
              "type": "integer",
              "minimum": -2147483648,
              "maximum": 2147483647
            },
            "replacement_protocol": {
              "$ref": "#/components/schemas/Protocol_hash"
            }
          },
          "required": [
            "level",
            "replacement_protocol"
          ]
        }
      }
    }
  }
}
